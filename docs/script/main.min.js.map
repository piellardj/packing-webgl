{"version":3,"sources":["webpack://packing-webgl/./src/ts/color/color-picker.ts","webpack://packing-webgl/./src/ts/color/color.ts","webpack://packing-webgl/./src/ts/debug-collisions.ts","webpack://packing-webgl/./src/ts/engine.ts","webpack://packing-webgl/./src/ts/gl-utils/gl-canvas.ts","webpack://packing-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://packing-webgl/./src/ts/gl-utils/shader-manager.ts","webpack://packing-webgl/./src/ts/gl-utils/shader-sources.ts","webpack://packing-webgl/./src/ts/gl-utils/shader.ts","webpack://packing-webgl/./src/ts/gl-utils/vbo.ts","webpack://packing-webgl/./src/ts/main.ts","webpack://packing-webgl/./src/ts/parameters.ts","webpack://packing-webgl/./src/ts/patterns/pattern-base.ts","webpack://packing-webgl/./src/ts/patterns/pattern-circle.ts","webpack://packing-webgl/./src/ts/patterns/pattern-rectangle.ts","webpack://packing-webgl/./src/ts/patterns/pattern-square.ts","webpack://packing-webgl/./src/ts/patterns/pattern-triangle.ts","webpack://packing-webgl/./src/ts/plotter/plotter-base.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-2d.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-base.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-webgl.ts","webpack://packing-webgl/./src/ts/plotter/plotter-svg.ts","webpack://packing-webgl/./src/ts/space-grid/grid.ts","webpack://packing-webgl/./src/ts/statistics/statistics.ts","webpack://packing-webgl/./src/ts/statistics/stop-watch.ts","webpack://packing-webgl/./src/ts/utils/helper.ts","webpack://packing-webgl/./src/ts/utils/number-range.ts","webpack://packing-webgl/webpack/bootstrap","webpack://packing-webgl/webpack/startup"],"names":["palettes","Color","setPalette","id","length","this","usePalette","ColorPicker","palette","getDisplayColor","itemColor","itemNestingLevel","highContrastMode","darkMode","WHITE","BLACK","getDifferentColorFromPalette","colorToAvoid","result","paletteSize","colorId","Math","floor","random","String","prototype","padStart","maxLength","fillString","nbRepeats","ceil","i","r","g","b","randomChannel","toString","hexString","rHex","gHex","bHex","GREEN","testedSquares","fixed","PatternSquare","mobile","testedCircles","PatternCircle","testedRectangles","PatternRectangle","testedTriangles","PatternTriangle","computeSquare","sideSize","computeRectangle","width","height","size","from","x","y","to","mainDebugCollisions","plotter","PlotterCanvas2D","zoomFactor","Page","Canvas","Observers","mouseWheel","push","delta","max","min","requestAnimationFrame","mainLoop","primitive","currentTestType","Parameters","currentCollisionType","testitems","EPrimitive","SQUARE","CIRCLE","RECTANGLE","canvasSize","getSize","minCanvasSide","mousePosRelative","getMousePosition","center","drawFunction","items","drawSquares","drawCircles","drawRectangles","drawTriangles","getDrawFunction","ECollisionTestType","PRIMITIVE","lines","initialize","drawLines","finalize","POINT","domainSize","visibility","computeVisibility","EVisibility","COVERS_VIEW","console","log","OUT_OF_VIEW","initializedItemsList","uninitializedItemsList","lastRecyclingTime","grid","Grid","zoomCenter","currentBackgroundItem","reset","createItem","TRIANGLE","Error","currentPrimitive","setItemsCount","wantedCount","initializedCount","totalItemsCount","itemsToAdd","newItem","draw","Engine","DEFAULT_BACKGROUND_ITEM","color","blackBackground","highContrast","everythingDrawn","isReady","isZooming","performance","now","PatternBase","maxBlendingTime","itemsToDraw","backgroundColor","computeBackgroundColor","oneCellOnly","getItemsFromCell","cellX","cellY","showGrid","udpate","deltaTimeInSeconds","mayRecycle","willZoom","needToInitializeGrid","requiresRedraw","Statistics","timeSpentInReindex","start","gridChanged","reindexItems","stop","timeSpentInRecycle","itemsRecycled","performRecycling","timeSpentInZoom","itemsMoved","performZoom","gridCellSize","cellSize","adaptativeGrid","targetItemsPerCell","targetItemsPerGridCell","lastItemsPerCell","itemsPerCell","nbItemsRecycled","allowOverlapping","sizeFactor","spacing","acceptedSizesForNewItems","NumberRange","minSize","maxTries","maxTriesPerFrame","backgroundItem","triesLeft","currentItem","pop","resetResult","nbTries","success","registerItem","nbPendingRecycling","nbTriesUsed","registerRecyclingStats","computeStatistics","updateZoomCenter","newInitializedArray","zoomSpeed","item","zoomIn","MAX_SIZE","VISIBLE","nestingLevel","rawColor","isMouseDown","mousePosition","halfWidth","halfHeight","gl","initGL","flags","setError","message","Demopage","setErrorMessage","canvas","getCanvas","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","adjustSize","hidpi","cssPixel","window","devicePixelRatio","clientWidth","clientHeight","_gl","GLResource","cachedShaders","buildShader","infos","callback","sourcesPending","sourcesFailed","loadedSource","processSource","source","replace","match","name","injected","shader","vert","ShaderSources","getSource","vertexFilename","frag","fragmentFilename","processedVert","processedFrag","Shader","loadSource","getShader","registerShader","callAndClearCallbacks","cached","callbacks","cachedCallback","failed","pending","builtShader","deleteShader","freeGLResources","cachedSources","filename","text","XMLHttpRequest","open","onload","readyState","status","responseText","error","statusText","onerror","send","notImplemented","alert","types","str","binder","location","value","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","use","useProgram","bindUniforms","currTextureUnitNb","Object","keys","u","forEach","uName","uniform","loc","bindAttributes","a","aName","attribute","VBO","bind","bindUniformsAndAttributes","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","Usage","array","staticUsage","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","DYNAMIC_DRAW","normalize","stride","offset","usage","STATIC","DYNAMIC","createQuad","minX","minY","maxX","maxY","Float32Array","FLOAT","deleteBuffer","enableVertexAttribArray","vertexAttribPointer","setData","isInCollisionsDebug","canvasPlotter","isWebGLVersion","PlotterCanvasWebGL","engine","needToRedraw","addRedrawObserver","addClearObserver","addDownloadObserver","svgPlotter","PlotterSVG","svgString","export","Helper","downloadTextFile","lastRunTime","time","timeSpentInMainLoop","wantedItemsCount","quantity","paletteId","timeSpentInUpdate","updateChangedSomething","timeSpentInDraw","successfulDraw","registerFrame","main","controlId","redrawObservers","triggerRedraw","observer","canvasResize","Checkbox","addObserver","Tabs","Range","clearObservers","triggerClear","Button","Picker","isInDebug","Helpers","getQueryStringValue","Sections","setVisibility","setIndicatorVisibility","setChecked","updateIndicatorsVisibility","visible","isChecked","setIndicatorsVisibility","updateGridControlsVisibility","adaptative","Controls","href","getValue","getValues","abs","disallowInstancing","FileControl","CANVAS_CENTER","globalLastTestId","lastTestId","blending","acceptedSizes","backgroundPattern","randomizePosition","parentItem","maxSize","computeBiggestSizePossible","isInRange","initializationTime","parentNestingLevel","parentColor","computeOpacity","blendTime","MAX_SIZE_LOWER","MAX_SIZE_GAP","lifetime","currentTestId","rawMaxSize","computeBiggestSizePossibleToAvoidPoint","maxDistanceDetectableByExactCell","getDistanceToClosestBorder","exactCellId","getCellId","existingItemsFromExactCell","biggestSizeToAvoidClosestItems","computeBiggestSizePossibleToAvoidItems","topLeftPoint","bottomRightPoint","minCellId","maxCellId","additionalItemsToTest","getItemsFromCellsGroup","biggestSizeToAvoidFurtherItems","itemsToAvoid","computeBiggestSizePossibleToAvoidItem","isInside","round","pointToAvoid","toPointX","toPointY","sqrt","itemToAvoid","toCenterX","toCenterY","distance","radius","halfDomainWidth","halfDomainHeight","absX","absY","dX","dY","aspectRatio","baseWidth","baseHeight","maxSizeX","maxSizeY","deltaX","deltaY","halfObstacleWidth","halfObstacleHeight","halfSideLength","sideLength","halfSize","rotatePoint","point","cosAngle","sinAngle","computeSegmentsIntersection","from1","delta1","delta2","denom","invDenom","t1","MAX_NUMBER","minPositive","args","arg","angle","PI","cos","sin","P1","baseP1","P2","baseP2","P3","baseP3","P1_TO_P2","P2_TO_P3","P3_TO_P1","pointToAvoidLocal","intersection","isPointInside","smallerTforMyVertices","smallerTforMySides","localOtherP1","localOtherP2","localOtherP3","scaledOtherP1toP2","scaledOtherP2toP3","scaledOtherP3toP1","T1_1","T1_2","T1_3","T2_1","T2_2","T2_3","T3_1","T3_2","T3_3","d1","d2","d3","PlotterBase","context","alpha","clearCanvas","fillStyle","fillRect","squares","_size","square","centerX","centerY","circles","TWO_PI","circle","beginPath","arc","fill","closePath","rectangles","rectangle","triangles","triangle","moveTo","lineTo","strokeStyle","lineWidth","line","stroke","PlotterCanvasBase","resizeCanvas","actualWidth","actualHeight","SQUARE_GEOMETRY","TRIANGLE_GEOMETRY","ALIASED_POINT_SIZE_RANGE","needToResetInstancingDivision","instancingExt","getExtension","errorMessage","enableBlending","linesBuffer","linesVBO","primitivesBuffer","primitivesVBOId","geometryBuffer","concat","geometryVBO","linesShader","squaresShader","circlesShader","rectanglesShader","trianglesShader","loadAndBuildShader","squaresInstancedShader","circlesInstancedShader","rectanglesInstancedShader","trianglesInstancedShader","supportsInstancing","clear","COLOR_BUFFER_BIT","viewport","drawPrimitives","nbLines","wantedLinesBufferLength","drawArrays","LINES","pointsShader","instancedShader","extraAttributeFunction","updatePrimitivesVBO","timeSpentInDrawDrawX","useInstancing","drawInstanced","drawAsPoints","nbItems","bindCommonUniformsAndAttributes","drawArraysInstancedANGLE","TRIANGLES","TRIANGLE_STRIP","POINTS","extraAttribute","timeSpentInDrawAllocateBuffer","wantedPrimitivesBufferLength","timeSpentInDrawFillBuffer","timeSpentInDrawUploadVBO","instanced","stateAttribLoc","colorAttribLoc","vertexAttribDivisorANGLE","enable","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","shaderName","affectShader","ShaderManager","stringParts","path","x1","y1","x2","y2","join","gridSize","gridCells","topLeftCorner","registeredItemsCount","timeSpentInReindexResetDomain","gridHasChanged","resetDomain","timeSpentInReindexReindexItems","topLeft","bottomRight","iCellY","iCellX","cellId","computeCellId","_cellSize","iX","iY","position","localX","localY","minDistanceX","minDistanceY","minCellX","minCellY","maxCellX","maxCellY","cellItems","apply","registerGridStats","wantedGridSizeX","wantedGridSizeY","hasChanged","nbCells","timeSinceLastVerboseFrame","StopWatch","frames","itemsCount","itemsRecycledCount","itemsPendingRecyclingCount","itemsRecyclingTries","nbGridStats","gridWidth","gridHeight","gridRegisteredItems","totalTime","fps","averageFrameTime","averageMainLoopTime","mainLoopTimeRelative","averageDrawTime","drawTimeRelative","averageDrawAllocateBufferTime","drawAllocateBufferTimeRelative","averageDrawFillBufferTime","drawFillBufferTimeRelative","averageDrawUploadVBOTime","drawDrawUploadVBOTimeRelative","averageDrawDrawXTime","drawDrawXTimeRelative","averageUpdateTime","updateTimeRelative","averageUpdateReindexTime","updateReindexTimeRelative","averageUpdateReindexResetDomainTime","updateReindexResetDomainTimeRelative","averageUpdateReindexReindexItemsTime","updateReindexReindexItemsTimeRelative","averageUpdateRecycleTime","updateRecycleTimeRelative","averageUpdateZoomTime","updateZoomTimeRelative","setIndicatorText","toFixed","averageGridWidth","averageGridHeight","averageGridCellCount","updateIndicators","total","recycled","pendingRecycling","nbTriesCount","registeredItems","_totalTime","_isRunning","_lastCheckpoint","fileName","content","fileType","blob","Blob","navigator","msSaveBlob","URL","createObjectURL","linkElement","document","createElement","download","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","url","queryStringStart","indexOf","queryString","substring","split","keyValue","decodeURIComponent","candidate","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { Color } from \"./color\";\r\n\r\ntype Palette = Color[];\r\n\r\nconst SUMMER: Palette = [\r\n    new Color(29, 62, 94),\r\n    new Color(44, 98, 154),\r\n    new Color(68, 174, 163),\r\n    new Color(243, 214, 99),\r\n    new Color(233, 86, 64),\r\n];\r\n\r\nconst FOREST: Palette = [\r\n    new Color(14, 61, 4),\r\n    new Color(23, 122, 8),\r\n    new Color(183, 58, 69),\r\n    new Color(238, 213, 157),\r\n    new Color(209, 135, 52),\r\n];\r\n\r\nconst OCEAN: Palette = [\r\n    new Color(8, 29, 60),\r\n    new Color(31, 99, 159),\r\n    new Color(60, 157, 199),\r\n    new Color(175, 240, 255),\r\n    new Color(235, 184, 133),\r\n];\r\n\r\nconst RUST: Palette = [\r\n    new Color(141,28,11),\r\n    new Color(164,75,38),\r\n    new Color(229,171,84),\r\n    new Color(127,164,161),\r\n    new Color(91,125,123),\r\n    new Color(31,54,54),\r\n];\r\n\r\nconst GREYSCALE: Palette = [\r\n    new Color(38, 38, 38),\r\n    new Color(76, 76, 76),\r\n    new Color(114, 114, 114),\r\n    new Color(153, 153, 153),\r\n    new Color(191, 191, 191),\r\n    new Color(220, 220, 220),\r\n];\r\n\r\nconst NEON: Palette = [\r\n    new Color(252, 17, 147),\r\n    new Color(23, 0, 81),\r\n    new Color(106, 39, 197),\r\n    new Color(33, 168, 159),\r\n    new Color(133, 224, 191),\r\n];\r\n\r\nconst DESERT: Palette = [\r\n    new Color(167,206,160),\r\n    new Color(95,154,121),\r\n    new Color(55,82,83),\r\n    new Color(218,172,115),\r\n    new Color(244,219,142),\r\n    new Color(155,143,100),\r\n    new Color(170,109,75),\r\n];\r\n\r\nconst FLASHY: Palette = [\r\n    new Color(255,0,0),\r\n    new Color(135,0,255),\r\n    new Color(46,0,255),\r\n    new Color(0,161,255),\r\n    new Color(0,255,46),\r\n    new Color(238,255,0),\r\n    new Color(255,123,0),\r\n];\r\n\r\nconst palettes: Palette[] = [\r\n    SUMMER,\r\n    FOREST,\r\n    OCEAN,\r\n    RUST,\r\n    GREYSCALE,\r\n    NEON,\r\n    DESERT,\r\n    FLASHY\r\n];\r\n\r\nabstract class ColorPicker {\r\n    public static highContrastMode: boolean = false;\r\n    public static darkMode: boolean = false;\r\n    public static usePalette: boolean = false;\r\n    private static palette: Palette = palettes[0];\r\n\r\n    public static setPalette(id: number): void {\r\n        if (id < 0 || id >= palettes.length) {\r\n            this.usePalette = false;\r\n        } else {\r\n            this.usePalette = true;\r\n            ColorPicker.palette = palettes[id];\r\n        }\r\n    }\r\n\r\n    public static getDisplayColor(itemColor: Color, itemNestingLevel: number): Color {\r\n        if (ColorPicker.highContrastMode) {\r\n            return (itemNestingLevel % 2 === +ColorPicker.darkMode) ? Color.WHITE : Color.BLACK;\r\n        } else {\r\n            return itemColor;\r\n        }\r\n    }\r\n\r\n    public static getDifferentColorFromPalette(colorToAvoid: Color): Color {\r\n        const paletteSize = ColorPicker.palette.length;\r\n        let result: Color;\r\n\r\n        do {\r\n            const colorId = Math.floor(paletteSize * Math.random());\r\n            result = ColorPicker.palette[colorId];\r\n        } while (result === colorToAvoid);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { ColorPicker };\r\n","function registerPadStartPolyfill(): void {\r\n    if (typeof String.prototype.padStart !== \"function\") {\r\n        String.prototype.padStart = function padStart(maxLength: number, fillString?: string): string {\r\n            if (this.length > maxLength) {\r\n                return String(this);\r\n            }\r\n\r\n            if (!fillString) {\r\n                fillString = \" \";\r\n            }\r\n\r\n            const nbRepeats = Math.ceil((maxLength - this.length) / fillString.length);\r\n            let result = \"\";\r\n            for (let i = 0; i < nbRepeats; i++) {\r\n                result += fillString;\r\n            }\r\n            return result + this;\r\n        }\r\n    }\r\n}\r\nregisterPadStartPolyfill(); // for IE11\r\n\r\nclass Color {\r\n    public static readonly BLACK: Color = new Color(0, 0, 0);\r\n    public static readonly WHITE: Color = new Color(255, 255, 255);\r\n    public static readonly GREEN: Color = new Color(0, 255, 0);\r\n\r\n    public static random(): Color {\r\n        return new Color(Color.randomChannel(), Color.randomChannel(), Color.randomChannel());\r\n    }\r\n\r\n    /** @param r in [0, 255]\r\n     *  @param g in [0, 255]\r\n     *  @param b in [0, 255]\r\n     */\r\n    public constructor(public readonly r: number, public readonly g: number, public readonly b: number) { }\r\n\r\n    public toString(): string {\r\n        if (!this.hexString) {\r\n            const rHex = this.r.toString(16).padStart(2, \"0\");\r\n            const gHex = this.g.toString(16).padStart(2, \"0\");\r\n            const bHex = this.b.toString(16).padStart(2, \"0\");\r\n            this.hexString = `#${rHex}${gHex}${bHex}`;\r\n        }\r\n\r\n        return this.hexString;\r\n    }\r\n\r\n    private hexString: string;\r\n\r\n    private static randomChannel(): number {\r\n        return Math.floor(256 * Math.random());\r\n    }\r\n}\r\n\r\nexport { Color };\r\n","import { Color } from \"./color/color\";\r\n\r\nimport { ECollisionTestType, EPrimitive, Parameters } from \"./parameters\";\r\n\r\nimport { EVisibility, PatternBase } from \"./patterns/pattern-base\";\r\nimport { PatternCircle } from \"./patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"./patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"./patterns/pattern-square\";\r\nimport { PatternTriangle } from \"./patterns/pattern-triangle\";\r\n\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\n\r\nimport { ILine } from \"./utils/i-line\";\r\nimport { ISize } from \"./utils/i-size\";\r\n\r\ninterface ITest {\r\n    fixed: PatternBase;\r\n    mobile: PatternBase;\r\n}\r\ninterface ITestedPattern<T extends PatternBase> extends ITest {\r\n    fixed: T;\r\n    mobile: T;\r\n}\r\n\r\nconst testedSquares: ITestedPattern<PatternSquare> = {\r\n    fixed: new PatternSquare(),\r\n    mobile: new PatternSquare(),\r\n};\r\n\r\nconst testedCircles: ITestedPattern<PatternCircle> = {\r\n    fixed: new PatternCircle(),\r\n    mobile: new PatternCircle(),\r\n};\r\n\r\nconst testedRectangles: ITestedPattern<PatternRectangle> = {\r\n    fixed: new PatternRectangle(),\r\n    mobile: new PatternRectangle(),\r\n};\r\n\r\nconst testedTriangles: ITestedPattern<PatternTriangle> = {\r\n    fixed: new PatternTriangle(),\r\n    mobile: new PatternTriangle(),\r\n};\r\n\r\nfunction getCurrentTestItems(): ITest {\r\n    const primitive = Parameters.primitive;\r\n    if (primitive === EPrimitive.SQUARE) {\r\n        return testedSquares;\r\n    } else if (primitive === EPrimitive.CIRCLE) {\r\n        return testedCircles;\r\n    } else if (primitive === EPrimitive.RECTANGLE) {\r\n        return testedRectangles;\r\n    } else { //  if (primitive === EPrimitive.TRIANGLE) {\r\n        return testedTriangles\r\n    }\r\n}\r\n\r\nfunction computeSquare(sideSize: number): ILine[] {\r\n    return computeRectangle({ width: sideSize, height: sideSize });\r\n}\r\n\r\nfunction computeRectangle(size: ISize): ILine[] {\r\n    return [\r\n        { from: { x: -0.5 * size.width, y: -0.5 * size.height }, to: { x: +0.5 * size.width, y: -0.5 * size.height } },\r\n        { from: { x: +0.5 * size.width, y: -0.5 * size.height }, to: { x: +0.5 * size.width, y: +0.5 * size.height } },\r\n        { from: { x: +0.5 * size.width, y: +0.5 * size.height }, to: { x: -0.5 * size.width, y: +0.5 * size.height } },\r\n        { from: { x: -0.5 * size.width, y: +0.5 * size.height }, to: { x: -0.5 * size.width, y: -0.5 * size.height } },\r\n    ];\r\n}\r\n\r\nfunction mainDebugCollisions(): void {\r\n    const plotter = new PlotterCanvas2D();\r\n\r\n    type DrawFunction = (items: PatternBase[]) => unknown;\r\n    function getDrawFunction(): DrawFunction {\r\n        const primitive = Parameters.primitive;\r\n        if (primitive === EPrimitive.SQUARE) {\r\n            return (items: PatternBase[]) => plotter.drawSquares(items as PatternSquare[]);\r\n        } else if (primitive === EPrimitive.CIRCLE) {\r\n            return (items: PatternBase[]) => plotter.drawCircles(items as PatternCircle[]);\r\n        } else if (primitive === EPrimitive.RECTANGLE) {\r\n            return (items: PatternBase[]) => plotter.drawRectangles(items as PatternRectangle[]);\r\n        } else { // if (primitive === EPrimitive.TRIANGLE) {\r\n            return (items: PatternBase[]) => plotter.drawTriangles(items as PatternTriangle[]);\r\n        }\r\n    }\r\n\r\n    let zoomFactor = 1;\r\n    Page.Canvas.Observers.mouseWheel.push((delta: number) => {\r\n        zoomFactor += 0.1 * delta;\r\n        zoomFactor = Math.max(0.2, Math.min(10, zoomFactor));\r\n    });\r\n    function mainLoop(): void {\r\n        const currentTestType = Parameters.currentCollisionType;\r\n\r\n        const testitems = getCurrentTestItems();\r\n\r\n        const canvasSize = Page.Canvas.getSize();\r\n        const minCanvasSide = Math.min(canvasSize[0], canvasSize[1]);\r\n        const mousePosRelative = Page.Canvas.getMousePosition();\r\n        testitems.mobile.center.x = (mousePosRelative[0] - 0.5) * canvasSize[0];\r\n        testitems.mobile.center.y = (mousePosRelative[1] - 0.5) * canvasSize[1];\r\n        testitems.fixed.center.x = 0;\r\n        testitems.fixed.center.y = 0;\r\n        testitems.fixed.size = 0.5 * zoomFactor * minCanvasSide;\r\n\r\n        const drawFunction = getDrawFunction();\r\n        if (currentTestType === ECollisionTestType.PRIMITIVE) {\r\n            // bracket notations allows access to private fields/method while still keeping a bit of type checking\r\n            testitems.mobile.size = testitems.mobile[\"computeBiggestSizePossibleToAvoidItem\"](testitems.fixed, true).size;\r\n\r\n            const lines = computeSquare(testitems.fixed.size);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.fixed, testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        } else if (currentTestType === ECollisionTestType.POINT) {\r\n            // bracket notations allows access to private fields/method while still keeping a bit of type checking\r\n            testitems.mobile.size = testitems.mobile[\"computeBiggestSizePossibleToAvoidPoint\"]({ x: 0, y: 0 });\r\n\r\n            const lines = computeSquare(0.5);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        } else {\r\n            testitems.mobile.size = 0.2 * zoomFactor * minCanvasSide;\r\n\r\n            const domainSize: ISize = { width: 0.5 * canvasSize[0], height: 0.5 * canvasSize[1] };\r\n            const visibility = testitems.mobile.computeVisibility(domainSize);\r\n            if (visibility === EVisibility.COVERS_VIEW) {\r\n                console.log(\"covers view\");\r\n            } else if (visibility === EVisibility.OUT_OF_VIEW) {\r\n                console.log(\"out of view\");\r\n            } else {\r\n                console.log(\"visible\");\r\n            }\r\n\r\n            const lines = computeRectangle(domainSize);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nexport { mainDebugCollisions };\r\n","import { Color } from \"./color/color\";\r\nimport { ColorPicker } from \"./color/color-picker\";\r\n\r\nimport { EPrimitive, Parameters } from \"./parameters\";\r\n\r\nimport { IPattern } from \"./patterns/i-pattern\";\r\nimport { EVisibility, PatternBase } from \"./patterns/pattern-base\";\r\nimport { PatternCircle } from \"./patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"./patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"./patterns/pattern-square\";\r\nimport { PatternTriangle } from \"./patterns/pattern-triangle\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\n\r\nimport { Grid } from \"./space-grid/grid\";\r\n\r\nimport * as Statistics from \"./statistics/statistics\";\r\n\r\nimport { IPoint } from \"./utils/i-point\";\r\nimport { ISize } from \"./utils/i-size\";\r\nimport { NumberRange } from \"./utils/number-range\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nclass Engine {\r\n    private initializedItemsList: PatternBase[]; // stored in the order they must be drawn.\r\n    private uninitializedItemsList: PatternBase[]; // stored in no particular order\r\n    private lastRecyclingTime: number;\r\n\r\n    private currentPrimitive: EPrimitive;\r\n    private createItem: () => PatternBase;\r\n\r\n    private readonly grid: Grid; // used to index the items' positions for faster recycling\r\n\r\n    private readonly zoomCenter: IPoint;\r\n\r\n    private static readonly DEFAULT_BACKGROUND_ITEM: IPattern = { nestingLevel: 0, color: Color.BLACK };\r\n    private currentBackgroundItem: IPattern | null;\r\n\r\n    public constructor() {\r\n        this.initializedItemsList = [];\r\n        this.uninitializedItemsList = [];\r\n        this.lastRecyclingTime = 0;\r\n\r\n        this.grid = new Grid();\r\n        this.zoomCenter = { x: 0, y: 0 }; // canvas center\r\n        this.currentBackgroundItem = null;\r\n    }\r\n\r\n    public reset(): void {\r\n        const primitive = Parameters.primitive;\r\n\r\n        if (primitive === EPrimitive.SQUARE) {\r\n            this.createItem = () => new PatternSquare();\r\n        } else if (primitive === EPrimitive.CIRCLE) {\r\n            this.createItem = () => new PatternCircle();\r\n        } else if (primitive === EPrimitive.RECTANGLE) {\r\n            this.createItem = () => new PatternRectangle();\r\n        } else if (primitive === EPrimitive.TRIANGLE) {\r\n            this.createItem = () => new PatternTriangle();\r\n        } else {\r\n            throw new Error(`Invalid primitive \"${primitive}.`);\r\n        }\r\n\r\n        this.initializedItemsList = [];\r\n        this.uninitializedItemsList = [];\r\n        this.currentPrimitive = primitive;\r\n        this.currentBackgroundItem = null;\r\n        this.zoomCenter.x = 0;\r\n        this.zoomCenter.y = 0;\r\n    }\r\n\r\n    public setItemsCount(wantedCount: number): void {\r\n        const initializedCount = this.initializedItemsList.length;\r\n        const uninitializedCount = this.uninitializedItemsList.length;\r\n\r\n        const totalItemsCount = initializedCount + uninitializedCount;\r\n        if (wantedCount > totalItemsCount) { // items to add\r\n            const itemsToAdd = wantedCount - totalItemsCount;\r\n            for (let i = 0; i < itemsToAdd; i++) {\r\n                const newItem = this.createItem();\r\n                this.uninitializedItemsList.push(newItem);\r\n            }\r\n        } else if (wantedCount < totalItemsCount) { // items to remove\r\n            if (wantedCount > initializedCount) {\r\n                this.uninitializedItemsList.length = wantedCount - initializedCount;\r\n            } else {\r\n                this.uninitializedItemsList = [];\r\n                this.initializedItemsList.length = wantedCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(plotter: PlotterBase): boolean {\r\n        Engine.DEFAULT_BACKGROUND_ITEM.color = (Parameters.blackBackground) ? Color.BLACK : Color.WHITE;\r\n        ColorPicker.darkMode = Parameters.blackBackground;\r\n        ColorPicker.highContrastMode = Parameters.highContrast;\r\n\r\n        let everythingDrawn = plotter.isReady;\r\n        if (!Parameters.isZooming) {\r\n            const timeSinceLastRecycling = performance.now() - this.lastRecyclingTime;\r\n            const blendingOver = timeSinceLastRecycling > PatternBase.maxBlendingTime;\r\n            if (!blendingOver) {\r\n                everythingDrawn = false;\r\n            }\r\n        }\r\n\r\n        const backgroundColor = this.computeBackgroundColor();\r\n        plotter.initialize(backgroundColor);\r\n\r\n        let itemsToDraw: PatternBase[];\r\n        if (Parameters.oneCellOnly) {\r\n            itemsToDraw = this.grid.getItemsFromCell(Parameters.cellX, Parameters.cellY);\r\n        } else {\r\n            itemsToDraw = this.initializedItemsList;\r\n        }\r\n\r\n        if (this.currentPrimitive === EPrimitive.SQUARE) {\r\n            plotter.drawSquares(itemsToDraw as PatternSquare[]);\r\n        } else if (this.currentPrimitive === EPrimitive.CIRCLE) {\r\n            plotter.drawCircles(itemsToDraw as PatternCircle[]);\r\n        } else if (this.currentPrimitive === EPrimitive.RECTANGLE) {\r\n            plotter.drawRectangles(itemsToDraw as PatternRectangle[]);\r\n        } else if (this.currentPrimitive === EPrimitive.TRIANGLE) {\r\n            plotter.drawTriangles(itemsToDraw as PatternTriangle[]);\r\n        }\r\n\r\n        if (Parameters.showGrid) {\r\n            this.grid.draw(plotter);\r\n        }\r\n\r\n        plotter.finalize();\r\n\r\n        return everythingDrawn;\r\n    }\r\n\r\n    /** @returns true if the update changed something that requires a redraw */\r\n    public udpate(deltaTimeInSeconds: number, domainSize: ISize): boolean {\r\n        const mayRecycle = this.uninitializedItemsList.length > 0;\r\n        const willZoom = this.initializedItemsList.length > 0 && Parameters.isZooming;\r\n        const needToInitializeGrid = typeof this.grid === \"undefined\";\r\n        const needUpdate = mayRecycle || willZoom || needToInitializeGrid;\r\n        if (!needUpdate) {\r\n            return false;\r\n        }\r\n\r\n        let requiresRedraw = false;\r\n\r\n        Statistics.timeSpentInReindex.start();\r\n        const gridChanged = this.reindexItems(domainSize);\r\n        requiresRedraw = requiresRedraw || gridChanged;\r\n        Statistics.timeSpentInReindex.stop();\r\n\r\n        Statistics.timeSpentInRecycle.start();\r\n        const itemsRecycled = this.performRecycling(domainSize);\r\n        requiresRedraw = requiresRedraw || itemsRecycled;\r\n        if (itemsRecycled) {\r\n            this.lastRecyclingTime = performance.now();\r\n        }\r\n        Statistics.timeSpentInRecycle.stop();\r\n\r\n        Statistics.timeSpentInZoom.start();\r\n        if (Parameters.isZooming) {\r\n            const itemsMoved = (this.initializedItemsList.length > 0);\r\n            this.performZoom(deltaTimeInSeconds, domainSize);\r\n            requiresRedraw = requiresRedraw || itemsMoved;\r\n        }\r\n        Statistics.timeSpentInZoom.stop();\r\n\r\n        return requiresRedraw;\r\n    }\r\n\r\n    /**\r\n     * @param domainSize in pixels\r\n     * @param cellSize in pixels\r\n     * @returns true if a redraw is required\r\n     */\r\n    private reindexItems(domainSize: ISize): boolean {\r\n        let gridCellSize = Parameters.cellSize;\r\n        if (Parameters.adaptativeGrid) {\r\n            const targetItemsPerCell = Parameters.targetItemsPerGridCell;\r\n            const lastItemsPerCell = this.grid.itemsPerCell;\r\n            gridCellSize = this.grid.cellSize;\r\n            if (lastItemsPerCell < targetItemsPerCell) {\r\n                gridCellSize++;\r\n            } else {\r\n                gridCellSize--;\r\n            }\r\n        }\r\n\r\n        return this.grid.reset(domainSize, gridCellSize, this.initializedItemsList);\r\n    }\r\n\r\n    private performRecycling(domainSize: ISize): boolean {\r\n        let nbItemsRecycled = 0;\r\n\r\n        const allowOverlapping = Parameters.allowOverlapping;\r\n        const sizeFactor = 1 - Parameters.spacing;\r\n        const acceptedSizesForNewItems = new NumberRange(Parameters.minSize, 1000000);\r\n        const maxTries = Parameters.maxTriesPerFrame;\r\n        const backgroundItem = this.backgroundItem;\r\n\r\n        let triesLeft = maxTries;\r\n        while (this.uninitializedItemsList.length > 0 && triesLeft > 0) {\r\n            const currentItem = this.uninitializedItemsList.pop();\r\n\r\n            const resetResult = currentItem.reset(domainSize, this.grid, sizeFactor, acceptedSizesForNewItems, allowOverlapping, backgroundItem, triesLeft);\r\n            triesLeft -= resetResult.nbTries;\r\n            if (resetResult.success) {\r\n                this.initializedItemsList.push(currentItem);\r\n                this.grid.registerItem(currentItem);\r\n                nbItemsRecycled++;\r\n            } else {\r\n                this.uninitializedItemsList.push(currentItem);\r\n            }\r\n        }\r\n\r\n        const totalItemsCount = this.initializedItemsList.length + this.uninitializedItemsList.length;\r\n        const nbPendingRecycling = this.uninitializedItemsList.length;\r\n        const nbTriesUsed = maxTries - triesLeft;\r\n        Statistics.registerRecyclingStats(totalItemsCount, nbItemsRecycled, nbPendingRecycling, nbTriesUsed);\r\n        this.grid.computeStatistics();\r\n\r\n        return nbItemsRecycled > 0;\r\n    }\r\n\r\n    /**\r\n     * Performs zoom on initialized items.\r\n     * During zooming, items might go out of view. In that case:\r\n     *   - these items are added to the uninitializedItemsList\r\n     *   - these items are removed from the initializedItemsList\r\n     * Does not modify the order of the initializedItemsList.\r\n     * @returns true if something changed and requires a redraw\r\n     */\r\n    private performZoom(deltaTimeInSeconds: number, domainSize: ISize): void {\r\n        this.updateZoomCenter(domainSize);\r\n\r\n        const newInitializedArray: PatternBase[] = [];\r\n\r\n        const zoomSpeed = 1 + deltaTimeInSeconds * Parameters.zoomSpeed;\r\n        for (const item of this.initializedItemsList) {\r\n            item.zoomIn(this.zoomCenter, zoomSpeed);\r\n\r\n            let visibility: EVisibility;\r\n            if (item.size > PatternBase.MAX_SIZE) {\r\n                visibility = EVisibility.OUT_OF_VIEW;\r\n            } else {\r\n                visibility = item.computeVisibility(domainSize);\r\n            }\r\n\r\n            if (visibility === EVisibility.VISIBLE) {\r\n                newInitializedArray.push(item);\r\n            } else {\r\n                this.uninitializedItemsList.push(item); // recycle item\r\n\r\n                if (visibility === EVisibility.COVERS_VIEW) {\r\n                    this.currentBackgroundItem = {\r\n                        nestingLevel: item.nestingLevel % 100000, // make ensting levels loop\r\n                        color: item.rawColor,\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.initializedItemsList = newInitializedArray;\r\n    }\r\n\r\n    private computeBackgroundColor(): Color {\r\n        const backgroundItem = this.backgroundItem;\r\n        return ColorPicker.getDisplayColor(backgroundItem.color, backgroundItem.nestingLevel);\r\n    }\r\n\r\n    private updateZoomCenter(domainSize: ISize): void {\r\n        if (Page.Canvas.isMouseDown()) {\r\n            const mousePosition = Page.Canvas.getMousePosition(); // in [0,1]^2\r\n            this.zoomCenter.x = domainSize.width * (mousePosition[0] - 0.5);\r\n            this.zoomCenter.y = domainSize.height * (mousePosition[1] - 0.5);\r\n        }\r\n\r\n        const halfWidth = 0.5 * domainSize.width;\r\n        const halfHeight = 0.5 * domainSize.height;\r\n\r\n        if (this.zoomCenter.x < -halfWidth) {\r\n            this.zoomCenter.x = -halfWidth\r\n        } else if (this.zoomCenter.x > halfWidth) {\r\n            this.zoomCenter.x = halfWidth;\r\n        }\r\n\r\n        if (this.zoomCenter.y < -halfHeight) {\r\n            this.zoomCenter.y = -halfHeight\r\n        } else if (this.zoomCenter.y > halfHeight) {\r\n            this.zoomCenter.y = halfHeight;\r\n        }\r\n    }\r\n\r\n    private get backgroundItem(): IPattern {\r\n        return (this.currentBackgroundItem !== null) ? this.currentBackgroundItem : Engine.DEFAULT_BACKGROUND_ITEM;\r\n    }\r\n}\r\n\r\nexport { Engine };\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\((.*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean)  => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", \"./shaders/\" + filename, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","import { GLResource } from \"./gl-resource\";\r\n\r\nenum Usage {\r\n    DYNAMIC,\r\n    STATIC,\r\n}\r\n\r\nclass VBO extends GLResource {\r\n    public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n        const vert = [\r\n            minX, minY,\r\n            maxX, minY,\r\n            minX, maxY,\r\n            maxX, maxY,\r\n        ];\r\n\r\n        return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT, true);\r\n    }\r\n\r\n    private id: WebGLBuffer;\r\n    private size: number;\r\n    private type: GLenum;\r\n    private normalize: GLboolean;\r\n    private stride: GLsizei;\r\n    private offset: GLintptr;\r\n    private usage: Usage;\r\n\r\n    constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum, staticUsage: boolean = true) {\r\n        super(gl);\r\n\r\n        this.id = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (staticUsage) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.size = size;\r\n        this.type = type;\r\n        this.normalize = false;\r\n        this.stride = 0;\r\n        this.offset = 0;\r\n        this.usage = (staticUsage) ? Usage.STATIC : Usage.DYNAMIC;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this.gl().deleteBuffer(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public bind(location: GLuint): void {\r\n        const gl = super.gl();\r\n        gl.enableVertexAttribArray(location);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n    }\r\n\r\n    public setData(array: any): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (this.usage === Usage.STATIC) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n}\r\n\r\nexport { VBO };\r\n","import { ColorPicker } from \"./color/color-picker\";\r\n\r\nimport { mainDebugCollisions } from \"./debug-collisions\";\r\n\r\nimport { Engine } from \"./engine\";\r\n\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterCanvasWebGL } from \"./plotter/plotter-canvas-webgl\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Statistics from \"./statistics/statistics\";\r\n\r\nimport * as Helper from \"./utils/helper\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction main(): void {\r\n    const canvasPlotter = Parameters.isWebGLVersion ? new PlotterCanvasWebGL() : new PlotterCanvas2D();\r\n\r\n    const engine = new Engine();\r\n\r\n    let needToRedraw = true;\r\n\r\n    Parameters.addRedrawObserver(() => needToRedraw = true);\r\n    Parameters.addClearObserver(() => {\r\n        engine.reset();\r\n        needToRedraw = true;\r\n    });\r\n\r\n    Parameters.addDownloadObserver(() => {\r\n        const svgPlotter = new PlotterSVG(canvasPlotter.size);\r\n        engine.draw(svgPlotter);\r\n\r\n        const fileName = \"packing.svg\";\r\n        const svgString = svgPlotter.export();\r\n        Helper.downloadTextFile(fileName, svgString);\r\n    });\r\n\r\n    let lastRunTime = 0;\r\n    Statistics.initialize();\r\n    engine.reset();\r\n    function mainLoop(time: number): void {\r\n        Statistics.timeSpentInMainLoop.start();\r\n\r\n        const deltaTimeInSeconds = 0.001 * (time - lastRunTime);\r\n        lastRunTime = time;\r\n\r\n        const wantedItemsCount = 1000 * Parameters.quantity;\r\n        engine.setItemsCount(wantedItemsCount);\r\n\r\n        ColorPicker.setPalette(Parameters.paletteId);\r\n\r\n        Statistics.timeSpentInUpdate.start();\r\n        const updateChangedSomething = engine.udpate(deltaTimeInSeconds, canvasPlotter.size);\r\n        needToRedraw = needToRedraw || updateChangedSomething;\r\n        Statistics.timeSpentInUpdate.stop();\r\n\r\n        if (needToRedraw) {\r\n            Statistics.timeSpentInDraw.start();\r\n            const successfulDraw = engine.draw(canvasPlotter);\r\n            Statistics.timeSpentInDraw.stop();\r\n\r\n            needToRedraw = !successfulDraw;\r\n        }\r\n\r\n        Statistics.timeSpentInMainLoop.stop();\r\n        Statistics.registerFrame();\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nif (Parameters.isInCollisionsDebug) {\r\n    mainDebugCollisions();\r\n} else {\r\n    main();\r\n}\r\n","import \"./page-interface-generated\";\r\nimport * as Helpers from \"./utils/helper\";\r\n\r\n\r\nconst controlId = {\r\n    PRIMITIVE: \"primitive-tab-id\",\r\n    RESET: \"reset-button-id\",\r\n    SPACING: \"spacing-range-id\",\r\n    MIN_SIZE: \"min-size-range-id\",\r\n    ALLOW_OVERLAPPING: \"allow-overlapping-checkbox-id\",\r\n    QUANTITY: \"quantity-range-id\",\r\n    ZOOM_SPEED: \"zoom-speed-range-id\",\r\n    BACKGROUND: \"background-tab-id\",\r\n    PALETTE: \"palette-picker-id\",\r\n    BLENDING: \"blending-checkbox-id\",\r\n    HIGH_CONTRAST: \"high-contrast-checkbox-id\",\r\n    INDICATORS: \"indicators-checkbox-id\",\r\n\r\n    // DEBUG\r\n    MAX_TRIES_PER_FRAME: \"max-tries-per-frame-range-id\",\r\n    INSTANCING: \"instancing-checkbox-id\",\r\n    ADAPTATIVE_GRID: \"adaptative-grid-checkbox-id\",\r\n    TARGET_ITEMS_PER_GRIDCELL: \"target-items-per-gridcell-checkbox-id\",\r\n    CELL_SIZE: \"cell-size-range-id\",\r\n    ONE_CELL_ONLY: \"one-cell-only-checkbox-id\",\r\n    SHOW_GRID: \"show-grid-checkbox-id\",\r\n    CELL_X: \"cell-x-range-id\",\r\n    CELL_Y: \"cell-y-range-id\",\r\n    COLLISION_TEST_TYPE: \"collision-test-type-tab-id\",\r\n\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ALLOW_OVERLAPPING, triggerRedraw);\r\nPage.Tabs.addObserver(controlId.BACKGROUND, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.HIGH_CONTRAST, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ONE_CELL_ONLY, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.SHOW_GRID, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INSTANCING, triggerRedraw);\r\nPage.Range.addObserver(controlId.QUANTITY, triggerRedraw);\r\nPage.Range.addObserver(controlId.CELL_X, triggerRedraw);\r\nPage.Range.addObserver(controlId.CELL_Y, triggerRedraw);\r\n\r\ntype ClearObserver = () => unknown;\r\nconst clearObservers: ClearObserver[] = [];\r\nfunction triggerClear(): void {\r\n    for (const observer of clearObservers) {\r\n        observer();\r\n    }\r\n}\r\nPage.Button.addObserver(controlId.RESET, triggerClear);\r\nPage.Tabs.addObserver(controlId.PRIMITIVE, triggerClear);\r\nPage.Range.addObserver(controlId.SPACING, () => {\r\n    if (!Parameters.isZooming) {\r\n        triggerClear();\r\n    }\r\n});\r\nPage.Range.addObserver(controlId.MIN_SIZE, () => {\r\n    if (!Parameters.isZooming) {\r\n        triggerClear();\r\n    }\r\n});\r\n\r\nPage.Picker.addObserver(controlId.PALETTE, () => {\r\n    if (!Parameters.isZooming) {\r\n        triggerClear();\r\n    }\r\n})\r\n\r\nenum EPrimitive {\r\n    SQUARE = \"square\",\r\n    CIRCLE = \"circle\",\r\n    RECTANGLE = \"rectangle\",\r\n    TRIANGLE = \"triangle\",\r\n}\r\n\r\nenum ECollisionTestType {\r\n    PRIMITIVE = \"primitive\",\r\n    POINT = \"point\",\r\n    VISIBILITY = \"visbility\",\r\n}\r\n\r\nconst isInDebug = Helpers.getQueryStringValue(\"debug\") === \"1\";\r\nconst isInCollisionsDebug = Helpers.getQueryStringValue(\"debug-collisions\") === \"1\";\r\nPage.Sections.setVisibility(\"display-section\", !isInCollisionsDebug);\r\nPage.Sections.setVisibility(\"debug-section\", isInDebug && !isInCollisionsDebug);\r\nPage.Sections.setVisibility(\"debug-collisions-section\", isInDebug && isInCollisionsDebug);\r\nPage.Canvas.setIndicatorVisibility(\"main-loop-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"draw-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-reindex-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-recycle-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-zoom-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-reclycled-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-pending-recycling-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-recycling-tries-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-size\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-cell-size\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-items-per-cell\", isInDebug);\r\n\r\nif (isInDebug) {\r\n    Page.Checkbox.setChecked(controlId.INDICATORS, true);\r\n} else {\r\n    Page.Checkbox.setChecked(controlId.ONE_CELL_ONLY, false);\r\n    Page.Checkbox.setChecked(controlId.SHOW_GRID, false);\r\n}\r\n\r\nconst isWebGLVersion = Helpers.getQueryStringValue(\"webgl\") !== \"0\";\r\nif (!isWebGLVersion) {\r\n    Page.Checkbox.setChecked(controlId.BLENDING, false);\r\n    Page.Controls.setVisibility(controlId.BLENDING, false);\r\n    Page.Controls.setVisibility(controlId.INSTANCING, false);\r\n}\r\n\r\nfunction updateIndicatorsVisibility(): void {\r\n    const visible = !isInCollisionsDebug && Page.Checkbox.isChecked(controlId.INDICATORS);\r\n    Page.Canvas.setIndicatorsVisibility(visible);\r\n}\r\nPage.Checkbox.addObserver(controlId.INDICATORS, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nfunction updateGridControlsVisibility(): void {\r\n    const adaptative = Page.Checkbox.isChecked(controlId.ADAPTATIVE_GRID);\r\n    Page.Controls.setVisibility(controlId.TARGET_ITEMS_PER_GRIDCELL, adaptative);\r\n    Page.Controls.setVisibility(controlId.CELL_SIZE, !adaptative);\r\n}\r\nPage.Checkbox.addObserver(controlId.ADAPTATIVE_GRID, updateGridControlsVisibility);\r\nupdateGridControlsVisibility();\r\n\r\nPage.Button.addObserver(\"debug-collisions-button-id\", () => {\r\n    window.location.href = window.location.href + \"&debug-collisions=1\";\r\n});\r\n\r\nabstract class Parameters {\r\n    public static get quantity(): number {\r\n        return Page.Range.getValue(controlId.QUANTITY);\r\n    }\r\n\r\n    public static get spacing(): number {\r\n        return Page.Range.getValue(controlId.SPACING);\r\n    }\r\n\r\n    public static get minSize(): number {\r\n        return Page.Range.getValue(controlId.MIN_SIZE);\r\n    }\r\n\r\n    public static get allowOverlapping(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ALLOW_OVERLAPPING);\r\n    }\r\n\r\n    public static get primitive(): EPrimitive {\r\n        return Page.Tabs.getValues(controlId.PRIMITIVE)[0] as EPrimitive;\r\n    }\r\n\r\n    public static get zoomSpeed(): number {\r\n        return Page.Range.getValue(controlId.ZOOM_SPEED);\r\n    }\r\n    public static get isZooming(): boolean {\r\n        return Math.abs(Parameters.zoomSpeed) > .001; // avoid float precision issues\r\n    }\r\n\r\n    public static get blackBackground(): boolean {\r\n        return Page.Tabs.getValues(controlId.BACKGROUND)[0] === \"dark\";\r\n    }\r\n\r\n    public static get blending(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.BLENDING);\r\n    }\r\n\r\n    public static get paletteId(): number {\r\n        return +Page.Picker.getValue(controlId.PALETTE);\r\n    }\r\n\r\n    public static get highContrast(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.HIGH_CONTRAST);\r\n    }\r\n\r\n    public static get isInDebug(): boolean {\r\n        return isInDebug;\r\n    }\r\n    public static get isInCollisionsDebug(): boolean {\r\n        return isInCollisionsDebug;\r\n    }\r\n    public static get isWebGLVersion(): boolean {\r\n        return isWebGLVersion;\r\n    }\r\n\r\n    /* === DEBUG SECTION === */\r\n\r\n    public static get maxTriesPerFrame(): number {\r\n        return 100 * Page.Range.getValue(controlId.MAX_TRIES_PER_FRAME);\r\n    }\r\n    public static get adaptativeGrid(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ADAPTATIVE_GRID);\r\n    }\r\n    public static get targetItemsPerGridCell(): number {\r\n        return Page.Range.getValue(controlId.TARGET_ITEMS_PER_GRIDCELL);\r\n    }\r\n    public static get cellSize(): number {\r\n        return Page.Range.getValue(controlId.CELL_SIZE);\r\n    }\r\n    public static get oneCellOnly(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ONE_CELL_ONLY);\r\n    }\r\n    public static get showGrid(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_GRID);\r\n    }\r\n    public static get cellX(): number {\r\n        return Page.Range.getValue(controlId.CELL_X);\r\n    }\r\n    public static get cellY(): number {\r\n        return Page.Range.getValue(controlId.CELL_Y);\r\n    }\r\n\r\n    public static get useInstancing(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INSTANCING);\r\n    }\r\n    public static disallowInstancing(): void {\r\n        Page.Checkbox.setChecked(controlId.INSTANCING, false);\r\n        Page.Controls.setVisibility(controlId.INSTANCING, false);\r\n    }\r\n\r\n    public static get currentCollisionType(): ECollisionTestType {\r\n        return Page.Tabs.getValues(controlId.COLLISION_TEST_TYPE)[0] as ECollisionTestType;\r\n    }\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static addClearObserver(callback: ClearObserver): void {\r\n        clearObservers.push(callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters, EPrimitive, ECollisionTestType };\r\n","import { Color } from \"../color/color\";\r\nimport { ColorPicker } from \"../color/color-picker\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\nimport { Grid } from \"../space-grid/grid\";\r\n\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\nimport { NumberRange } from \"../utils/number-range\";\r\n\r\nimport { IPattern } from \"./i-pattern\";\r\n\r\nconst CANVAS_CENTER: IPoint = { x: 0, y: 0 };\r\n\r\nconst MAX_TEST_ID = 999999999999; // lower (for extra safety) than Number.MAX_SAFE_INTEGER (which is not supported by IE11)\r\nlet globalLastTestId = 1;\r\n\r\nfunction generateTestId(): number {\r\n    globalLastTestId = (globalLastTestId + 1) % MAX_TEST_ID;\r\n    return globalLastTestId;\r\n}\r\n\r\ninterface IPatternResetResult {\r\n    success: boolean;\r\n    nbTries: number;\r\n}\r\n\r\ninterface ISizeComputationResult {\r\n    size: number;\r\n    isInside: boolean;\r\n}\r\n\r\nenum EVisibility {\r\n    VISIBLE = 0,\r\n    OUT_OF_VIEW = 1,\r\n    COVERS_VIEW = 2,\r\n}\r\n\r\nabstract class PatternBase {\r\n    /* When an item is too big, it can lead to visual glitches due to float precision issue on GPU.\r\n     *  To avoid this, remove items that are too big. */\r\n    public static readonly MAX_SIZE: number = 1000000;\r\n\r\n    private static readonly MAX_SIZE_LOWER: number = 0.75 * PatternBase.MAX_SIZE;\r\n    private static readonly MAX_SIZE_GAP: number = PatternBase.MAX_SIZE - PatternBase.MAX_SIZE_LOWER;\r\n\r\n    public static get maxBlendingTime(): number {\r\n        if (Parameters.blending) {\r\n            return 500 / (1 + Parameters.zoomSpeed);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public readonly center: IPoint;\r\n    public size: number;\r\n    public nestingLevel: number;\r\n    public rawColor: Color;\r\n\r\n    private parentItem: PatternBase | null; // used only momentarily during resetting\r\n    private lastTestId: number;\r\n    private initializationTime: number;\r\n\r\n    protected constructor() {\r\n        this.center = { x: 0, y: 0 };\r\n        this.size = 0;\r\n        this.nestingLevel = 0;\r\n        this.rawColor = Color.random();\r\n        this.lastTestId = 0;\r\n    }\r\n\r\n    public get color(): Color {\r\n        return ColorPicker.getDisplayColor(this.rawColor, this.nestingLevel);\r\n    }\r\n\r\n    public zoomIn(zoomCenter: IPoint, zoomFactor: number): void {\r\n        this.center.x = (this.center.x - zoomCenter.x) * zoomFactor + zoomCenter.x;\r\n        this.center.y = (this.center.y - zoomCenter.y) * zoomFactor + zoomCenter.y;\r\n        this.size *= zoomFactor;\r\n    }\r\n\r\n    /** @returns the number of tries (regardless of the success of the reset) */\r\n    public reset(domainSize: ISize, grid: Grid, sizeFactor: number, acceptedSizes: NumberRange, allowOverlapping: boolean, backgroundPattern: IPattern, maxTries: number): IPatternResetResult {\r\n        const result: IPatternResetResult = {\r\n            nbTries: 0,\r\n            success: false,\r\n        };\r\n\r\n        while (result.nbTries < maxTries && !result.success) {\r\n            this.randomizePosition(domainSize);\r\n            this.parentItem = null;\r\n\r\n            const maxSize = sizeFactor * this.computeBiggestSizePossible(grid, allowOverlapping);\r\n            if (acceptedSizes.isInRange(maxSize)) {\r\n                this.size = 2 * Math.floor(0.5 * maxSize); // need to be even to avoid aliasing\r\n                this.initializationTime = performance.now();\r\n                result.success = true;\r\n\r\n                const parentNestingLevel: number = (this.parentItem !== null) ? this.parentItem.nestingLevel : backgroundPattern.nestingLevel;\r\n                this.nestingLevel = parentNestingLevel + 1;\r\n\r\n                if (ColorPicker.usePalette) {\r\n                    const parentColor: Color = (this.parentItem !== null) ? this.parentItem.rawColor : backgroundPattern.color;\r\n                    this.rawColor = ColorPicker.getDifferentColorFromPalette(parentColor);\r\n                }\r\n            }\r\n\r\n            result.nbTries++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeOpacity(time: number, blendTime: number): number {\r\n        if (this.size > PatternBase.MAX_SIZE_LOWER) {\r\n            const r = (this.size - PatternBase.MAX_SIZE_LOWER) / PatternBase.MAX_SIZE_GAP;\r\n            return (r > 1) ? 0 : 1 - r;\r\n        }\r\n\r\n        const lifetime = time - this.initializationTime;\r\n        if (lifetime > blendTime) {\r\n            return 1;\r\n        }\r\n        return lifetime / blendTime;\r\n    }\r\n\r\n    protected abstract computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number;\r\n\r\n    protected abstract computeBiggestSizePossibleToAvoidItem(itemsToAvoid: PatternBase, allowOverlapping: boolean): ISizeComputationResult;\r\n\r\n    public abstract computeVisibility(domainSize: ISize): EVisibility;\r\n\r\n    private computeBiggestSizePossible(grid: Grid, allowOverlapping: boolean): number {\r\n        const currentTestId = generateTestId();\r\n\r\n        const biggestSizeToAvoidCenter = this.computeBiggestSizePossibleToAvoidPoint(CANVAS_CENTER);\r\n        let rawMaxSize = biggestSizeToAvoidCenter;\r\n\r\n        // first, test only existing items that are in the exact same grid cell as us\r\n        const maxDistanceDetectableByExactCell = grid.getDistanceToClosestBorder(this.center);\r\n\r\n        const exactCellId = grid.getCellId(this.center);\r\n        const existingItemsFromExactCell = grid.getItemsFromCell(exactCellId.x, exactCellId.y);\r\n        const biggestSizeToAvoidClosestItems = this.computeBiggestSizePossibleToAvoidItems(existingItemsFromExactCell, allowOverlapping, currentTestId);\r\n        rawMaxSize = Math.min(rawMaxSize, biggestSizeToAvoidClosestItems);\r\n\r\n        // the closest items were maybe not enough, test items that are a bit further\r\n        if (rawMaxSize >= maxDistanceDetectableByExactCell) {\r\n            const topLeftPoint: IPoint = { x: this.center.x - 0.5 * rawMaxSize, y: this.center.y - 0.5 * rawMaxSize };\r\n            const bottomRightPoint: IPoint = { x: this.center.x + 0.5 * rawMaxSize, y: this.center.y + 0.5 * rawMaxSize };\r\n            const minCellId = grid.getCellId(topLeftPoint);\r\n            const maxCellId = grid.getCellId(bottomRightPoint);\r\n\r\n            const additionalItemsToTest = grid.getItemsFromCellsGroup(minCellId.x, minCellId.y, maxCellId.x, maxCellId.y);\r\n            const biggestSizeToAvoidFurtherItems = this.computeBiggestSizePossibleToAvoidItems(additionalItemsToTest, allowOverlapping, currentTestId);\r\n            rawMaxSize = Math.min(rawMaxSize, biggestSizeToAvoidFurtherItems);\r\n        }\r\n\r\n        return rawMaxSize;\r\n    }\r\n\r\n    private computeBiggestSizePossibleToAvoidItems(itemsToAvoid: PatternBase[], allowOverlapping: boolean, currentTestId: number): number {\r\n        let maxSize = 100000;\r\n\r\n        for (const item of itemsToAvoid) {\r\n            if (item !== this) {\r\n                const testedAlready = (item.lastTestId === currentTestId);\r\n                if (!testedAlready) {\r\n                    const result = this.computeBiggestSizePossibleToAvoidItem(item, allowOverlapping);\r\n                    if (result.size < maxSize) {\r\n                        maxSize = result.size;\r\n\r\n                        if (result.isInside) {\r\n                            this.parentItem = item;\r\n                        }\r\n                    }\r\n                    item.lastTestId = currentTestId;\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxSize;\r\n    }\r\n\r\n    private randomizePosition(domainSize: ISize): void {\r\n        this.center.x = Math.round(domainSize.width * (Math.random() - 0.5));\r\n        this.center.y = Math.round(domainSize.height * (Math.random() - 0.5));\r\n    }\r\n}\r\n\r\nexport { PatternBase, EVisibility, ISizeComputationResult };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nclass PatternCircle extends PatternBase {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n        return 2 * Math.sqrt(toPointX * toPointX + toPointY * toPointY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternCircle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const toCenterX = this.center.x - itemToAvoid.center.x;\r\n        const toCenterY = this.center.y - itemToAvoid.center.y;\r\n\r\n        const distance = Math.sqrt(toCenterX * toCenterX + toCenterY * toCenterY);\r\n\r\n        if (distance <= itemToAvoid.radius) {\r\n            if (allowOverlapping) {\r\n                result.size = 2 * (itemToAvoid.radius - distance);\r\n                result.isInside = true;\r\n            }\r\n        } else {\r\n            result.size = 2 * (distance - itemToAvoid.radius);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const dX = absX + halfDomainWidth;\r\n        const dY = absY + halfDomainHeight;\r\n\r\n        const radius = this.radius;\r\n        if (radius * radius > dX * dX + dY * dY) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - radius < halfDomainWidth && absY - radius < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    public get radius(): number {\r\n        return 0.5 * this.size;\r\n    }\r\n}\r\n\r\nexport { PatternCircle };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nconst ASPECT_RATIO_VARIATION = 0.5; // must be in [0,1]\r\n\r\nclass PatternRectangle extends PatternBase {\r\n    private readonly baseWidth: number; // in [0,1]\r\n    private readonly baseHeight: number; // in [0,1]\r\n    public readonly aspectRatio: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.aspectRatio = 1 + ASPECT_RATIO_VARIATION * (2 * Math.random() - 1);\r\n        if (this.aspectRatio >= 1) {\r\n            this.baseWidth = 1;\r\n            this.baseHeight = 1 / this.aspectRatio;\r\n        } else {\r\n            this.baseWidth = this.aspectRatio;\r\n            this.baseHeight = 1;\r\n        }\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n\r\n        const maxSizeX = Math.abs(toPointX) / this.baseWidth;\r\n        const maxSizeY = Math.abs(toPointY) / this.baseHeight;\r\n        return 2 * Math.max(maxSizeX, maxSizeY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternRectangle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const deltaX = Math.abs(this.center.x - itemToAvoid.center.x);\r\n        const deltaY = Math.abs(this.center.y - itemToAvoid.center.y);\r\n\r\n        const halfObstacleWidth = 0.5 * itemToAvoid.width;\r\n        const halfObstacleHeight = 0.5 * itemToAvoid.height;\r\n\r\n        if (deltaX < halfObstacleWidth) {\r\n            if (deltaY < halfObstacleHeight) {\r\n                if (allowOverlapping) {\r\n                    result.size = 2 * Math.min((halfObstacleWidth - deltaX) / this.baseWidth, (halfObstacleHeight - deltaY) / this.baseHeight);\r\n                    result.isInside = true;\r\n                }\r\n            } else {\r\n                result.size = 2 * (deltaY - halfObstacleHeight) / this.baseHeight;\r\n            }\r\n        } else {\r\n            if (deltaY < halfObstacleHeight) {\r\n                result.size = 2 * (deltaX - halfObstacleWidth) / this.baseWidth;\r\n            } else {\r\n                result.size = 2 * Math.max((deltaX - halfObstacleWidth) / this.baseWidth, (deltaY - halfObstacleHeight) / this.baseHeight);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfWidth = 0.5 * this.size * this.baseWidth;\r\n        const halfHeight = 0.5 * this.size * this.baseHeight;\r\n\r\n        if (absX + halfDomainWidth < halfWidth && absY + halfDomainHeight < halfHeight) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfWidth < halfDomainWidth && absY - halfHeight < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.size * this.baseWidth;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.size * this.baseHeight;\r\n    }\r\n}\r\n\r\nexport { PatternRectangle };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nclass PatternSquare extends PatternBase {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n\r\n        const maxSizeX = Math.abs(toPointX);\r\n        const maxSizeY = Math.abs(toPointY);\r\n        return 2 * Math.max(maxSizeX, maxSizeY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternSquare, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const deltaX = Math.abs(this.center.x - itemToAvoid.center.x);\r\n        const deltaY = Math.abs(this.center.y - itemToAvoid.center.y);\r\n        const halfSideLength = 0.5 * itemToAvoid.sideLength;\r\n\r\n        if (deltaX < halfSideLength) {\r\n            if (deltaY < halfSideLength) {\r\n                if (allowOverlapping) {\r\n                    result.size = 2 * Math.min(halfSideLength - deltaX, halfSideLength - deltaY);\r\n                    result.isInside = true;\r\n                }\r\n            } else {\r\n                result.size = 2 * (deltaY - halfSideLength);\r\n            }\r\n        } else {\r\n            if (deltaY < halfSideLength) {\r\n                result.size = 2 * (deltaX - halfSideLength);\r\n            } else {\r\n                result.size = 2 * Math.max(deltaX - halfSideLength, deltaY - halfSideLength);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfSize = 0.5 * this.size;\r\n\r\n        if (absX + halfDomainWidth < halfSize && absY + halfDomainHeight < halfSize) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfSize < halfDomainWidth && absY - halfSize < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    private get sideLength(): number {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport { PatternSquare };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nfunction rotatePoint(point: IPoint, cosAngle: number, sinAngle: number): IPoint {\r\n    return {\r\n        x: point.x * cosAngle - point.y * sinAngle,\r\n        y: point.x * sinAngle + point.y * cosAngle,\r\n    };\r\n}\r\n\r\n/** Computes intersection between a segment and a semiline, both defined with parametric equations.\r\n * The first segment is defined with \"from1 + t1 * delta1\" for 0 <= t1 <= 2\r\n * The semi line is defined with \"0 + t2 * delta2\" for 0 <= t2\r\n * @returns if there is an intersection, t2 >= 0\r\n *          if there is no intersection, returns a negative value\r\n */\r\nfunction computeSegmentsIntersection(from1: IPoint, delta1: IPoint, delta2: IPoint): number {\r\n    const denom = delta2.y * delta1.x - delta1.y * delta2.x;\r\n    if (denom !== 0) {\r\n        const invDenom = 1 / denom;\r\n\r\n        const t1 = (delta2.x * from1.y - delta2.y * from1.x) * invDenom;\r\n        if (0 <= t1 && t1 <= 1) {\r\n            const t2 = (delta1.x * from1.y - delta1.y * from1.x) * invDenom;\r\n            return t2;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nconst MAX_NUMBER = 100000000;\r\nfunction minPositive(...args: number[]): number {\r\n    let min = MAX_NUMBER;\r\n    for (const arg of args) {\r\n        if (arg >= 0 && arg < min) {\r\n            min = arg;\r\n        }\r\n    }\r\n    return (min === MAX_NUMBER) ? -1 : min;\r\n}\r\n\r\nclass PatternTriangle extends PatternBase {\r\n    public readonly angle: number;\r\n\r\n    public static readonly baseP1: IPoint = { x: 0, y: -0.5 };\r\n    public static readonly baseP2: IPoint = { x: 0.5 * Math.cos(Math.PI * 7 / 6), y: -0.5 * Math.sin(Math.PI * 7 / 6) };\r\n    public static readonly baseP3: IPoint = { x: -0.5 * Math.cos(Math.PI * 7 / 6), y: -0.5 * Math.sin(Math.PI * 7 / 6) };\r\n\r\n    // rotated, with a size=1\r\n    public readonly P1: IPoint;\r\n    public readonly P2: IPoint;\r\n    public readonly P3: IPoint;\r\n\r\n    // with a size=1\r\n    public readonly P1_TO_P2: IPoint;\r\n    public readonly P2_TO_P3: IPoint;\r\n    public readonly P3_TO_P1: IPoint;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.angle = 2 * Math.PI * Math.random();\r\n\r\n        const cosAngle = Math.cos(this.angle);\r\n        const sinAngle = Math.sin(this.angle);\r\n        this.P1 = rotatePoint(PatternTriangle.baseP1, cosAngle, sinAngle);\r\n        this.P2 = rotatePoint(PatternTriangle.baseP2, cosAngle, sinAngle);\r\n        this.P3 = rotatePoint(PatternTriangle.baseP3, cosAngle, sinAngle);\r\n\r\n        this.P1_TO_P2 = { x: this.P2.x - this.P1.x, y: this.P2.y - this.P1.y };\r\n        this.P2_TO_P3 = { x: this.P3.x - this.P2.x, y: this.P3.y - this.P2.y };\r\n        this.P3_TO_P1 = { x: this.P1.x - this.P3.x, y: this.P1.y - this.P3.y };\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        if (pointToAvoid.x === this.center.x && pointToAvoid.y === this.center.y) {\r\n            return 0;\r\n        }\r\n\r\n        const pointToAvoidLocal = { x: pointToAvoid.x - this.center.x, y: pointToAvoid.y - this.center.y };\r\n\r\n        let intersection = computeSegmentsIntersection(this.P1, this.P1_TO_P2, pointToAvoidLocal);\r\n        if (intersection < 0) {\r\n            intersection = computeSegmentsIntersection(this.P2, this.P2_TO_P3, pointToAvoidLocal);\r\n            if (intersection < 0) {\r\n                intersection = computeSegmentsIntersection(this.P3, this.P3_TO_P1, pointToAvoidLocal);\r\n            }\r\n        }\r\n\r\n        if (intersection > 0) {\r\n            return 1 / intersection;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternTriangle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        if (itemToAvoid.isPointInside(this.center.x, this.center.y)) {\r\n            if (allowOverlapping) {\r\n                result.isInside = true;\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        const localOtherP1: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P1.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P1.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const localOtherP2: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P2.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P2.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const localOtherP3: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P3.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P3.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const scaledOtherP1toP2: IPoint = {\r\n            x: itemToAvoid.P1_TO_P2.x * itemToAvoid.size,\r\n            y: itemToAvoid.P1_TO_P2.y * itemToAvoid.size,\r\n        };\r\n\r\n        const scaledOtherP2toP3: IPoint = {\r\n            x: itemToAvoid.P2_TO_P3.x * itemToAvoid.size,\r\n            y: itemToAvoid.P2_TO_P3.y * itemToAvoid.size,\r\n        };\r\n\r\n        const scaledOtherP3toP1: IPoint = {\r\n            x: itemToAvoid.P3_TO_P1.x * itemToAvoid.size,\r\n            y: itemToAvoid.P3_TO_P1.y * itemToAvoid.size,\r\n        };\r\n\r\n        // Check if a vertice of this may intersect a side of the other\r\n        let smallerTforMyVertices: number;\r\n        {\r\n            const T1_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P1);\r\n            const T1_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P1);\r\n            const T1_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P1);\r\n\r\n            const T2_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P2);\r\n            const T2_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P2);\r\n            const T2_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P2);\r\n\r\n            const T3_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P3);\r\n            const T3_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P3);\r\n            const T3_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P3);\r\n\r\n            smallerTforMyVertices = minPositive(T1_1, T1_2, T1_3, T2_1, T2_2, T2_3, T3_1, T3_2, T3_3);\r\n        }\r\n\r\n        let smallerTforMySides: number;\r\n        {\r\n            const T1_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP1);\r\n            const T1_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP1);\r\n            const T1_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP1);\r\n\r\n            const T2_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP2);\r\n            const T2_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP2);\r\n            const T2_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP2);\r\n\r\n            const T3_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP3);\r\n            const T3_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP3);\r\n            const T3_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP3);\r\n\r\n            const max = Math.max(T1_1, T1_2, T1_3, T2_1, T2_2, T2_3, T3_1, T3_2, T3_3);\r\n            if (max !== 0) {\r\n                smallerTforMySides = 1 / max;\r\n            } else {\r\n                smallerTforMySides = -1;\r\n            }\r\n        }\r\n\r\n        result.size = minPositive(smallerTforMyVertices, smallerTforMySides);\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfSize = 0.5 * this.size;\r\n\r\n        if (this.isPointInside(-halfDomainWidth, -halfDomainHeight) && this.isPointInside(halfDomainWidth, -halfDomainHeight) && this.isPointInside(-halfDomainWidth, halfDomainHeight) && this.isPointInside(halfDomainWidth, halfDomainHeight)) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfSize < halfDomainWidth && absY - halfSize < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    private isPointInside(x: number, y: number): boolean {\r\n        x = (x - this.center.x) / this.size;\r\n        y = (y - this.center.y) / this.size;\r\n\r\n        const d1 = this.P1_TO_P2.x * (y - this.P2.y) - (x - this.P2.x) * this.P1_TO_P2.y;\r\n        const d2 = this.P2_TO_P3.x * (y - this.P3.y) - (x - this.P3.x) * this.P2_TO_P3.y;\r\n        const d3 = this.P3_TO_P1.x * (y - this.P1.y) - (x - this.P1.x) * this.P3_TO_P1.y;\r\n\r\n        return (d1 <= 0 && d2 <= 0 && d3 <= 0) || (d1 > 0 && d2 > 0 && d3 > 0);\r\n    }\r\n}\r\n\r\nexport { PatternTriangle };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract get isReady(): boolean;\r\n\r\n    public abstract initialize(backgroundColor: Color): void;\r\n    public abstract finalize(): void;\r\n\r\n    public abstract drawSquares(squares: PatternSquare[]): void;\r\n    public abstract drawCircles(circles: PatternCircle[]): void;\r\n    public abstract drawRectangles(rectangles: PatternRectangle[]): void;\r\n    public abstract drawTriangles(triangles: PatternTriangle[]): void;\r\n\r\n    /* Lines have  a 1 pixel thickness */\r\n    public abstract drawLines(lines: ILine[], color: Color): void;\r\n}\r\n\r\nexport { PlotterBase };\r\n","import { Color } from \"../color/color\";\r\nimport \"../page-interface-generated\";\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { PlotterCanvasBase } from \"./plotter-canvas-base\";\r\n\r\n\r\n\r\n\r\n\r\nclass PlotterCanvas2D extends PlotterCanvasBase {\r\n    private readonly context: CanvasRenderingContext2D;\r\n    public constructor() {\r\n        super();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected clearCanvas(color: Color): void {\r\n        this.context.fillStyle = color.toString();\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const square of squares) {\r\n            const centerX = square.center.x + halfWidth;\r\n            const centerY = square.center.y + halfHeight;\r\n            const halfSize = 0.5 * square.size;\r\n\r\n            this.context.fillStyle = square.color.toString();\r\n            this.context.fillRect(centerX - halfSize, centerY - halfSize, square.size, square.size);\r\n        }\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        const TWO_PI = 2 * Math.PI;\r\n\r\n        for (const circle of circles) {\r\n            const centerX = circle.center.x + halfWidth;\r\n            const centerY = circle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = circle.color.toString();\r\n            this.context.beginPath();\r\n            this.context.arc(centerX, centerY, circle.radius, 0, TWO_PI);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const rectangle of rectangles) {\r\n            const centerX = rectangle.center.x + halfWidth;\r\n            const centerY = rectangle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = rectangle.color.toString();\r\n            this.context.fillRect(centerX - 0.5 * rectangle.width, centerY - 0.5 * rectangle.height, rectangle.width, rectangle.height);\r\n        }\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const triangle of triangles) {\r\n            const centerX = triangle.center.x + halfWidth;\r\n            const centerY = triangle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = triangle.color.toString();\r\n            this.context.beginPath();\r\n            this.context.moveTo(centerX + triangle.P1.x * triangle.size, centerY + triangle.P1.y * triangle.size);\r\n            this.context.lineTo(centerX + triangle.P2.x * triangle.size, centerY + triangle.P2.y * triangle.size);\r\n            this.context.lineTo(centerX + triangle.P3.x * triangle.size, centerY + triangle.P3.y * triangle.size);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        this.context.fillStyle = \"none\";\r\n        this.context.strokeStyle = color.toString();\r\n        this.context.lineWidth = 1;\r\n        this.context.beginPath();\r\n\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        for (const line of lines) {\r\n            this.context.moveTo(line.from.x + halfWidth, line.from.y + halfHeight);\r\n            this.context.lineTo(line.to.x + halfWidth, line.to.y + halfHeight);\r\n        }\r\n\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n        this.context.strokeStyle = \"none\";\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { PlotterBase } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nabstract class PlotterCanvasBase extends PlotterBase {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    protected _size: ISize;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n        this.resizeCanvas();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        this.resizeCanvas();\r\n        this.clearCanvas(backgroundColor);\r\n    }\r\n\r\n    protected abstract clearCanvas(color: Color): void;\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n\r\n        this._size = {\r\n            width: this.canvas.width,\r\n            height: this.canvas.height,\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvasBase };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { gl, initGL } from \"../gl-utils/gl-canvas\";\r\nimport { Shader } from \"../gl-utils/shader\";\r\nimport * as ShaderManager from \"../gl-utils/shader-manager\";\r\nimport { VBO } from \"../gl-utils/vbo\";\r\n\r\nimport { EPrimitive, Parameters } from \"../parameters\";\r\n\r\nimport { PatternBase } from \"../patterns/pattern-base\";\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport * as Statistics from \"../statistics/statistics\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\n\r\nimport { PlotterCanvasBase } from \"./plotter-canvas-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\ntype AffectShaderFunction = (shader: Shader) => unknown;\r\ntype ExtraAttributeFunction = (item: PatternBase) => number;\r\n\r\nconst SQUARE_GEOMETRY = [-.5, .5, -.5, -.5, .5, .5, .5, -.5];\r\nconst TRIANGLE_GEOMETRY = [\r\n    PatternTriangle.baseP1.x, PatternTriangle.baseP1.y,\r\n    PatternTriangle.baseP2.x, PatternTriangle.baseP2.y,\r\n    PatternTriangle.baseP3.x, PatternTriangle.baseP3.y,\r\n];\r\n\r\nclass PlotterCanvasWebGL extends PlotterCanvasBase {\r\n    private instancingExt: ANGLE_instanced_arrays;\r\n    private needToResetInstancingDivision: boolean;\r\n\r\n    private linesShader: Shader | null;\r\n\r\n    private squaresShader: Shader | null;\r\n    private circlesShader: Shader | null;\r\n    private rectanglesShader: Shader | null;\r\n    private trianglesShader: Shader | null;\r\n\r\n    private squaresInstancedShader: Shader | null;\r\n    private circlesInstancedShader: Shader | null;\r\n    private rectanglesInstancedShader: Shader | null;\r\n    private trianglesInstancedShader: Shader | null;\r\n\r\n    private blending: boolean;\r\n\r\n    private linesBuffer: Float32Array;\r\n    private readonly linesVBO: VBO;\r\n\r\n    private primitivesBuffer: Float32Array;\r\n    private readonly primitivesVBOId: WebGLBuffer;\r\n\r\n    private readonly geometryVBO: VBO;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        if (!initGL()) {\r\n            throw new Error(\"Failed to initialize WebGL.\");\r\n        }\r\n        console.log(`Max point size supported by WebGL: \"${gl.ALIASED_POINT_SIZE_RANGE}\" pixels.`);\r\n\r\n        this.needToResetInstancingDivision = false;\r\n        const instancingExtensionName = \"ANGLE_instanced_arrays\";\r\n        this.instancingExt = gl.getExtension(instancingExtensionName);\r\n        if (this.instancingExt === null) {\r\n            const errorMessage = `Your device does not support the \"${instancingExtensionName}\" WebGL extension. Using the fallback mode with GL_POINTS, which might cause visual artifacts.`;\r\n            Page.Demopage.setErrorMessage(\"webgl-instanced\", errorMessage);\r\n            console.log(errorMessage);\r\n            Parameters.disallowInstancing();\r\n        } else {\r\n            console.log(`Using the \"${instancingExtensionName}\" WebGL extension.`);\r\n        }\r\n\r\n        this.blending = false;\r\n        this.enableBlending = true;\r\n\r\n        this.linesBuffer = new Float32Array([]);\r\n        this.linesVBO = new VBO(gl, new Float32Array(this.linesBuffer), 2, gl.FLOAT, false);\r\n\r\n        this.primitivesBuffer = new Float32Array([]);\r\n        this.primitivesVBOId = gl.createBuffer();\r\n\r\n        const geometryBuffer = SQUARE_GEOMETRY.concat(TRIANGLE_GEOMETRY);\r\n        this.geometryVBO = new VBO(gl, new Float32Array(geometryBuffer), 2, gl.FLOAT, true);\r\n\r\n        this.linesShader = null;\r\n        this.squaresShader = null;\r\n        this.circlesShader = null;\r\n        this.rectanglesShader = null;\r\n        this.trianglesShader = null;\r\n        this.loadAndBuildShader(\"point/lines.vert\", \"point/lines.frag\", \"lines\", (shader: Shader) => this.linesShader = shader);\r\n        this.loadAndBuildShader(\"point/items.vert\", \"point/squares.frag\", \"squares\", (shader: Shader) => this.squaresShader = shader);\r\n        this.loadAndBuildShader(\"point/items.vert\", \"point/circles.frag\", \"circles\", (shader: Shader) => this.circlesShader = shader);\r\n        this.loadAndBuildShader(\"point/rectangles.vert\", \"point/rectangles.frag\", \"rectangles\", (shader: Shader) => this.rectanglesShader = shader);\r\n        this.loadAndBuildShader(\"point/triangles.vert\", \"point/triangles.frag\", \"triangles\", (shader: Shader) => this.trianglesShader = shader);\r\n\r\n        this.squaresInstancedShader = null;\r\n        this.circlesInstancedShader = null;\r\n        this.rectanglesInstancedShader = null;\r\n        this.trianglesInstancedShader = null;\r\n        if (this.supportsInstancing) {\r\n            this.loadAndBuildShader(\"instanced/simpleGeometry.vert\", \"instanced/fillColor.frag\", \"instanced squares\", (shader: Shader) => this.squaresInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/circles.vert\", \"instanced/circles.frag\", \"instanced squares\", (shader: Shader) => this.circlesInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/rectangles.vert\", \"instanced/fillColor.frag\", \"instanced circles\", (shader: Shader) => this.rectanglesInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/triangles.vert\", \"instanced/fillColor.frag\", \"instanced triangles\", (shader: Shader) => this.trianglesInstancedShader = shader);\r\n        }\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return this.linesShader !== null &&\r\n            this.squaresShader !== null && this.circlesShader !== null && this.rectanglesShader !== null && this.trianglesShader !== null &&\r\n            this.squaresInstancedShader !== null && this.circlesInstancedShader !== null && this.rectanglesInstancedShader !== null && this.trianglesInstancedShader !== null;\r\n    }\r\n\r\n    protected clearCanvas(color: Color): void {\r\n        gl.clearColor(color.r / 255, color.g / 255, color.b / 255, 1); // TODO avoid doing this if possible\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        super.initialize(backgroundColor);\r\n        gl.viewport(0, 0, this._size.width, this._size.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        this.drawPrimitives(this.squaresShader, this.squaresInstancedShader, squares, EPrimitive.SQUARE);\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        this.drawPrimitives(this.circlesShader, this.circlesInstancedShader, circles, EPrimitive.CIRCLE);\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const extraAttributeFunction = (item: PatternBase) => (item as PatternRectangle).aspectRatio;\r\n        this.drawPrimitives(this.rectanglesShader, this.rectanglesInstancedShader, rectangles, EPrimitive.RECTANGLE, extraAttributeFunction);\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const extraAttributeFunction = (item: PatternBase) => (item as PatternTriangle).angle;\r\n        this.drawPrimitives(this.trianglesShader, this.trianglesInstancedShader, triangles, EPrimitive.TRIANGLE, extraAttributeFunction);\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        const nbLines = lines.length;\r\n\r\n        if (this.linesShader !== null && nbLines >= 1) {\r\n            const wantedLinesBufferLength = 4 * nbLines;\r\n            if (this.linesBuffer.length !== wantedLinesBufferLength) {\r\n                this.linesBuffer = new Float32Array(wantedLinesBufferLength)\r\n            }\r\n\r\n            for (let i = 0; i < nbLines; i++) {\r\n                this.linesBuffer[4 * i + 0] = lines[i].from.x;\r\n                this.linesBuffer[4 * i + 1] = lines[i].from.y;\r\n                this.linesBuffer[4 * i + 2] = lines[i].to.x;\r\n                this.linesBuffer[4 * i + 3] = lines[i].to.y;\r\n            }\r\n\r\n            this.linesVBO.setData(new Float32Array(this.linesBuffer));\r\n\r\n            this.linesShader.a[\"aCoords\"].VBO = this.linesVBO;\r\n            this.linesShader.u[\"uScreenSize\"].value = [this._size.width, this._size.height];\r\n            this.linesShader.u[\"uColor\"].value = [color.r / 255, color.g / 255, color.b / 255, 1];\r\n\r\n            this.linesShader.use();\r\n            this.linesShader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.LINES, 0, 2 * nbLines);\r\n        }\r\n    }\r\n\r\n    private drawPrimitives(pointsShader: Shader, instancedShader: Shader, items: PatternBase[], primitive: EPrimitive, extraAttributeFunction?: ExtraAttributeFunction): void {\r\n        this.updatePrimitivesVBO(items, extraAttributeFunction);\r\n\r\n        Statistics.timeSpentInDrawDrawX.start();\r\n        if (this.useInstancing && instancedShader !== null) {\r\n            this.drawInstanced(instancedShader, items, primitive);\r\n        } else {\r\n            this.drawAsPoints(pointsShader, items);\r\n        }\r\n        Statistics.timeSpentInDrawDrawX.stop();\r\n    }\r\n\r\n    private drawInstanced(shader: Shader, items: PatternBase[], primitive: EPrimitive): void {\r\n        const nbItems = items.length;\r\n        if (this.supportsInstancing && shader !== null && nbItems > 0) {\r\n            shader.use();\r\n            this.bindCommonUniformsAndAttributes(shader, true);\r\n            this.geometryVBO.bind(shader.a[\"aVertex\"].loc);\r\n\r\n            if (primitive === EPrimitive.TRIANGLE) {\r\n                this.instancingExt.drawArraysInstancedANGLE(gl.TRIANGLES, 4, 3, nbItems);\r\n            } else {\r\n                this.instancingExt.drawArraysInstancedANGLE(gl.TRIANGLE_STRIP, 0, 4, nbItems);\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawAsPoints(shader: Shader, items: PatternBase[]): void {\r\n        const nbItems = items.length;\r\n        if (shader !== null && nbItems > 0) {\r\n            shader.use();\r\n            this.bindCommonUniformsAndAttributes(shader, false);\r\n\r\n            gl.drawArrays(gl.POINTS, 0, nbItems);\r\n        }\r\n    }\r\n\r\n    private updatePrimitivesVBO(items: PatternBase[], extraAttribute?: ExtraAttributeFunction): void {\r\n        const nbItems = items.length;\r\n\r\n        Statistics.timeSpentInDrawAllocateBuffer.start();\r\n        // try not to resize the buffers too often to avoid GC\r\n        const nbItemsRounded = 1024 * Math.ceil(nbItems / 1024);\r\n\r\n        const wantedPrimitivesBufferLength = 8 * nbItemsRounded;\r\n        if (this.primitivesBuffer.length !== wantedPrimitivesBufferLength) {\r\n            this.primitivesBuffer = new Float32Array(wantedPrimitivesBufferLength);\r\n        }\r\n        Statistics.timeSpentInDrawAllocateBuffer.stop();\r\n\r\n        this.enableBlending = Parameters.blending;\r\n        const time = performance.now();\r\n        const blendTime = PatternBase.maxBlendingTime;\r\n\r\n        if (typeof extraAttribute !== \"function\") {\r\n            extraAttribute = () => 0; // unused value\r\n        }\r\n\r\n        Statistics.timeSpentInDrawFillBuffer.start();\r\n        for (let i = 0; i < nbItems; i++) {\r\n            const color = items[i].color;\r\n\r\n            this.primitivesBuffer[8 * i + 0] = items[i].center.x;\r\n            this.primitivesBuffer[8 * i + 1] = items[i].center.y;\r\n            this.primitivesBuffer[8 * i + 2] = items[i].size;\r\n            this.primitivesBuffer[8 * i + 3] = extraAttribute(items[i]);\r\n            this.primitivesBuffer[8 * i + 4] = color.r / 255;\r\n            this.primitivesBuffer[8 * i + 5] = color.g / 255;\r\n            this.primitivesBuffer[8 * i + 6] = color.b / 255;\r\n            this.primitivesBuffer[8 * i + 7] = items[i].computeOpacity(time, blendTime);\r\n        }\r\n        Statistics.timeSpentInDrawFillBuffer.stop();\r\n\r\n        Statistics.timeSpentInDrawUploadVBO.start();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.primitivesVBOId);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.primitivesBuffer, gl.DYNAMIC_DRAW);\r\n        Statistics.timeSpentInDrawUploadVBO.stop();\r\n    }\r\n\r\n    private bindCommonUniformsAndAttributes(shader: Shader, instanced: boolean): void {\r\n        shader.u[\"uScreenSize\"].value = [this._size.width, this._size.height];\r\n        shader.bindUniforms();\r\n\r\n        const BYTES_PER_FLOAT = 4;\r\n        const stateAttribLoc = shader.a[\"aState\"].loc;\r\n        const colorAttribLoc = shader.a[\"aColor\"].loc;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.primitivesVBOId);\r\n        gl.enableVertexAttribArray(stateAttribLoc);\r\n        gl.vertexAttribPointer(stateAttribLoc, 4, gl.FLOAT, false, 8 * BYTES_PER_FLOAT, 0);\r\n        if (instanced) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(stateAttribLoc, 1);\r\n        } else if (this.needToResetInstancingDivision) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(stateAttribLoc, 0);\r\n        }\r\n\r\n        gl.enableVertexAttribArray(colorAttribLoc);\r\n        gl.vertexAttribPointer(colorAttribLoc, 4, gl.FLOAT, false, 8 * BYTES_PER_FLOAT, 4 * BYTES_PER_FLOAT);\r\n        if (instanced) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(colorAttribLoc, 1);\r\n        } else if (this.needToResetInstancingDivision) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(colorAttribLoc, 0);\r\n        }\r\n\r\n        this.needToResetInstancingDivision = instanced;\r\n    }\r\n\r\n    private set enableBlending(value: boolean) {\r\n        if (value !== this.blending) {\r\n            this.blending = value;\r\n\r\n            if (value) {\r\n                gl.enable(gl.BLEND);\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n            } else {\r\n                gl.disable(gl.BLEND);\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadAndBuildShader(vertexFilename: string, fragmentFilename: string, shaderName: string, affectShader: AffectShaderFunction): void {\r\n        ShaderManager.buildShader({\r\n            vertexFilename,\r\n            fragmentFilename,\r\n            injected: {},\r\n        }, (builtShader: Shader | null) => {\r\n            if (builtShader === null) {\r\n                const errorMessage = `Failed to load or build the ${shaderName} shader.`;\r\n                Page.Demopage.setErrorMessage(`shader-${shaderName}`, errorMessage);\r\n                throw new Error(errorMessage);\r\n            }\r\n            affectShader(builtShader);\r\n        });\r\n    }\r\n\r\n    private get supportsInstancing(): boolean {\r\n        return this.instancingExt !== null;\r\n    }\r\n\r\n    private get useInstancing(): boolean {\r\n        return this.supportsInstancing && Parameters.useInstancing;\r\n    }\r\n}\r\n\r\nexport { PlotterCanvasWebGL };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { PlotterBase } from \"./plotter-base\";\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private readonly _size: ISize;\r\n\r\n    public constructor(size: ISize) {\r\n        super();\r\n\r\n        this._size = {\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${this._size.width} ${this._size.height}\">\\n`);\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${this._size.width}\" height=\"${this._size.height}\"/>\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const square of squares) {\r\n            const centerX = square.center.x + halfWidth;\r\n            const centerY = square.center.y + halfHeight;\r\n            const halfSize = 0.5 * square.size;\r\n\r\n            this.stringParts.push(`\\t\\t<rect fill=\"${square.color}\" x=\"${centerX - halfSize}\" y=\"${centerY - halfSize}\" width=\"${square.size}\" height=\"${square.size}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const circle of circles) {\r\n            const centerX = circle.center.x + halfWidth;\r\n            const centerY = circle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<circle fill=\"${circle.color}\" cx=\"${centerX}\" cy=\"${centerY}\" r=\"${circle.radius}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const rectangle of rectangles) {\r\n            const centerX = rectangle.center.x + halfWidth;\r\n            const centerY = rectangle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<rect fill=\"${rectangle.color}\" x=\"${centerX - 0.5 * rectangle.width}\" y=\"${centerY - 0.5 * rectangle.height}\" width=\"${rectangle.width}\" height=\"${rectangle.height}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const triangle of triangles) {\r\n            const centerX = triangle.center.x + halfWidth;\r\n            const centerY = triangle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<polygon fill=\"${triangle.color}\" points=\"${centerX + triangle.P1.x * triangle.size},${centerY + triangle.P1.y * triangle.size} ${centerX + triangle.P2.x * triangle.size},${centerY + triangle.P2.y * triangle.size} ${centerX + triangle.P3.x * triangle.size},${centerY + triangle.P3.y * triangle.size}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        const path: string[] = [];\r\n\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        for (const line of lines) {\r\n            const x1 = line.from.x + halfWidth;\r\n            const y1 = line.from.y + halfHeight;\r\n            const x2 = line.to.x + halfWidth;\r\n            const y2 = line.to.y + halfHeight;\r\n\r\n            path.push(`M${x1},${y1}L${x2},${y2}`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t\\t\\t<path fill=\"none\" stroke-width=\"1\" stroke=\"${color}\" d=\"${path.join()}\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const result = this.stringParts.join(\"\");\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { PlotterSVG };\r\n","import * as Statistics from \"..//statistics/statistics\";\r\n\r\nimport { Color } from \"../color/color\";\r\n\r\nimport { PatternBase } from \"../patterns/pattern-base\";\r\n\r\nimport { PlotterBase } from \"../plotter/plotter-base\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\ntype GridCell = PatternBase[];\r\n\r\nconst MIN_CELL_SIZE = 10;\r\nconst MAX_CELL_SIZE = 500;\r\n\r\nclass Grid {\r\n    private readonly gridSize: ISize;\r\n    private readonly gridCells: GridCell[];\r\n    private readonly topLeftCorner: IPoint;\r\n    private _cellSize: number;\r\n\r\n    private registeredItemsCount: number; // including duplicates\r\n\r\n    constructor() {\r\n        this.gridSize = { width: 0, height: 0 };\r\n        this.gridCells = [];\r\n        this.topLeftCorner = { x: 0, y: 0 };\r\n\r\n        this.reset({ width: 1, height: 1 }, 100, []);\r\n    }\r\n\r\n    /** @returns true if the grid needs to be redrawn */\r\n    public reset(domainSize: ISize, cellSize: number, items: PatternBase[]): boolean {\r\n        this.registeredItemsCount = 0;\r\n        Statistics.timeSpentInReindexResetDomain.start();\r\n        const gridHasChanged = this.resetDomain(domainSize, cellSize);\r\n        Statistics.timeSpentInReindexResetDomain.stop();\r\n\r\n        Statistics.timeSpentInReindexReindexItems.start();\r\n        for (const item of items) {\r\n            this.registerItem(item);\r\n        }\r\n        Statistics.timeSpentInReindexReindexItems.stop();\r\n\r\n        return gridHasChanged;\r\n    }\r\n\r\n    public registerItem(item: PatternBase): void {\r\n        const topLeft: IPoint = {\r\n            x: item.center.x - 0.5 * item.size,\r\n            y: item.center.y - 0.5 * item.size,\r\n        };\r\n        const bottomRight: IPoint = {\r\n            x: item.center.x + 0.5 * item.size,\r\n            y: item.center.y + 0.5 * item.size,\r\n        };\r\n\r\n        const minCellId = this.getCellId(topLeft);\r\n        const maxCellId = this.getCellId(bottomRight);\r\n\r\n        for (let iCellY = minCellId.y; iCellY <= maxCellId.y; iCellY++) {\r\n            for (let iCellX = minCellId.x; iCellX <= maxCellId.x; iCellX++) {\r\n                const cellId = this.computeCellId(iCellX, iCellY);\r\n                this.gridCells[cellId].push(item);\r\n                this.registeredItemsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(plotter: PlotterBase): void {\r\n        const lines: ILine[] = [];\r\n\r\n        const minX = this.topLeftCorner.x;\r\n        const maxX = minX + this.gridSize.width * this._cellSize;\r\n\r\n        const minY = this.topLeftCorner.y;\r\n        const maxY = minY + this.gridSize.height * this._cellSize;\r\n\r\n        for (let iX = 0; iX < this.gridSize.width; iX++) {\r\n            const x = minX + iX * this._cellSize;\r\n            const line: ILine = {\r\n                from: { x, y: minY },\r\n                to: { x, y: maxY },\r\n            };\r\n            lines.push(line);\r\n        }\r\n\r\n        for (let iY = 0; iY < this.gridSize.height; iY++) {\r\n            const y = minY + iY * this._cellSize;\r\n            const line: ILine = {\r\n                from: { x: minX, y },\r\n                to: { x: maxX, y },\r\n            };\r\n            lines.push(line);\r\n        }\r\n\r\n        plotter.drawLines(lines, Color.GREEN);\r\n    }\r\n\r\n    public getCellId(position: IPoint): IPoint {\r\n        let cellX = Math.floor((position.x - this.topLeftCorner.x) / this._cellSize);\r\n        let cellY = Math.floor((position.y - this.topLeftCorner.y) / this._cellSize);\r\n\r\n        if (cellX < 0) {\r\n            cellX = 0;\r\n        } else if (cellX >= this.gridSize.width) {\r\n            cellX = this.gridSize.width - 1;\r\n        }\r\n\r\n        if (cellY < 0) {\r\n            cellY = 0;\r\n        } else if (cellY >= this.gridSize.height) {\r\n            cellY = this.gridSize.height - 1;\r\n        }\r\n\r\n        return { x: cellX, y: cellY };\r\n    }\r\n\r\n    public getDistanceToClosestBorder(position: IPoint): number {\r\n        // position relative to the containing cell\r\n        const localX = (position.x - this.topLeftCorner.x) % this._cellSize;\r\n        const localY = (position.y - this.topLeftCorner.y) % this._cellSize;\r\n\r\n        const minDistanceX = Math.min(localX, this._cellSize - localX);\r\n        const minDistanceY = Math.min(localY, this._cellSize - localY);\r\n        return Math.min(minDistanceX, minDistanceY);\r\n    }\r\n\r\n    /** Provides the registered items that overlap a given cell.\r\n     * @param cellX (integer) horizontal position of the wanted cell\r\n     * @param cellY (integer) vertical position of the wanted cell\r\n     * @returns array of cells that overlap the wanted cell. If the wanted cell doesn't exist, returns empty array\r\n     */\r\n    public getItemsFromCell(cellX: number, cellY: number): PatternBase[] {\r\n        if (cellX >= 0 && cellX < this.gridSize.width && cellY >= 0 && cellY < this.gridSize.height) {\r\n            const cellId = this.computeCellId(cellX, cellY);\r\n            return this.gridCells[cellId];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /** Provides the registered items that overlap a certain group of cells. Contains duplicates.\r\n     * @param minCellX (integer) horizontal position of the lowest wanted cell\r\n     * @param minCellY (integer) vertical position of the lowest wanted cell\r\n     * @param maxCellX (integer) horizontal position of the highest wanted cell\r\n     * @param maxCellY (integer) vertical position of the highest wanted cell\r\n     * @returns array of cells that overlap the wanted group of cell. If no cell matches, returns empty array\r\n     */\r\n    public getItemsFromCellsGroup(minCellX: number, minCellY: number, maxCellX: number, maxCellY: number): PatternBase[] {\r\n        const result: PatternBase[] = [];\r\n\r\n        for (let iCellY = minCellY; iCellY <= maxCellY; iCellY++) {\r\n            for (let iCellX = minCellX; iCellX <= maxCellX; iCellX++) {\r\n                const cellItems = this.getItemsFromCell(iCellX, iCellY);\r\n                result.push.apply(result, cellItems);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeStatistics(): void {\r\n        Statistics.registerGridStats(this.gridSize, this._cellSize, this.registeredItemsCount);\r\n    }\r\n\r\n    public get itemsPerCell(): number {\r\n        if (this.gridCells.length === 0) {\r\n            return 0;\r\n        }\r\n        return this.registeredItemsCount / this.gridCells.length;\r\n    }\r\n\r\n    public get cellSize(): number {\r\n        return this._cellSize;\r\n    }\r\n\r\n    /** @returns true if the cells disposition changed */\r\n    private resetDomain(domainSize: ISize, cellSize: number): boolean {\r\n        const wantedGridSizeX = Math.ceil(domainSize.width / cellSize);\r\n        const wantedGridSizeY = Math.ceil(domainSize.height / cellSize);\r\n\r\n        if (cellSize < MIN_CELL_SIZE) {\r\n            cellSize = MIN_CELL_SIZE;\r\n        } else if (cellSize > MAX_CELL_SIZE) {\r\n            cellSize = MAX_CELL_SIZE;\r\n        }\r\n\r\n        const hasChanged = (this._cellSize !== cellSize) ||\r\n            (this.gridSize.width !== wantedGridSizeX) || (this.gridSize.height !== wantedGridSizeY);\r\n\r\n        this._cellSize = cellSize;\r\n        this.gridSize.width = wantedGridSizeX;\r\n        this.gridSize.height = wantedGridSizeY;\r\n\r\n        this.topLeftCorner.x = -0.5 * domainSize.width;\r\n        this.topLeftCorner.y = -0.5 * domainSize.height;\r\n\r\n        const nbCells = this.gridSize.width * this.gridSize.height;\r\n        this.gridCells.length = nbCells; // reduce size if needed\r\n        for (let i = 0; i < nbCells; i++) {\r\n            this.gridCells[i] = []; // empty/initialize all cells\r\n        }\r\n\r\n        return hasChanged;\r\n    }\r\n\r\n    /** No check that the parameters are in bounds. */\r\n    private computeCellId(cellX: number, cellY: number): number {\r\n        return cellX + cellY * this.gridSize.width;\r\n    }\r\n}\r\n\r\nexport { Grid };\r\n","import { Parameters } from \"../parameters\";\r\n\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { StopWatch } from \"./stop-watch\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nconst VERBOSE_INTERVAL = 1000;\r\n\r\nconst timeSinceLastVerboseFrame = new StopWatch();\r\n\r\nlet frames = 0;\r\nconst timeSpentInMainLoop = new StopWatch();\r\nconst timeSpentInDraw = new StopWatch();\r\nconst timeSpentInDrawAllocateBuffer = new StopWatch();\r\nconst timeSpentInDrawFillBuffer = new StopWatch();\r\nconst timeSpentInDrawUploadVBO = new StopWatch();\r\nconst timeSpentInDrawDrawX = new StopWatch();\r\nconst timeSpentInUpdate = new StopWatch();\r\nconst timeSpentInReindex = new StopWatch();\r\nconst timeSpentInReindexResetDomain = new StopWatch();\r\nconst timeSpentInReindexReindexItems = new StopWatch();\r\nconst timeSpentInRecycle = new StopWatch();\r\nconst timeSpentInZoom = new StopWatch();\r\n\r\nlet itemsCount = 0;\r\nlet itemsRecycledCount = 0;\r\nlet itemsPendingRecyclingCount = 0;\r\nlet itemsRecyclingTries = 0;\r\n\r\nlet nbGridStats = 0;\r\nlet gridWidth = 0;\r\nlet gridHeight = 0;\r\nlet gridCellSize = 0;\r\nlet gridRegisteredItems = 0;\r\n\r\nfunction initialize(): void {\r\n    timeSinceLastVerboseFrame.reset();\r\n    timeSinceLastVerboseFrame.start();\r\n    frames = 0;\r\n}\r\n\r\nfunction registerFrame(): void {\r\n    frames++;\r\n\r\n    if (isVerboseFrame()) {\r\n        updateIndicators();\r\n        resetAll();\r\n    }\r\n}\r\n\r\nfunction isVerboseFrame(): boolean {\r\n    return timeSinceLastVerboseFrame.totalTime > VERBOSE_INTERVAL;\r\n}\r\n\r\nfunction updateIndicators(): void {\r\n    const fps = 1000 * frames / timeSinceLastVerboseFrame.totalTime;\r\n\r\n    if (Parameters.isInDebug) {\r\n        const averageFrameTime = timeSinceLastVerboseFrame.totalTime / frames;\r\n\r\n        const averageMainLoopTime = timeSpentInMainLoop.totalTime / frames;\r\n        const mainLoopTimeRelative = averageMainLoopTime / averageFrameTime;\r\n\r\n        const averageDrawTime = timeSpentInDraw.totalTime / frames;\r\n        const drawTimeRelative = averageDrawTime / averageMainLoopTime;\r\n\r\n        const averageDrawAllocateBufferTime = timeSpentInDrawAllocateBuffer.totalTime / frames;\r\n        const drawAllocateBufferTimeRelative = averageDrawAllocateBufferTime / averageDrawTime;\r\n\r\n        const averageDrawFillBufferTime = timeSpentInDrawFillBuffer.totalTime / frames;\r\n        const drawFillBufferTimeRelative = averageDrawFillBufferTime / averageDrawTime;\r\n\r\n        const averageDrawUploadVBOTime = timeSpentInDrawUploadVBO.totalTime / frames;\r\n        const drawDrawUploadVBOTimeRelative = averageDrawUploadVBOTime / averageDrawTime;\r\n\r\n        const averageDrawDrawXTime = timeSpentInDrawDrawX.totalTime / frames;\r\n        const drawDrawXTimeRelative = averageDrawDrawXTime / averageDrawTime;\r\n\r\n        const averageUpdateTime = timeSpentInUpdate.totalTime / frames;\r\n        const updateTimeRelative = averageUpdateTime / averageMainLoopTime;\r\n\r\n        const averageUpdateReindexTime = timeSpentInReindex.totalTime / frames;\r\n        const updateReindexTimeRelative = averageUpdateReindexTime / averageUpdateTime;\r\n\r\n        const averageUpdateReindexResetDomainTime = timeSpentInReindexResetDomain.totalTime / frames;\r\n        const updateReindexResetDomainTimeRelative = averageUpdateReindexResetDomainTime / averageUpdateReindexTime;\r\n\r\n        const averageUpdateReindexReindexItemsTime = timeSpentInReindexReindexItems.totalTime / frames;\r\n        const updateReindexReindexItemsTimeRelative = averageUpdateReindexReindexItemsTime / averageUpdateReindexTime;\r\n\r\n        const averageUpdateRecycleTime = timeSpentInRecycle.totalTime / frames;\r\n        const updateRecycleTimeRelative = averageUpdateRecycleTime / averageUpdateTime;\r\n\r\n        const averageUpdateZoomTime = timeSpentInZoom.totalTime / frames;\r\n        const updateZoomTimeRelative = averageUpdateZoomTime / averageUpdateTime;\r\n\r\n        Page.Canvas.setIndicatorText(\"fps\", `${fps.toFixed(0)} (${averageFrameTime.toFixed(2)} ms)`);\r\n        Page.Canvas.setIndicatorText(\"main-loop-time\", `${averageMainLoopTime.toFixed(2)} ms (${(100 * mainLoopTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-time\", `${averageDrawTime.toFixed(2)} ms (${(100 * drawTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-allocatebuffer-time\", `${averageDrawAllocateBufferTime.toFixed(2)} ms (${(100 * drawAllocateBufferTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-fillbuffer-time\", `${averageDrawFillBufferTime.toFixed(2)} ms (${(100 * drawFillBufferTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-uploadvbo-time\", `${averageDrawUploadVBOTime.toFixed(2)} ms (${(100 * drawDrawUploadVBOTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-drawX-time\", `${averageDrawDrawXTime.toFixed(2)} ms (${(100 * drawDrawXTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-time\", `${averageUpdateTime.toFixed(2)} ms (${(100 * updateTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-reindex-time\", `${averageUpdateReindexTime.toFixed(2)} ms (${(100 * updateReindexTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-reindex-resetdomain-time\", `${averageUpdateReindexResetDomainTime.toFixed(2)} ms (${(100 * updateReindexResetDomainTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-reindex-reindexitems-time\", `${averageUpdateReindexReindexItemsTime.toFixed(2)} ms (${(100 * updateReindexReindexItemsTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-recycle-time\", `${averageUpdateRecycleTime.toFixed(2)} ms (${(100 * updateRecycleTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-zoom-time\", `${averageUpdateZoomTime.toFixed(2)} ms (${(100 * updateZoomTimeRelative).toFixed(1)} %)`);\r\n\r\n        Page.Canvas.setIndicatorText(\"items-reclycled-count\", `${(itemsRecycledCount / frames * fps).toFixed(1)}`);\r\n        Page.Canvas.setIndicatorText(\"items-pending-recycling-count\", `${(itemsPendingRecyclingCount / frames).toFixed(1)}`);\r\n        Page.Canvas.setIndicatorText(\"items-recycling-tries-count\", `${(itemsRecyclingTries / frames).toFixed(1)}`);\r\n\r\n        if (nbGridStats > 0) {\r\n            const averageGridWidth = Math.round(gridWidth / nbGridStats);\r\n            const averageGridHeight = Math.round(gridHeight / nbGridStats);\r\n            const averageGridCellCount = averageGridWidth * averageGridHeight;\r\n            Page.Canvas.setIndicatorText(\"grid-size\", `${averageGridWidth}x${averageGridHeight} (${averageGridCellCount})`);\r\n            Page.Canvas.setIndicatorText(\"grid-cell-size\", `${(gridCellSize / nbGridStats).toFixed(1)}`);\r\n            Page.Canvas.setIndicatorText(\"grid-items-per-cell\", `${(gridRegisteredItems / nbGridStats / averageGridCellCount).toFixed(1)}`);\r\n        }\r\n    } else {\r\n        Page.Canvas.setIndicatorText(\"fps\", fps.toFixed(0));\r\n    }\r\n\r\n    Page.Canvas.setIndicatorText(\"items-count\", `${itemsCount}`);\r\n    Page.Canvas.setIndicatorText(\"items-visible-count\", `${(itemsCount - itemsPendingRecyclingCount / frames).toFixed(0)}`);\r\n\r\n}\r\n\r\nfunction resetAll(): void {\r\n    timeSinceLastVerboseFrame.reset();\r\n\r\n    frames = 0;\r\n    timeSpentInMainLoop.reset();\r\n    timeSpentInDraw.reset();\r\n    timeSpentInDrawAllocateBuffer.reset();\r\n    timeSpentInDrawFillBuffer.reset();\r\n    timeSpentInDrawUploadVBO.reset();\r\n    timeSpentInDrawDrawX.reset();\r\n    timeSpentInUpdate.reset();\r\n    timeSpentInReindex.reset();\r\n    timeSpentInReindexResetDomain.reset();\r\n    timeSpentInReindexReindexItems.reset();\r\n    timeSpentInRecycle.reset();\r\n    timeSpentInZoom.reset();\r\n\r\n    itemsRecycledCount = 0;\r\n    itemsPendingRecyclingCount = 0;\r\n    itemsRecyclingTries = 0;\r\n\r\n    nbGridStats = 0;\r\n}\r\n\r\nfunction registerRecyclingStats(total: number, recycled: number, pendingRecycling: number, nbTriesCount: number): void {\r\n    itemsCount = total;\r\n    itemsRecycledCount += recycled;\r\n    itemsPendingRecyclingCount += pendingRecycling;\r\n    itemsRecyclingTries += nbTriesCount;\r\n}\r\n\r\nfunction registerGridStats(gridSize: ISize, cellSize: number, registeredItems: number): void {\r\n    if (nbGridStats === 0) {\r\n        gridWidth = 0;\r\n        gridHeight = 0;\r\n        gridCellSize = 0;\r\n        gridRegisteredItems = 0;\r\n    }\r\n\r\n    nbGridStats++;\r\n    gridWidth += gridSize.width;\r\n    gridHeight += gridSize.height;\r\n    gridCellSize += cellSize;\r\n    gridRegisteredItems += registeredItems;\r\n}\r\n\r\nexport {\r\n    initialize,\r\n    registerGridStats,\r\n    registerFrame,\r\n    registerRecyclingStats,\r\n    timeSpentInMainLoop,\r\n    timeSpentInDraw,\r\n    timeSpentInDrawAllocateBuffer,\r\n    timeSpentInDrawFillBuffer,\r\n    timeSpentInDrawUploadVBO,\r\n    timeSpentInDrawDrawX,\r\n    timeSpentInUpdate,\r\n    timeSpentInReindex,\r\n    timeSpentInReindexResetDomain,\r\n    timeSpentInReindexReindexItems,\r\n    timeSpentInRecycle,\r\n    timeSpentInZoom,\r\n};\r\n","class StopWatch {\r\n    private _totalTime: number;\r\n    private _lastCheckpoint: number;\r\n    private _isRunning: boolean;\r\n\r\n    constructor() {\r\n        this._totalTime = 0;\r\n        this._isRunning = false;\r\n    }\r\n\r\n    public start(): void {\r\n        if (!this._isRunning) {\r\n            this._lastCheckpoint = performance.now();\r\n            this._isRunning = true;\r\n        } else {\r\n            console.log(\"Error: stopwatch is already started\");\r\n        }\r\n    }\r\n\r\n    public stop(): void {\r\n        if (this._isRunning) {\r\n            const now = performance.now();\r\n            this._totalTime += now - this._lastCheckpoint;\r\n            this._lastCheckpoint = now;\r\n            this._isRunning = false;\r\n        } else {\r\n            console.log(\"Error: stopwatch is already stopped.\");\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this._totalTime = 0;\r\n        this._lastCheckpoint = performance.now();\r\n    }\r\n\r\n    public get totalTime(): number {\r\n        if (this._isRunning) {\r\n            return this._totalTime + (performance.now() - this._lastCheckpoint);\r\n        } else {\r\n            return this._totalTime;\r\n        }\r\n    }\r\n}\r\n\r\nexport { StopWatch };\r\n","function downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nfunction getQueryStringValue(name: string): string | null {\r\n    const url = window.location.href;\r\n    const queryStringStart = url.indexOf(\"?\");\r\n    if (queryStringStart >= 0) {\r\n        const queryString = url.substring(queryStringStart + 1);\r\n        if (queryString.length > 0) {\r\n            const parameters = queryString.split(\"&\");\r\n            for (const parameter of parameters) {\r\n                const keyValue = parameter.split(\"=\");\r\n                if (keyValue.length === 2) {\r\n                    const decodedKey = decodeURIComponent(keyValue[0]);\r\n                    if (decodedKey === name) {\r\n                        return decodeURIComponent(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport {\r\n    downloadTextFile,\r\n    getQueryStringValue,\r\n};\r\n","class NumberRange {\r\n    public constructor (public readonly from: number, public readonly to: number) {}\r\n\r\n    public isInRange(candidate: number): boolean {\r\n        return this.from <= candidate && candidate <= this.to;\r\n    }\r\n}\r\n\r\nexport { NumberRange };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(633);\n"],"sourceRoot":""}