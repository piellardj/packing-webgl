{"version":3,"sources":["webpack://packing-webgl/./src/ts/debug-collisions.ts","webpack://packing-webgl/./src/ts/engine.ts","webpack://packing-webgl/./src/ts/gl-utils/gl-canvas.ts","webpack://packing-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://packing-webgl/./src/ts/gl-utils/shader-manager.ts","webpack://packing-webgl/./src/ts/gl-utils/shader-sources.ts","webpack://packing-webgl/./src/ts/gl-utils/shader.ts","webpack://packing-webgl/./src/ts/gl-utils/vbo.ts","webpack://packing-webgl/./src/ts/main.ts","webpack://packing-webgl/./src/ts/parameters.ts","webpack://packing-webgl/./src/ts/patterns/pattern-base.ts","webpack://packing-webgl/./src/ts/patterns/pattern-circle.ts","webpack://packing-webgl/./src/ts/patterns/pattern-rectangle.ts","webpack://packing-webgl/./src/ts/patterns/pattern-square.ts","webpack://packing-webgl/./src/ts/patterns/pattern-triangle.ts","webpack://packing-webgl/./src/ts/plotter/plotter-base.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-2d.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-base.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-webgl.ts","webpack://packing-webgl/./src/ts/plotter/plotter-svg.ts","webpack://packing-webgl/./src/ts/space-grid/grid.ts","webpack://packing-webgl/./src/ts/statistics/statistics.ts","webpack://packing-webgl/./src/ts/statistics/stop-watch.ts","webpack://packing-webgl/./src/ts/utils/color.ts","webpack://packing-webgl/./src/ts/utils/helper.ts","webpack://packing-webgl/./src/ts/utils/number-range.ts","webpack://packing-webgl/webpack/bootstrap","webpack://packing-webgl/webpack/startup"],"names":["testedSquares","fixed","PatternSquare","mobile","testedCircles","PatternCircle","testedRectangles","PatternRectangle","testedTriangles","PatternTriangle","computeSquare","sideSize","computeRectangle","width","height","size","from","x","y","to","mainDebugCollisions","plotter","PlotterCanvas2D","zoomFactor","Page","Canvas","Observers","mouseWheel","push","delta","Math","max","min","requestAnimationFrame","mainLoop","primitive","currentTestType","Parameters","currentCollisionType","testitems","EPrimitive","SQUARE","CIRCLE","RECTANGLE","canvasSize","getSize","minCanvasSide","mousePosRelative","getMousePosition","center","drawFunction","items","drawSquares","drawCircles","drawRectangles","drawTriangles","getDrawFunction","ECollisionTestType","PRIMITIVE","lines","initialize","Color","BLACK","drawLines","GREEN","finalize","POINT","domainSize","visibility","computeVisibility","EVisibility","COVERS_VIEW","console","log","OUT_OF_VIEW","this","initializedItemsList","uninitializedItemsList","lastRecyclingTime","zoomCenter","backgroundColorOverride","backgroundNestingLevel","reset","createItem","TRIANGLE","Error","currentPrimitive","setItemsCount","wantedCount","initializedCount","length","totalItemsCount","itemsToAdd","i","newItem","draw","PatternBase","baseNestingLevel","additionalNestingLevelForColor","highContrastColor","highContrast","everythingDrawn","isReady","isZooming","performance","now","maxBlendingTime","itemsToDraw","backgroundColor","computeBackgroundColor","oneCellOnly","grid","getItemsFromCell","cellX","cellY","showGrid","udpate","deltaTimeInSeconds","mayRecycle","willZoom","needToInitializeGrid","requiresRedraw","Statistics","timeSpentInReindex","start","gridChanged","reindexItems","stop","timeSpentInRecycle","itemsRecycled","performRecycling","timeSpentInZoom","itemsMoved","performZoom","Grid","gridCellSize","cellSize","adaptativeGrid","targetItemsPerCell","targetItemsPerGridCell","lastItemsPerCell","itemsPerCell","nbItemsRecycled","allowOverlapping","sizeFactor","spacing","acceptedSizesForNewItems","NumberRange","minSize","maxTries","maxTriesPerFrame","triesLeft","currentItem","pop","resetResult","nbTries","success","registerItem","nbPendingRecycling","nbTriesUsed","registerRecyclingStats","computeStatistics","updateZoomCenter","newInitializedArray","zoomSpeed","item","zoomIn","MAX_SIZE","VISIBLE","rawColor","nestingLevel","blackBackground","WHITE","isMouseDown","mousePosition","halfWidth","halfHeight","Engine","gl","initGL","flags","setError","message","Demopage","setErrorMessage","canvas","getCanvas","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","adjustSize","hidpi","cssPixel","window","devicePixelRatio","floor","clientWidth","clientHeight","_gl","GLResource","cachedShaders","buildShader","infos","callback","sourcesPending","sourcesFailed","loadedSource","processSource","source","replace","match","name","injected","shader","vert","ShaderSources","getSource","vertexFilename","frag","fragmentFilename","processedVert","processedFrag","Shader","loadSource","getShader","registerShader","callAndClearCallbacks","cached","callbacks","cachedCallback","failed","pending","builtShader","deleteShader","freeGLResources","cachedSources","filename","text","XMLHttpRequest","open","onload","readyState","status","responseText","error","statusText","onerror","send","notImplemented","alert","types","str","binder","location","value","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","id","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","use","useProgram","bindUniforms","currTextureUnitNb","Object","keys","u","forEach","uName","uniform","loc","bindAttributes","a","aName","attribute","VBO","bind","bindUniformsAndAttributes","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","Usage","array","staticUsage","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","DYNAMIC_DRAW","normalize","stride","offset","usage","STATIC","DYNAMIC","createQuad","minX","minY","maxX","maxY","Float32Array","FLOAT","deleteBuffer","enableVertexAttribArray","vertexAttribPointer","bindInstanced","ext","divisor","vertexAttribDivisorANGLE","setData","isInCollisionsDebug","canvasPlotter","isWebGLVersion","PlotterCanvasWebGL","engine","needToRedraw","addRedrawObserver","addClearObserver","addDownloadObserver","svgPlotter","PlotterSVG","svgString","export","Helper","downloadTextFile","lastRunTime","time","timeSpentInMainLoop","wantedItemsCount","quantity","timeSpentInUpdate","updateChangedSomething","timeSpentInDraw","successfulDraw","registerFrame","main","controlId","redrawObservers","triggerRedraw","observer","canvasResize","Checkbox","addObserver","Range","clearObservers","triggerClear","Button","Tabs","isInDebug","Helpers","getQueryStringValue","Sections","setVisibility","setIndicatorVisibility","setChecked","updateIndicatorsVisibility","visible","isChecked","setIndicatorsVisibility","updateGridControlsVisibility","adaptative","Controls","href","getValue","getValues","abs","disallowInstancing","FileControl","CANVAS_CENTER","globalLastTestId","random","lastTestId","blending","acceptedSizes","result","randomizePosition","maxSize","computeBiggestSizePossible","isInRange","initializationTime","computeOpacity","blendTime","MAX_SIZE_LOWER","r","MAX_SIZE_GAP","lifetime","currentTestId","rawMaxSize","computeBiggestSizePossibleToAvoidPoint","maxDistanceDetectableByExactCell","getDistanceToClosestBorder","exactCellId","getCellId","existingItemsFromExactCell","biggestSizeToAvoidClosestItems","computeBiggestSizePossibleToAvoidItems","topLeftPoint","bottomRightPoint","minCellId","maxCellId","additionalItemsToTest","getItemsFromCellsGroup","biggestSizeToAvoidFurtherItems","itemsToAvoid","computeBiggestSizePossibleToAvoidItem","isInside","round","pointToAvoid","toPointX","toPointY","sqrt","itemToAvoid","toCenterX","toCenterY","distance","radius","halfDomainWidth","halfDomainHeight","absX","absY","dX","dY","aspectRatio","baseWidth","baseHeight","maxSizeX","maxSizeY","deltaX","deltaY","halfObstacleWidth","halfObstacleHeight","halfSideLength","sideLength","halfSize","rotatePoint","point","cosAngle","sinAngle","computeSegmentsIntersection","from1","delta1","delta2","denom","invDenom","t1","MAX_NUMBER","minPositive","args","arg","angle","PI","cos","sin","P1","baseP1","P2","baseP2","P3","baseP3","P1_TO_P2","P2_TO_P3","P3_TO_P1","pointToAvoidLocal","intersection","isPointInside","smallerTforMyVertices","smallerTforMySides","localOtherP1","localOtherP2","localOtherP3","scaledOtherP1toP2","scaledOtherP2toP3","scaledOtherP3toP1","T1_1","T1_2","T1_3","T2_1","T2_2","T2_3","T3_1","T3_2","T3_3","d1","d2","d3","PlotterBase","context","alpha","clearCanvas","color","fillStyle","toString","fillRect","squares","_size","square","centerX","centerY","circles","TWO_PI","circle","beginPath","arc","fill","closePath","rectangles","rectangle","triangles","triangle","moveTo","lineTo","strokeStyle","lineWidth","line","stroke","PlotterCanvasBase","resizeCanvas","actualWidth","actualHeight","SQUARE_GEOMETRY","TRIANGLE_GEOMETRY","ALIASED_POINT_SIZE_RANGE","needToResetInstancingDivision","instancingExt","getExtension","errorMessage","enableBlending","linesBuffer","linesVBO","statesBuffer","statesVBO","colorsBuffer","colorsVBO","geometryBuffer","concat","geometryVBO","linesShader","squaresShader","circlesShader","rectanglesShader","trianglesShader","loadAndBuildShader","squaresInstancedShader","circlesInstancedShader","rectanglesInstancedShader","trianglesInstancedShader","supportsInstancing","g","b","clear","COLOR_BUFFER_BIT","viewport","drawPrimitives","nbLines","wantedLinesBufferLength","drawArrays","LINES","pointsShader","instancedShader","extraAttributeFunction","updateStateAndColorVBOs","useInstancing","drawInstanced","drawAsPoints","nbItems","drawArraysInstancedANGLE","TRIANGLES","TRIANGLE_STRIP","POINTS","extraAttribute","nbItemsRounded","ceil","wantedStatesBufferLength","wantedColorsBufferLength","enable","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","shaderName","affectShader","ShaderManager","stringParts","path","x1","y1","x2","y2","join","gridSize","gridCells","topLeftCorner","registeredItemsCount","gridHasChanged","resetDomain","topLeft","bottomRight","iCellY","iCellX","cellId","computeCellId","_cellSize","iX","iY","position","localX","localY","minDistanceX","minDistanceY","minCellX","minCellY","maxCellX","maxCellY","cellItems","apply","registerGridStats","wantedGridSizeX","wantedGridSizeY","hasChanged","nbCells","timeSinceLastVerboseFrame","StopWatch","frames","itemsCount","itemsRecycledCount","itemsPendingRecyclingCount","itemsRecyclingTries","nbGridStats","gridWidth","gridHeight","gridRegisteredItems","totalTime","fps","averageFrameTime","averageMainLoopTime","mainLoopTimeRelative","averageDrawTime","drawTimeRelative","averageUpdateTime","updateTimeRelative","averageUpdateReindexTime","updateReindexTimeRelative","averageUpdateRecycleTime","updateRecycleTimeRelative","averageUpdateZoomTime","updateZoomTimeRelative","setIndicatorText","toFixed","averageGridWidth","averageGridHeight","averageGridCellCount","updateIndicators","total","recycled","pendingRecycling","nbTriesCount","registeredItems","_totalTime","_isRunning","_lastCheckpoint","String","prototype","padStart","maxLength","fillString","nbRepeats","randomChannel","hexString","rHex","gHex","bHex","fileName","content","fileType","blob","Blob","navigator","msSaveBlob","URL","createObjectURL","linkElement","document","createElement","download","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","url","queryStringStart","indexOf","queryString","substring","split","keyValue","decodeURIComponent","candidate","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { ECollisionTestType, EPrimitive, Parameters } from \"./parameters\";\r\nimport { EVisibility, PatternBase } from \"./patterns/pattern-base\";\r\nimport { PatternCircle } from \"./patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"./patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"./patterns/pattern-square\";\r\nimport { PatternTriangle } from \"./patterns/pattern-triangle\";\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { Color } from \"./utils/color\";\r\nimport { ILine } from \"./utils/i-line\";\r\nimport { ISize } from \"./utils/i-size\";\r\n\r\ninterface ITest {\r\n    fixed: PatternBase;\r\n    mobile: PatternBase;\r\n}\r\ninterface ITestedPattern<T extends PatternBase> extends ITest {\r\n    fixed: T;\r\n    mobile: T;\r\n}\r\n\r\nconst testedSquares: ITestedPattern<PatternSquare> = {\r\n    fixed: new PatternSquare(),\r\n    mobile: new PatternSquare(),\r\n};\r\n\r\nconst testedCircles: ITestedPattern<PatternCircle> = {\r\n    fixed: new PatternCircle(),\r\n    mobile: new PatternCircle(),\r\n};\r\n\r\nconst testedRectangles: ITestedPattern<PatternRectangle> = {\r\n    fixed: new PatternRectangle(),\r\n    mobile: new PatternRectangle(),\r\n};\r\n\r\nconst testedTriangles: ITestedPattern<PatternTriangle> = {\r\n    fixed: new PatternTriangle(),\r\n    mobile: new PatternTriangle(),\r\n};\r\n\r\nfunction getCurrentTestItems(): ITest {\r\n    const primitive = Parameters.primitive;\r\n    if (primitive === EPrimitive.SQUARE) {\r\n        return testedSquares;\r\n    } else if (primitive === EPrimitive.CIRCLE) {\r\n        return testedCircles;\r\n    } else if (primitive === EPrimitive.RECTANGLE) {\r\n        return testedRectangles;\r\n    } else { //  if (primitive === EPrimitive.TRIANGLE) {\r\n        return testedTriangles\r\n    }\r\n}\r\n\r\nfunction computeSquare(sideSize: number): ILine[] {\r\n    return computeRectangle({ width: sideSize, height: sideSize });\r\n}\r\n\r\nfunction computeRectangle(size: ISize): ILine[] {\r\n    return [\r\n        { from: { x: -0.5 * size.width, y: -0.5 * size.height }, to: { x: +0.5 * size.width, y: -0.5 * size.height } },\r\n        { from: { x: +0.5 * size.width, y: -0.5 * size.height }, to: { x: +0.5 * size.width, y: +0.5 * size.height } },\r\n        { from: { x: +0.5 * size.width, y: +0.5 * size.height }, to: { x: -0.5 * size.width, y: +0.5 * size.height } },\r\n        { from: { x: -0.5 * size.width, y: +0.5 * size.height }, to: { x: -0.5 * size.width, y: -0.5 * size.height } },\r\n    ];\r\n}\r\n\r\nfunction mainDebugCollisions(): void {\r\n    const plotter = new PlotterCanvas2D();\r\n\r\n    type DrawFunction = (items: PatternBase[]) => unknown;\r\n    function getDrawFunction(): DrawFunction {\r\n        const primitive = Parameters.primitive;\r\n        if (primitive === EPrimitive.SQUARE) {\r\n            return (items: PatternBase[]) => plotter.drawSquares(items as PatternSquare[]);\r\n        } else if (primitive === EPrimitive.CIRCLE) {\r\n            return (items: PatternBase[]) => plotter.drawCircles(items as PatternCircle[]);\r\n        } else if (primitive === EPrimitive.RECTANGLE) {\r\n            return (items: PatternBase[]) => plotter.drawRectangles(items as PatternRectangle[]);\r\n        } else { // if (primitive === EPrimitive.TRIANGLE) {\r\n            return (items: PatternBase[]) => plotter.drawTriangles(items as PatternTriangle[]);\r\n        }\r\n    }\r\n\r\n    let zoomFactor = 1;\r\n    Page.Canvas.Observers.mouseWheel.push((delta: number) => {\r\n        zoomFactor += 0.1 * delta;\r\n        zoomFactor = Math.max(0.2, Math.min(10, zoomFactor));\r\n    });\r\n    function mainLoop(): void {\r\n        const currentTestType = Parameters.currentCollisionType;\r\n\r\n        const testitems = getCurrentTestItems();\r\n\r\n        const canvasSize = Page.Canvas.getSize();\r\n        const minCanvasSide = Math.min(canvasSize[0], canvasSize[1]);\r\n        const mousePosRelative = Page.Canvas.getMousePosition();\r\n        testitems.mobile.center.x = (mousePosRelative[0] - 0.5) * canvasSize[0];\r\n        testitems.mobile.center.y = (mousePosRelative[1] - 0.5) * canvasSize[1];\r\n        testitems.fixed.center.x = 0;\r\n        testitems.fixed.center.y = 0;\r\n        testitems.fixed.size = 0.5 * zoomFactor * minCanvasSide;\r\n\r\n        const drawFunction = getDrawFunction();\r\n        if (currentTestType === ECollisionTestType.PRIMITIVE) {\r\n            // bracket notations allows access to private fields/method while still keeping a bit of type checking\r\n            testitems.mobile.size = testitems.mobile[\"computeBiggestSizePossibleToAvoidItem\"](testitems.fixed, true).size;\r\n\r\n            const lines = computeSquare(testitems.fixed.size);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.fixed, testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        } else if (currentTestType === ECollisionTestType.POINT) {\r\n            // bracket notations allows access to private fields/method while still keeping a bit of type checking\r\n            testitems.mobile.size = testitems.mobile[\"computeBiggestSizePossibleToAvoidPoint\"]({ x: 0, y: 0 });\r\n\r\n            const lines = computeSquare(0.5);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        } else {\r\n            testitems.mobile.size = 0.2 * zoomFactor * minCanvasSide;\r\n\r\n            const domainSize: ISize = { width: 0.5 * canvasSize[0], height: 0.5 * canvasSize[1] };\r\n            const visibility = testitems.mobile.computeVisibility(domainSize);\r\n            if (visibility === EVisibility.COVERS_VIEW) {\r\n                console.log(\"covers view\");\r\n            } else if (visibility === EVisibility.OUT_OF_VIEW) {\r\n                console.log(\"out of view\");\r\n            } else {\r\n                console.log(\"visible\");\r\n            }\r\n\r\n            const lines = computeRectangle(domainSize);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nexport { mainDebugCollisions }\r\n","import { EPrimitive, Parameters } from \"./parameters\";\r\n\r\nimport { EVisibility, PatternBase } from \"./patterns/pattern-base\";\r\nimport { PatternCircle } from \"./patterns/pattern-circle\";\r\nimport { PatternRectangle } from \"./patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"./patterns/pattern-square\";\r\nimport { PatternTriangle } from \"./patterns/pattern-triangle\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\n\r\nimport { Grid } from \"./space-grid/grid\";\r\n\r\nimport { Color } from \"./utils/color\";\r\nimport { ISize } from \"./utils/i-size\";\r\nimport { IPoint } from \"./utils/i-point\";\r\nimport { NumberRange } from \"./utils/number-range\";\r\n\r\nimport * as Statistics from \"./statistics/statistics\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nclass Engine {\r\n    private initializedItemsList: PatternBase[]; // stored in the order they must be drawn.\r\n    private uninitializedItemsList: PatternBase[]; // stored in no particular order\r\n    private lastRecyclingTime: number;\r\n\r\n    private currentPrimitive: EPrimitive;\r\n    private createItem: () => PatternBase;\r\n\r\n    private grid: Grid; // used to index the items' positions for faster recycling\r\n\r\n    private zoomCenter: IPoint;\r\n\r\n    private backgroundColorOverride: Color;\r\n    private backgroundNestingLevel: number;\r\n\r\n    public constructor() {\r\n        this.initializedItemsList = [];\r\n        this.uninitializedItemsList = [];\r\n        this.lastRecyclingTime = 0;\r\n\r\n        this.zoomCenter = { x: 0, y: 0 }; // canvas center\r\n        this.backgroundColorOverride = null;\r\n        this.backgroundNestingLevel = 0;\r\n    }\r\n\r\n    public reset(): void {\r\n        const primitive = Parameters.primitive;\r\n\r\n        if (primitive === EPrimitive.SQUARE) {\r\n            this.createItem = () => new PatternSquare();\r\n        } else if (primitive === EPrimitive.CIRCLE) {\r\n            this.createItem = () => new PatternCircle();\r\n        } else if (primitive === EPrimitive.RECTANGLE) {\r\n            this.createItem = () => new PatternRectangle();\r\n        } else if (primitive === EPrimitive.TRIANGLE) {\r\n            this.createItem = () => new PatternTriangle();\r\n        } else {\r\n            throw new Error(`Invalid primitive \"${primitive}.`);\r\n        }\r\n\r\n        this.initializedItemsList = [];\r\n        this.uninitializedItemsList = [];\r\n        this.currentPrimitive = primitive;\r\n        this.backgroundColorOverride = null;\r\n        this.backgroundNestingLevel = 0;\r\n        this.zoomCenter.x = 0;\r\n        this.zoomCenter.y = 0;\r\n    }\r\n\r\n    public setItemsCount(wantedCount: number): void {\r\n        const initializedCount = this.initializedItemsList.length;\r\n        const uninitializedCount = this.uninitializedItemsList.length;\r\n\r\n        const totalItemsCount = initializedCount + uninitializedCount;\r\n        if (wantedCount > totalItemsCount) { // items to add\r\n            const itemsToAdd = wantedCount - totalItemsCount;\r\n            for (let i = 0; i < itemsToAdd; i++) {\r\n                const newItem = this.createItem();\r\n                this.uninitializedItemsList.push(newItem);\r\n            }\r\n        } else if (wantedCount < totalItemsCount) { // items to remove\r\n            if (wantedCount > initializedCount) {\r\n                this.uninitializedItemsList.length = wantedCount - initializedCount;\r\n            } else {\r\n                this.uninitializedItemsList = [];\r\n                this.initializedItemsList.length = wantedCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(plotter: PlotterBase): boolean {\r\n        PatternBase.baseNestingLevel = this.backgroundNestingLevel;\r\n        PatternBase.additionalNestingLevelForColor = (Parameters.blackBackground) ? 0 : 1;\r\n        PatternBase.highContrastColor = Parameters.highContrast;\r\n\r\n        let everythingDrawn = plotter.isReady;\r\n        if (!Parameters.isZooming) {\r\n            const timeSinceLastRecycling = performance.now() - this.lastRecyclingTime;\r\n            const blendingOver = timeSinceLastRecycling > PatternBase.maxBlendingTime;\r\n            if (!blendingOver) {\r\n                everythingDrawn = false;\r\n            }\r\n        }\r\n\r\n        const backgroundColor = this.computeBackgroundColor();\r\n        plotter.initialize(backgroundColor);\r\n\r\n        let itemsToDraw: PatternBase[];\r\n        if (Parameters.oneCellOnly) {\r\n            itemsToDraw = this.grid.getItemsFromCell(Parameters.cellX, Parameters.cellY);\r\n        } else {\r\n            itemsToDraw = this.initializedItemsList;\r\n        }\r\n\r\n        if (this.currentPrimitive === EPrimitive.SQUARE) {\r\n            plotter.drawSquares(itemsToDraw as PatternSquare[]);\r\n        } else if (this.currentPrimitive === EPrimitive.CIRCLE) {\r\n            plotter.drawCircles(itemsToDraw as PatternCircle[]);\r\n        } else if (this.currentPrimitive === EPrimitive.RECTANGLE) {\r\n            plotter.drawRectangles(itemsToDraw as PatternRectangle[]);\r\n        } else if (this.currentPrimitive === EPrimitive.TRIANGLE) {\r\n            plotter.drawTriangles(itemsToDraw as PatternTriangle[]);\r\n        }\r\n\r\n        if (Parameters.showGrid) {\r\n            this.grid.draw(plotter);\r\n        }\r\n\r\n        plotter.finalize();\r\n\r\n        return everythingDrawn;\r\n    }\r\n\r\n    /** @returns true if the update changed something that requires a redraw */\r\n    public udpate(deltaTimeInSeconds: number, domainSize: ISize): boolean {\r\n        const mayRecycle = this.uninitializedItemsList.length > 0;\r\n        const willZoom = this.initializedItemsList.length > 0 && Parameters.isZooming;\r\n        const needToInitializeGrid = typeof this.grid === \"undefined\";\r\n        const needUpdate = mayRecycle || willZoom || needToInitializeGrid;\r\n        if (!needUpdate) {\r\n            return false;\r\n        }\r\n\r\n        let requiresRedraw = false;\r\n\r\n        Statistics.timeSpentInReindex.start();\r\n        const gridChanged = this.reindexItems(domainSize);\r\n        requiresRedraw = requiresRedraw || gridChanged;\r\n        Statistics.timeSpentInReindex.stop();\r\n\r\n        Statistics.timeSpentInRecycle.start();\r\n        const itemsRecycled = this.performRecycling(domainSize);\r\n        requiresRedraw = requiresRedraw || itemsRecycled;\r\n        if (itemsRecycled) {\r\n            this.lastRecyclingTime = performance.now();\r\n        }\r\n        Statistics.timeSpentInRecycle.stop();\r\n\r\n        Statistics.timeSpentInZoom.start();\r\n        if (Parameters.isZooming) {\r\n            const itemsMoved = (this.initializedItemsList.length > 0);\r\n            this.performZoom(deltaTimeInSeconds, domainSize);\r\n            requiresRedraw = requiresRedraw || itemsMoved;\r\n        }\r\n        Statistics.timeSpentInZoom.stop();\r\n\r\n        return requiresRedraw;\r\n    }\r\n\r\n    /**\r\n     * @param domainSize in pixels\r\n     * @param cellSize in pixels\r\n     * @returns true if a redraw is required\r\n     */\r\n    private reindexItems(domainSize: ISize): boolean {\r\n        if (typeof this.grid === \"undefined\") {\r\n            this.grid = new Grid();\r\n        }\r\n\r\n        let gridCellSize = Parameters.cellSize;\r\n        if (Parameters.adaptativeGrid) {\r\n            const targetItemsPerCell = Parameters.targetItemsPerGridCell;\r\n            const lastItemsPerCell = this.grid.itemsPerCell;\r\n            gridCellSize = this.grid.cellSize;\r\n            if (lastItemsPerCell < targetItemsPerCell) {\r\n                gridCellSize++;\r\n            } else {\r\n                gridCellSize--;\r\n            }\r\n        }\r\n\r\n        return this.grid.reset(domainSize, gridCellSize, this.initializedItemsList);\r\n    }\r\n\r\n    private performRecycling(domainSize: ISize): boolean {\r\n        let nbItemsRecycled = 0;\r\n\r\n        const allowOverlapping = Parameters.allowOverlapping;\r\n        const sizeFactor = 1 - Parameters.spacing;\r\n        const acceptedSizesForNewItems = new NumberRange(Parameters.minSize, 1000000);\r\n        const maxTries = Parameters.maxTriesPerFrame;\r\n\r\n        let triesLeft = maxTries;\r\n        while (this.uninitializedItemsList.length > 0 && triesLeft > 0) {\r\n            const currentItem = this.uninitializedItemsList.pop();\r\n\r\n            const resetResult = currentItem.reset(domainSize, this.grid, sizeFactor, acceptedSizesForNewItems, allowOverlapping, triesLeft);\r\n            triesLeft -= resetResult.nbTries;\r\n            if (resetResult.success) {\r\n                this.initializedItemsList.push(currentItem);\r\n                this.grid.registerItem(currentItem);\r\n                nbItemsRecycled++;\r\n            } else {\r\n                this.uninitializedItemsList.push(currentItem);\r\n            }\r\n        }\r\n\r\n        const totalItemsCount = this.initializedItemsList.length + this.uninitializedItemsList.length;\r\n        const nbPendingRecycling = this.uninitializedItemsList.length;\r\n        const nbTriesUsed = maxTries - triesLeft;\r\n        Statistics.registerRecyclingStats(totalItemsCount, nbItemsRecycled, nbPendingRecycling, nbTriesUsed);\r\n        this.grid.computeStatistics();\r\n\r\n        return nbItemsRecycled > 0;\r\n    }\r\n\r\n    /**\r\n     * Performs zoom on initialized items.\r\n     * During zooming, items might go out of view. In that case:\r\n     *   - these items are added to the uninitializedItemsList\r\n     *   - these items are removed from the initializedItemsList\r\n     * Does not modify the order of the initializedItemsList.\r\n     * @returns true if something changed and requires a redraw\r\n     */\r\n    private performZoom(deltaTimeInSeconds: number, domainSize: ISize): void {\r\n        this.updateZoomCenter(domainSize);\r\n\r\n        const newInitializedArray: PatternBase[] = [];\r\n\r\n        const zoomSpeed = 1 + deltaTimeInSeconds * Parameters.zoomSpeed;\r\n        for (const item of this.initializedItemsList) {\r\n            item.zoomIn(this.zoomCenter, zoomSpeed);\r\n\r\n            let visibility: EVisibility;\r\n            if (item.size > PatternBase.MAX_SIZE) {\r\n                visibility = EVisibility.OUT_OF_VIEW;\r\n            } else {\r\n                visibility = item.computeVisibility(domainSize);\r\n            }\r\n\r\n            if (visibility === EVisibility.VISIBLE) {\r\n                newInitializedArray.push(item);\r\n            } else {\r\n                this.uninitializedItemsList.push(item); // recycle item\r\n\r\n                if (visibility === EVisibility.COVERS_VIEW) {\r\n                    this.backgroundColorOverride = item.rawColor; // overrite current background to make the illusion that we are still in the item\r\n                    this.backgroundNestingLevel = item.nestingLevel % 2; // modulus to avoid rounding errors with higher nestings\r\n                    PatternBase.baseNestingLevel = this.backgroundNestingLevel;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.initializedItemsList = newInitializedArray;\r\n    }\r\n\r\n    private computeBackgroundColor(): Color {\r\n        if (Parameters.highContrast) {\r\n            if (Parameters.blackBackground) {\r\n                return (this.backgroundNestingLevel % 2 === 0) ? Color.BLACK : Color.WHITE;\r\n            } else {\r\n                return (this.backgroundNestingLevel % 2 === 0) ? Color.WHITE : Color.BLACK;\r\n            }\r\n        } else {\r\n            if (this.backgroundColorOverride !== null) {\r\n                return this.backgroundColorOverride;\r\n            }\r\n            return Parameters.blackBackground ? Color.BLACK : Color.WHITE;\r\n        }\r\n    }\r\n\r\n    private updateZoomCenter(domainSize: ISize): void {\r\n        if (Page.Canvas.isMouseDown()) {\r\n            const mousePosition = Page.Canvas.getMousePosition(); // in [0,1]^2\r\n            this.zoomCenter.x = domainSize.width * (mousePosition[0] - 0.5);\r\n            this.zoomCenter.y = domainSize.height * (mousePosition[1] - 0.5);\r\n        }\r\n\r\n        const halfWidth = 0.5 * domainSize.width;\r\n        const halfHeight = 0.5 * domainSize.height;\r\n\r\n        if (this.zoomCenter.x < -halfWidth) {\r\n            this.zoomCenter.x = -halfWidth\r\n        } else if (this.zoomCenter.x > halfWidth) {\r\n            this.zoomCenter.x = halfWidth;\r\n        }\r\n\r\n        if (this.zoomCenter.y < -halfHeight) {\r\n            this.zoomCenter.y = -halfHeight\r\n        } else if (this.zoomCenter.y > halfHeight) {\r\n            this.zoomCenter.y = halfHeight;\r\n        }\r\n    }\r\n}\r\n\r\nexport { Engine }\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\((.*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean)  => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", \"./shaders/\" + filename, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","import { GLResource } from \"./gl-resource\";\r\n\r\nenum Usage {\r\n    DYNAMIC,\r\n    STATIC,\r\n}\r\n\r\nclass VBO extends GLResource {\r\n    public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n        const vert = [\r\n            minX, minY,\r\n            maxX, minY,\r\n            minX, maxY,\r\n            maxX, maxY,\r\n        ];\r\n\r\n        return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT, true);\r\n    }\r\n\r\n    private id: WebGLBuffer;\r\n    private size: number;\r\n    private type: GLenum;\r\n    private normalize: GLboolean;\r\n    private stride: GLsizei;\r\n    private offset: GLintptr;\r\n    private usage: Usage;\r\n\r\n    constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum, staticUsage: boolean = true) {\r\n        super(gl);\r\n\r\n        this.id = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (staticUsage) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.size = size;\r\n        this.type = type;\r\n        this.normalize = false;\r\n        this.stride = 0;\r\n        this.offset = 0;\r\n        this.usage = (staticUsage) ? Usage.STATIC : Usage.DYNAMIC;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this.gl().deleteBuffer(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public bind(location: GLuint): void {\r\n        const gl = super.gl();\r\n        gl.enableVertexAttribArray(location);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n    }\r\n\r\n    public bindInstanced(location: GLuint, ext: ANGLE_instanced_arrays, divisor: number): void {\r\n        const gl = super.gl();\r\n        gl.enableVertexAttribArray(location);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n        ext.vertexAttribDivisorANGLE(location, divisor);\r\n    }\r\n\r\n    public setData(array: any): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (this.usage === Usage.STATIC) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n}\r\n\r\nexport { VBO };\r\n","import { Engine } from \"./engine\";\r\n\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterCanvasWebGL } from \"./plotter/plotter-canvas-webgl\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Statistics from \"./statistics/statistics\";\r\n\r\nimport * as Helper from \"./utils/helper\";\r\n\r\nimport { mainDebugCollisions } from \"./debug-collisions\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction main(): void {\r\n    const canvasPlotter = Parameters.isWebGLVersion ? new PlotterCanvasWebGL() : new PlotterCanvas2D();\r\n\r\n    const engine = new Engine();\r\n\r\n    let needToRedraw = true;\r\n\r\n    Parameters.addRedrawObserver(() => needToRedraw = true);\r\n    Parameters.addClearObserver(() => {\r\n        engine.reset();\r\n        needToRedraw = true;\r\n    });\r\n\r\n    Parameters.addDownloadObserver(() => {\r\n        const svgPlotter = new PlotterSVG(canvasPlotter.size);\r\n        engine.draw(svgPlotter);\r\n\r\n        const fileName = \"packing.svg\";\r\n        const svgString = svgPlotter.export();\r\n        Helper.downloadTextFile(fileName, svgString);\r\n    });\r\n\r\n    let lastRunTime = 0;\r\n    Statistics.initialize();\r\n    engine.reset();\r\n    function mainLoop(time: number): void {\r\n        Statistics.timeSpentInMainLoop.start();\r\n\r\n        const deltaTimeInSeconds = 0.001 * (time - lastRunTime);\r\n        lastRunTime = time;\r\n\r\n        const wantedItemsCount = 1000 * Parameters.quantity;\r\n        engine.setItemsCount(wantedItemsCount);\r\n\r\n        Statistics.timeSpentInUpdate.start();\r\n        const updateChangedSomething = engine.udpate(deltaTimeInSeconds, canvasPlotter.size);\r\n        needToRedraw = needToRedraw || updateChangedSomething;\r\n        Statistics.timeSpentInUpdate.stop();\r\n\r\n        if (needToRedraw) {\r\n            Statistics.timeSpentInDraw.start();\r\n            const successfulDraw = engine.draw(canvasPlotter);\r\n            Statistics.timeSpentInDraw.stop();\r\n\r\n            needToRedraw = !successfulDraw;\r\n        }\r\n\r\n        Statistics.timeSpentInMainLoop.stop();\r\n        Statistics.registerFrame();\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nif (Parameters.isInCollisionsDebug) {\r\n    mainDebugCollisions();\r\n} else {\r\n    main();\r\n}\r\n","import * as Helpers from \"./utils/helper\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nconst controlId = {\r\n    PRIMITIVE: \"primitive-tab-id\",\r\n    RESET: \"reset-button-id\",\r\n    SPACING: \"spacing-range-id\",\r\n    MIN_SIZE: \"min-size-range-id\",\r\n    ALLOW_OVERLAPPING: \"allow-overlapping-checkbox-id\",\r\n    QUANTITY: \"quantity-range-id\",\r\n    ZOOM_SPEED: \"zoom-speed-range-id\",\r\n    BLACK_BACKGROUND: \"black-background-checkbox-id\",\r\n    BLENDING: \"blending-checkbox-id\",\r\n    HIGH_CONTRAST: \"high-contrast-checkbox-id\",\r\n    INDICATORS: \"indicators-checkbox-id\",\r\n\r\n    // DEBUG\r\n    MAX_TRIES_PER_FRAME: \"max-tries-per-frame-range-id\",\r\n    INSTANCING: \"instancing-checkbox-id\",\r\n    ADAPTATIVE_GRID: \"adaptative-grid-checkbox-id\",\r\n    TARGET_ITEMS_PER_GRIDCELL: \"target-items-per-gridcell-checkbox-id\",\r\n    CELL_SIZE: \"cell-size-range-id\",\r\n    ONE_CELL_ONLY: \"one-cell-only-checkbox-id\",\r\n    SHOW_GRID: \"show-grid-checkbox-id\",\r\n    CELL_X: \"cell-x-range-id\",\r\n    CELL_Y: \"cell-y-range-id\",\r\n    COLLISION_TEST_TYPE: \"collision-test-type-tab-id\",\r\n\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ALLOW_OVERLAPPING, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.BLACK_BACKGROUND, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.HIGH_CONTRAST, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ONE_CELL_ONLY, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.SHOW_GRID, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INSTANCING, triggerRedraw);\r\nPage.Range.addObserver(controlId.QUANTITY, triggerRedraw);\r\nPage.Range.addObserver(controlId.CELL_X, triggerRedraw);\r\nPage.Range.addObserver(controlId.CELL_Y, triggerRedraw);\r\n\r\ntype ClearObserver = () => unknown;\r\nconst clearObservers: ClearObserver[] = [];\r\nfunction triggerClear(): void {\r\n    for (const observer of clearObservers) {\r\n        observer();\r\n    }\r\n}\r\nPage.Button.addObserver(controlId.RESET, triggerClear);\r\nPage.Tabs.addObserver(controlId.PRIMITIVE, triggerClear);\r\nPage.Range.addObserver(controlId.SPACING, () => {\r\n    if (!Parameters.isZooming) {\r\n        triggerClear();\r\n    }\r\n});\r\nPage.Range.addObserver(controlId.MIN_SIZE, () => {\r\n    if (!Parameters.isZooming) {\r\n        triggerClear();\r\n    }\r\n});\r\n\r\nenum EPrimitive {\r\n    SQUARE = \"square\",\r\n    CIRCLE = \"circle\",\r\n    RECTANGLE = \"rectangle\",\r\n    TRIANGLE = \"triangle\",\r\n}\r\n\r\nenum ECollisionTestType {\r\n    PRIMITIVE = \"primitive\",\r\n    POINT = \"point\",\r\n    VISIBILITY = \"visbility\",\r\n}\r\n\r\nconst isInDebug = Helpers.getQueryStringValue(\"debug\") === \"1\";\r\nconst isInCollisionsDebug = Helpers.getQueryStringValue(\"debug-collisions\") === \"1\";\r\nPage.Sections.setVisibility(\"display-section\", !isInCollisionsDebug);\r\nPage.Sections.setVisibility(\"debug-section\", isInDebug && !isInCollisionsDebug);\r\nPage.Sections.setVisibility(\"debug-collisions-section\", isInDebug && isInCollisionsDebug);\r\nPage.Canvas.setIndicatorVisibility(\"main-loop-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"draw-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-reindex-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-recycle-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-zoom-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-reclycled-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-pending-recycling-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-recycling-tries-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-size\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-cell-size\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-items-per-cell\", isInDebug);\r\n\r\nif (isInDebug) {\r\n    Page.Checkbox.setChecked(controlId.INDICATORS, true);\r\n} else {\r\n    Page.Checkbox.setChecked(controlId.ONE_CELL_ONLY, false);\r\n    Page.Checkbox.setChecked(controlId.SHOW_GRID, false);\r\n}\r\n\r\nconst isWebGLVersion = Helpers.getQueryStringValue(\"webgl\") !== \"0\";\r\nif (!isWebGLVersion) {\r\n    Page.Checkbox.setChecked(controlId.BLENDING, false);\r\n    Page.Controls.setVisibility(controlId.BLENDING, false);\r\n    Page.Controls.setVisibility(controlId.INSTANCING, false);\r\n}\r\n\r\nfunction updateIndicatorsVisibility(): void {\r\n    const visible = !isInCollisionsDebug && Page.Checkbox.isChecked(controlId.INDICATORS);\r\n    Page.Canvas.setIndicatorsVisibility(visible);\r\n}\r\nPage.Checkbox.addObserver(controlId.INDICATORS, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nfunction updateGridControlsVisibility(): void {\r\n    const adaptative = Page.Checkbox.isChecked(controlId.ADAPTATIVE_GRID);\r\n    Page.Controls.setVisibility(controlId.TARGET_ITEMS_PER_GRIDCELL, adaptative);\r\n    Page.Controls.setVisibility(controlId.CELL_SIZE, !adaptative);\r\n}\r\nPage.Checkbox.addObserver(controlId.ADAPTATIVE_GRID, updateGridControlsVisibility);\r\nupdateGridControlsVisibility();\r\n\r\nPage.Button.addObserver(\"debug-collisions-button-id\", () => {\r\n    window.location.href = window.location.href + \"&debug-collisions=1\";\r\n});\r\n\r\nabstract class Parameters {\r\n    public static get quantity(): number {\r\n        return Page.Range.getValue(controlId.QUANTITY);\r\n    }\r\n\r\n    public static get spacing(): number {\r\n        return Page.Range.getValue(controlId.SPACING);\r\n    }\r\n\r\n    public static get minSize(): number {\r\n        return Page.Range.getValue(controlId.MIN_SIZE);\r\n    }\r\n\r\n    public static get allowOverlapping(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ALLOW_OVERLAPPING);\r\n    }\r\n\r\n    public static get primitive(): EPrimitive {\r\n        return Page.Tabs.getValues(controlId.PRIMITIVE)[0] as EPrimitive;\r\n    }\r\n\r\n    public static get zoomSpeed(): number {\r\n        return Page.Range.getValue(controlId.ZOOM_SPEED);\r\n    }\r\n    public static get isZooming(): boolean {\r\n        return Math.abs(Parameters.zoomSpeed) > .001; // avoid float precision issues\r\n    }\r\n\r\n    public static get blackBackground(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.BLACK_BACKGROUND);\r\n    }\r\n\r\n    public static get blending(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.BLENDING);\r\n    }\r\n\r\n    public static get highContrast(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.HIGH_CONTRAST);\r\n    }\r\n\r\n    public static get isInDebug(): boolean {\r\n        return isInDebug;\r\n    }\r\n    public static get isInCollisionsDebug(): boolean {\r\n        return isInCollisionsDebug;\r\n    }\r\n    public static get isWebGLVersion(): boolean {\r\n        return isWebGLVersion;\r\n    }\r\n\r\n    /* === DEBUG SECTION === */\r\n\r\n    public static get maxTriesPerFrame(): number {\r\n        return 100 * Page.Range.getValue(controlId.MAX_TRIES_PER_FRAME);\r\n    }\r\n    public static get adaptativeGrid(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ADAPTATIVE_GRID);\r\n    }\r\n    public static get targetItemsPerGridCell(): number {\r\n        return Page.Range.getValue(controlId.TARGET_ITEMS_PER_GRIDCELL);\r\n    }\r\n    public static get cellSize(): number {\r\n        return Page.Range.getValue(controlId.CELL_SIZE);\r\n    }\r\n    public static get oneCellOnly(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ONE_CELL_ONLY);\r\n    }\r\n    public static get showGrid(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_GRID);\r\n    }\r\n    public static get cellX(): number {\r\n        return Page.Range.getValue(controlId.CELL_X);\r\n    }\r\n    public static get cellY(): number {\r\n        return Page.Range.getValue(controlId.CELL_Y);\r\n    }\r\n\r\n    public static get useInstancing(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INSTANCING);\r\n    }\r\n    public static disallowInstancing(): void {\r\n        Page.Checkbox.setChecked(controlId.INSTANCING, false);\r\n        Page.Controls.setVisibility(controlId.INSTANCING, false);\r\n    }\r\n\r\n    public static get currentCollisionType(): ECollisionTestType {\r\n        return Page.Tabs.getValues(controlId.COLLISION_TEST_TYPE)[0] as ECollisionTestType;\r\n    }\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static addClearObserver(callback: ClearObserver): void {\r\n        clearObservers.push(callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters, EPrimitive, ECollisionTestType }\r\n","import { Color } from \"../utils/color\";\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { Grid } from \"../space-grid/grid\";\r\n\r\nimport { NumberRange } from \"../utils/number-range\";\r\nimport { Parameters } from \"../parameters\";\r\n\r\nconst CANVAS_CENTER: IPoint = { x: 0, y: 0 };\r\n\r\nconst MAX_TEST_ID = 999999999999; // lower (for extra safety) than Number.MAX_SAFE_INTEGER (which is not supported by IE11)\r\nlet globalLastTestId = 1;\r\n\r\nfunction generateTestId(): number {\r\n    globalLastTestId = (globalLastTestId + 1) % MAX_TEST_ID;\r\n    return globalLastTestId;\r\n}\r\n\r\ninterface IPatternResetResult {\r\n    success: boolean;\r\n    nbTries: number;\r\n}\r\n\r\ninterface ISizeComputationResult {\r\n    size: number;\r\n    isInside: boolean;\r\n}\r\n\r\nenum EVisibility {\r\n    VISIBLE = 0,\r\n    OUT_OF_VIEW = 1,\r\n    COVERS_VIEW = 2,\r\n}\r\n\r\nabstract class PatternBase {\r\n    public static baseNestingLevel: number = 0;\r\n    public static additionalNestingLevelForColor: number = 0;\r\n    public static highContrastColor: boolean = false;\r\n\r\n\r\n    /* When an item is too big, it can lead to visual glitches due to float precision issue on GPU.\r\n     *  To avoid this, remove items that are too big. */\r\n    public static readonly MAX_SIZE: number = 1000000;\r\n\r\n    private static readonly MAX_SIZE_LOWER: number = 0.75 * PatternBase.MAX_SIZE;\r\n    private static readonly MAX_SIZE_GAP: number = PatternBase.MAX_SIZE - PatternBase.MAX_SIZE_LOWER;\r\n\r\n    public static get maxBlendingTime(): number {\r\n        if (Parameters.blending) {\r\n            return 500 / (1 + Parameters.zoomSpeed);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public center: IPoint;\r\n    public size: number;\r\n    public nestingLevel: number;\r\n    public readonly rawColor: Color;\r\n\r\n    private lastTestId: number;\r\n    private initializationTime: number;\r\n\r\n    protected constructor() {\r\n        this.center = { x: 0, y: 0 };\r\n        this.size = 0;\r\n        this.nestingLevel = PatternBase.baseNestingLevel + 1;\r\n        this.rawColor = Color.random();\r\n        this.lastTestId = 0;\r\n    }\r\n\r\n    public get color(): Color {\r\n        if (PatternBase.highContrastColor) {\r\n            return ((this.nestingLevel + PatternBase.additionalNestingLevelForColor) % 2 === 0) ? Color.BLACK : Color.WHITE;\r\n        }\r\n        return this.rawColor;\r\n    }\r\n\r\n    public zoomIn(zoomCenter: IPoint, zoomFactor: number): void {\r\n        this.center.x = (this.center.x - zoomCenter.x) * zoomFactor + zoomCenter.x;\r\n        this.center.y = (this.center.y - zoomCenter.y) * zoomFactor + zoomCenter.y;\r\n        this.size *= zoomFactor;\r\n    }\r\n\r\n    /** @returns the number of tries (regardless of the success of the reset) */\r\n    public reset(domainSize: ISize, grid: Grid, sizeFactor: number, acceptedSizes: NumberRange, allowOverlapping: boolean, maxTries: number): IPatternResetResult {\r\n        const result: IPatternResetResult = {\r\n            nbTries: 0,\r\n            success: false,\r\n        };\r\n\r\n        while (result.nbTries < maxTries && !result.success) {\r\n            this.randomizePosition(domainSize);\r\n            this.nestingLevel = PatternBase.baseNestingLevel + 1;\r\n\r\n            const maxSize = sizeFactor * this.computeBiggestSizePossible(grid, allowOverlapping);\r\n            if (acceptedSizes.isInRange(maxSize)) {\r\n                this.size = 2 * Math.floor(0.5 * maxSize); // need to be even to avoid aliasing\r\n                this.initializationTime = performance.now();\r\n                result.success = true;\r\n            }\r\n\r\n            result.nbTries++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeOpacity(time: number, blendTime: number): number {\r\n        if (this.size > PatternBase.MAX_SIZE_LOWER) {\r\n            const r = (this.size - PatternBase.MAX_SIZE_LOWER) / PatternBase.MAX_SIZE_GAP;\r\n            return (r > 1) ? 0 : 1 - r;\r\n        }\r\n\r\n        const lifetime = time - this.initializationTime;\r\n        if (lifetime > blendTime) {\r\n            return 1;\r\n        }\r\n        return lifetime / blendTime;\r\n    }\r\n\r\n    protected abstract computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number;\r\n\r\n    protected abstract computeBiggestSizePossibleToAvoidItem(itemsToAvoid: PatternBase, allowOverlapping: boolean): ISizeComputationResult;\r\n\r\n    public abstract computeVisibility(domainSize: ISize): EVisibility;\r\n\r\n    private computeBiggestSizePossible(grid: Grid, allowOverlapping: boolean): number {\r\n        const currentTestId = generateTestId();\r\n\r\n        const biggestSizeToAvoidCenter = this.computeBiggestSizePossibleToAvoidPoint(CANVAS_CENTER);\r\n        let rawMaxSize = biggestSizeToAvoidCenter;\r\n\r\n        // first, test only existing items that are in the exact same grid cell as us\r\n        const maxDistanceDetectableByExactCell = grid.getDistanceToClosestBorder(this.center);\r\n\r\n        const exactCellId = grid.getCellId(this.center);\r\n        const existingItemsFromExactCell = grid.getItemsFromCell(exactCellId.x, exactCellId.y);\r\n        const biggestSizeToAvoidClosestItems = this.computeBiggestSizePossibleToAvoidItems(existingItemsFromExactCell, allowOverlapping, currentTestId);\r\n        rawMaxSize = Math.min(rawMaxSize, biggestSizeToAvoidClosestItems);\r\n\r\n        // the closest items were maybe not enough, test items that are a bit further\r\n        if (rawMaxSize >= maxDistanceDetectableByExactCell) {\r\n            const topLeftPoint: IPoint = { x: this.center.x - 0.5 * rawMaxSize, y: this.center.y - 0.5 * rawMaxSize };\r\n            const bottomRightPoint: IPoint = { x: this.center.x + 0.5 * rawMaxSize, y: this.center.y + 0.5 * rawMaxSize };\r\n            const minCellId = grid.getCellId(topLeftPoint);\r\n            const maxCellId = grid.getCellId(bottomRightPoint);\r\n\r\n            const additionalItemsToTest = grid.getItemsFromCellsGroup(minCellId.x, minCellId.y, maxCellId.x, maxCellId.y);\r\n            const biggestSizeToAvoidFurtherItems = this.computeBiggestSizePossibleToAvoidItems(additionalItemsToTest, allowOverlapping, currentTestId);\r\n            rawMaxSize = Math.min(rawMaxSize, biggestSizeToAvoidFurtherItems);\r\n        }\r\n\r\n        return rawMaxSize;\r\n    }\r\n\r\n    private computeBiggestSizePossibleToAvoidItems(itemsToAvoid: PatternBase[], allowOverlapping: boolean, currentTestId: number): number {\r\n        let maxSize = 100000;\r\n\r\n        for (const item of itemsToAvoid) {\r\n            if (item !== this) {\r\n                const testedAlready = (item.lastTestId === currentTestId);\r\n                if (!testedAlready) {\r\n                    const result = this.computeBiggestSizePossibleToAvoidItem(item, allowOverlapping);\r\n                    if (result.size < maxSize) {\r\n                        maxSize = result.size;\r\n\r\n                        if (result.isInside) {\r\n                            this.nestingLevel = item.nestingLevel + 1;\r\n                        }\r\n                    }\r\n                    item.lastTestId = currentTestId;\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxSize;\r\n    }\r\n\r\n    private randomizePosition(domainSize: ISize): void {\r\n        this.center.x = Math.round(domainSize.width * (Math.random() - 0.5));\r\n        this.center.y = Math.round(domainSize.height * (Math.random() - 0.5));\r\n    }\r\n}\r\n\r\nexport { PatternBase, EVisibility, ISizeComputationResult }\r\n","import { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nclass PatternCircle extends PatternBase {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n        return 2 * Math.sqrt(toPointX * toPointX + toPointY * toPointY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternCircle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const toCenterX = this.center.x - itemToAvoid.center.x;\r\n        const toCenterY = this.center.y - itemToAvoid.center.y;\r\n\r\n        const distance = Math.sqrt(toCenterX * toCenterX + toCenterY * toCenterY);\r\n\r\n        if (distance <= itemToAvoid.radius) {\r\n            if (allowOverlapping) {\r\n                result.size = 2 * (itemToAvoid.radius - distance);\r\n                result.isInside = true;\r\n            }\r\n        } else {\r\n            result.size = 2 * (distance - itemToAvoid.radius);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const dX = absX + halfDomainWidth;\r\n        const dY = absY + halfDomainHeight;\r\n\r\n        const radius = this.radius;\r\n        if (radius * radius > dX * dX + dY * dY) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - radius < halfDomainWidth && absY - radius < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    public get radius(): number {\r\n        return 0.5 * this.size;\r\n    }\r\n}\r\n\r\nexport { PatternCircle }\r\n","import { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nconst ASPECT_RATIO_VARIATION = 0.5; // must be in [0,1]\r\n\r\nclass PatternRectangle extends PatternBase {\r\n    private readonly baseWidth: number; // in [0,1]\r\n    private readonly baseHeight: number; // in [0,1]\r\n    public readonly aspectRatio: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.aspectRatio = 1 + ASPECT_RATIO_VARIATION * (2 * Math.random() - 1);\r\n        if (this.aspectRatio >= 1) {\r\n            this.baseWidth = 1;\r\n            this.baseHeight = 1 / this.aspectRatio;\r\n        } else {\r\n            this.baseWidth = this.aspectRatio;\r\n            this.baseHeight = 1;\r\n        }\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n\r\n        const maxSizeX = Math.abs(toPointX) / this.baseWidth;\r\n        const maxSizeY = Math.abs(toPointY) / this.baseHeight;\r\n        return 2 * Math.max(maxSizeX, maxSizeY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternRectangle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const deltaX = Math.abs(this.center.x - itemToAvoid.center.x);\r\n        const deltaY = Math.abs(this.center.y - itemToAvoid.center.y);\r\n\r\n        const halfObstacleWidth = 0.5 * itemToAvoid.width;\r\n        const halfObstacleHeight = 0.5 * itemToAvoid.height;\r\n\r\n        if (deltaX < halfObstacleWidth) {\r\n            if (deltaY < halfObstacleHeight) {\r\n                if (allowOverlapping) {\r\n                    result.size = 2 * Math.min((halfObstacleWidth - deltaX) / this.baseWidth, (halfObstacleHeight - deltaY) / this.baseHeight);\r\n                    result.isInside = true;\r\n                }\r\n            } else {\r\n                result.size = 2 * (deltaY - halfObstacleHeight) / this.baseHeight;\r\n            }\r\n        } else {\r\n            if (deltaY < halfObstacleHeight) {\r\n                result.size = 2 * (deltaX - halfObstacleWidth) / this.baseWidth;\r\n            } else {\r\n                result.size = 2 * Math.max((deltaX - halfObstacleWidth) / this.baseWidth, (deltaY - halfObstacleHeight) / this.baseHeight);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfWidth = 0.5 * this.size * this.baseWidth;\r\n        const halfHeight = 0.5 * this.size * this.baseHeight;\r\n\r\n        if (absX + halfDomainWidth < halfWidth && absY + halfDomainHeight < halfHeight) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfWidth < halfDomainWidth && absY - halfHeight < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.size * this.baseWidth;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.size * this.baseHeight;\r\n    }\r\n}\r\n\r\nexport { PatternRectangle }\r\n","import { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nclass PatternSquare extends PatternBase {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n\r\n        const maxSizeX = Math.abs(toPointX);\r\n        const maxSizeY = Math.abs(toPointY);\r\n        return 2 * Math.max(maxSizeX, maxSizeY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternSquare, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const deltaX = Math.abs(this.center.x - itemToAvoid.center.x);\r\n        const deltaY = Math.abs(this.center.y - itemToAvoid.center.y);\r\n        const halfSideLength = 0.5 * itemToAvoid.sideLength;\r\n\r\n        if (deltaX < halfSideLength) {\r\n            if (deltaY < halfSideLength) {\r\n                if (allowOverlapping) {\r\n                    result.size = 2 * Math.min(halfSideLength - deltaX, halfSideLength - deltaY);\r\n                    result.isInside = true;\r\n                }\r\n            } else {\r\n                result.size = 2 * (deltaY - halfSideLength);\r\n            }\r\n        } else {\r\n            if (deltaY < halfSideLength) {\r\n                result.size = 2 * (deltaX - halfSideLength);\r\n            } else {\r\n                result.size = 2 * Math.max(deltaX - halfSideLength, deltaY - halfSideLength);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfSize = 0.5 * this.size;\r\n\r\n        if (absX + halfDomainWidth < halfSize && absY + halfDomainHeight < halfSize) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfSize < halfDomainWidth && absY - halfSize < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    private get sideLength(): number {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport { PatternSquare }\r\n","import { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nfunction rotatePoint(point: IPoint, cosAngle: number, sinAngle: number): IPoint {\r\n    return {\r\n        x: point.x * cosAngle - point.y * sinAngle,\r\n        y: point.x * sinAngle + point.y * cosAngle,\r\n    };\r\n}\r\n\r\n/** Computes intersection between a segment and a semiline, both defined with parametric equations.\r\n * The first segment is defined with \"from1 + t1 * delta1\" for 0 <= t1 <= 2\r\n * The semi line is defined with \"0 + t2 * delta2\" for 0 <= t2\r\n * @returns if there is an intersection, t2 >= 0\r\n *          if there is no intersection, returns a negative value\r\n */\r\nfunction computeSegmentsIntersection(from1: IPoint, delta1: IPoint, delta2: IPoint): number {\r\n    const denom = delta2.y * delta1.x - delta1.y * delta2.x;\r\n    if (denom !== 0) {\r\n        const invDenom = 1 / denom;\r\n\r\n        const t1 = (delta2.x * from1.y - delta2.y * from1.x) * invDenom;\r\n        if (0 <= t1 && t1 <= 1) {\r\n            const t2 = (delta1.x * from1.y - delta1.y * from1.x) * invDenom;\r\n            return t2;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nconst MAX_NUMBER = 100000000;\r\nfunction minPositive(...args: number[]): number {\r\n    let min = MAX_NUMBER;\r\n    for (const arg of args) {\r\n        if (arg >= 0 && arg < min) {\r\n            min = arg;\r\n        }\r\n    }\r\n    return (min === MAX_NUMBER) ? -1 : min;\r\n}\r\n\r\nclass PatternTriangle extends PatternBase {\r\n    public readonly angle: number;\r\n\r\n    public static readonly baseP1: IPoint = { x: 0, y: -0.5 };\r\n    public static readonly baseP2: IPoint = { x: 0.5 * Math.cos(Math.PI * 7 / 6), y: -0.5 * Math.sin(Math.PI * 7 / 6) };\r\n    public static readonly baseP3: IPoint = { x: -0.5 * Math.cos(Math.PI * 7 / 6), y: -0.5 * Math.sin(Math.PI * 7 / 6) };\r\n\r\n    // rotated, with a size=1\r\n    public readonly P1: IPoint;\r\n    public readonly P2: IPoint;\r\n    public readonly P3: IPoint;\r\n\r\n    // with a size=1\r\n    public readonly P1_TO_P2: IPoint;\r\n    public readonly P2_TO_P3: IPoint;\r\n    public readonly P3_TO_P1: IPoint;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.angle = 2 * Math.PI * Math.random();\r\n\r\n        const cosAngle = Math.cos(this.angle);\r\n        const sinAngle = Math.sin(this.angle);\r\n        this.P1 = rotatePoint(PatternTriangle.baseP1, cosAngle, sinAngle);\r\n        this.P2 = rotatePoint(PatternTriangle.baseP2, cosAngle, sinAngle);\r\n        this.P3 = rotatePoint(PatternTriangle.baseP3, cosAngle, sinAngle);\r\n\r\n        this.P1_TO_P2 = { x: this.P2.x - this.P1.x, y: this.P2.y - this.P1.y };\r\n        this.P2_TO_P3 = { x: this.P3.x - this.P2.x, y: this.P3.y - this.P2.y };\r\n        this.P3_TO_P1 = { x: this.P1.x - this.P3.x, y: this.P1.y - this.P3.y };\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        if (pointToAvoid.x === this.center.x && pointToAvoid.y === this.center.y) {\r\n            return 0;\r\n        }\r\n\r\n        const pointToAvoidLocal = { x: pointToAvoid.x - this.center.x, y: pointToAvoid.y - this.center.y };\r\n\r\n        let intersection = computeSegmentsIntersection(this.P1, this.P1_TO_P2, pointToAvoidLocal);\r\n        if (intersection < 0) {\r\n            intersection = computeSegmentsIntersection(this.P2, this.P2_TO_P3, pointToAvoidLocal);\r\n            if (intersection < 0) {\r\n                intersection = computeSegmentsIntersection(this.P3, this.P3_TO_P1, pointToAvoidLocal);\r\n            }\r\n        }\r\n\r\n        if (intersection > 0) {\r\n            return 1 / intersection;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternTriangle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        if (itemToAvoid.isPointInside(this.center.x, this.center.y)) {\r\n            if (allowOverlapping) {\r\n                result.isInside = true;\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n\r\n        const localOtherP1: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P1.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P1.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const localOtherP2: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P2.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P2.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const localOtherP3: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P3.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P3.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const scaledOtherP1toP2: IPoint = {\r\n            x: itemToAvoid.P1_TO_P2.x * itemToAvoid.size,\r\n            y: itemToAvoid.P1_TO_P2.y * itemToAvoid.size,\r\n        };\r\n\r\n        const scaledOtherP2toP3: IPoint = {\r\n            x: itemToAvoid.P2_TO_P3.x * itemToAvoid.size,\r\n            y: itemToAvoid.P2_TO_P3.y * itemToAvoid.size,\r\n        };\r\n\r\n        const scaledOtherP3toP1: IPoint = {\r\n            x: itemToAvoid.P3_TO_P1.x * itemToAvoid.size,\r\n            y: itemToAvoid.P3_TO_P1.y * itemToAvoid.size,\r\n        };\r\n\r\n        // Check if a vertice of this may intersect a side of the other\r\n        let smallerTforMyVertices: number;\r\n        {\r\n            const T1_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P1);\r\n            const T1_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P1);\r\n            const T1_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P1);\r\n\r\n            const T2_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P2);\r\n            const T2_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P2);\r\n            const T2_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P2);\r\n\r\n            const T3_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P3);\r\n            const T3_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P3);\r\n            const T3_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P3);\r\n\r\n            smallerTforMyVertices = minPositive(T1_1, T1_2, T1_3, T2_1, T2_2, T2_3, T3_1, T3_2, T3_3);\r\n        }\r\n\r\n        let smallerTforMySides: number;\r\n        {\r\n            const T1_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP1);\r\n            const T1_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP1);\r\n            const T1_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP1);\r\n\r\n            const T2_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP2);\r\n            const T2_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP2);\r\n            const T2_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP2);\r\n\r\n            const T3_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP3);\r\n            const T3_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP3);\r\n            const T3_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP3);\r\n\r\n            const max = Math.max(T1_1, T1_2, T1_3, T2_1, T2_2, T2_3, T3_1, T3_2, T3_3);\r\n            if (max !== 0) {\r\n                smallerTforMySides = 1 / max;\r\n            } else {\r\n                smallerTforMySides = -1;\r\n            }\r\n        }\r\n\r\n        result.size = minPositive(smallerTforMyVertices, smallerTforMySides);\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfSize = 0.5 * this.size;\r\n\r\n        if (this.isPointInside(-halfDomainWidth, -halfDomainHeight) && this.isPointInside(halfDomainWidth, -halfDomainHeight) && this.isPointInside(-halfDomainWidth, halfDomainHeight) && this.isPointInside(halfDomainWidth, halfDomainHeight)) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfSize < halfDomainWidth && absY - halfSize < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    private isPointInside(x: number, y: number): boolean {\r\n        x = (x - this.center.x) / this.size;\r\n        y = (y - this.center.y) / this.size;\r\n\r\n        const d1 = this.P1_TO_P2.x * (y - this.P2.y) - (x - this.P2.x) * this.P1_TO_P2.y;\r\n        const d2 = this.P2_TO_P3.x * (y - this.P3.y) - (x - this.P3.x) * this.P2_TO_P3.y;\r\n        const d3 = this.P3_TO_P1.x * (y - this.P1.y) - (x - this.P1.x) * this.P3_TO_P1.y;\r\n\r\n        return (d1 <= 0 && d2 <= 0 && d3 <= 0) || (d1 > 0 && d2 > 0 && d3 > 0);\r\n    }\r\n}\r\n\r\nexport { PatternTriangle }\r\n","import { Color } from \"../utils/color\";\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract get isReady(): boolean;\r\n\r\n    public abstract initialize(backgroundColor: Color): void;\r\n    public abstract finalize(): void;\r\n\r\n    public abstract drawSquares(squares: PatternSquare[]): void;\r\n    public abstract drawCircles(circles: PatternCircle[]): void;\r\n    public abstract drawRectangles(rectangles: PatternRectangle[]): void;\r\n    public abstract drawTriangles(triangles: PatternTriangle[]): void;\r\n\r\n    /* Lines have  a 1 pixel thickness */\r\n    public abstract drawLines(lines: ILine[], color: Color): void;\r\n}\r\n\r\nexport { PlotterBase };\r\n\r\n","import { Color } from \"../utils/color\";\r\nimport { ILine } from \"../utils/i-line\";\r\n\r\nimport { PlotterCanvasBase } from \"./plotter-canvas-base\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nclass PlotterCanvas2D extends PlotterCanvasBase {\r\n    private readonly context: CanvasRenderingContext2D;\r\n    public constructor() {\r\n        super();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected clearCanvas(color: Color): void {\r\n        this.context.fillStyle = color.toString();\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const square of squares) {\r\n            const centerX = square.center.x + halfWidth;\r\n            const centerY = square.center.y + halfHeight;\r\n            const halfSize = 0.5 * square.size;\r\n\r\n            this.context.fillStyle = square.color.toString();\r\n            this.context.fillRect(centerX - halfSize, centerY - halfSize, square.size, square.size);\r\n        }\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        const TWO_PI = 2 * Math.PI;\r\n\r\n        for (const circle of circles) {\r\n            const centerX = circle.center.x + halfWidth;\r\n            const centerY = circle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = circle.color.toString();\r\n            this.context.beginPath();\r\n            this.context.arc(centerX, centerY, circle.radius, 0, TWO_PI);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const rectangle of rectangles) {\r\n            const centerX = rectangle.center.x + halfWidth;\r\n            const centerY = rectangle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = rectangle.color.toString();\r\n            this.context.fillRect(centerX - 0.5 * rectangle.width, centerY - 0.5 * rectangle.height, rectangle.width, rectangle.height);\r\n        }\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const triangle of triangles) {\r\n            const centerX = triangle.center.x + halfWidth;\r\n            const centerY = triangle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = triangle.color.toString();\r\n            this.context.beginPath();\r\n            this.context.moveTo(centerX + triangle.P1.x * triangle.size, centerY + triangle.P1.y * triangle.size);\r\n            this.context.lineTo(centerX + triangle.P2.x * triangle.size, centerY + triangle.P2.y * triangle.size);\r\n            this.context.lineTo(centerX + triangle.P3.x * triangle.size, centerY + triangle.P3.y * triangle.size);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        this.context.fillStyle = \"none\";\r\n        this.context.strokeStyle = color.toString();\r\n        this.context.lineWidth = 1;\r\n        this.context.beginPath();\r\n\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        for (const line of lines) {\r\n            this.context.moveTo(line.from.x + halfWidth, line.from.y + halfHeight);\r\n            this.context.lineTo(line.to.x + halfWidth, line.to.y + halfHeight);\r\n        }\r\n\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n        this.context.strokeStyle = \"none\";\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D };\r\n\r\n","import { ISize } from \"../utils/i-size\";\r\nimport { Color } from \"../utils/color\";\r\nimport { PlotterBase } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nabstract class PlotterCanvasBase extends PlotterBase {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    protected _size: ISize;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n        this.resizeCanvas();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        this.resizeCanvas();\r\n        this.clearCanvas(backgroundColor);\r\n    }\r\n\r\n    protected abstract clearCanvas(color: Color): void;\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n\r\n        this._size = {\r\n            width: this.canvas.width,\r\n            height: this.canvas.height,\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvasBase };\r\n\r\n","import { ILine } from \"../utils/i-line\";\r\nimport { Color } from \"../utils/color\";\r\n\r\nimport { PlotterCanvasBase } from \"./plotter-canvas-base\";\r\n\r\nimport { PatternBase } from \"../patterns/pattern-base\";\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport { initGL, gl } from \"../gl-utils/gl-canvas\";\r\nimport { Shader } from \"../gl-utils/shader\";\r\nimport * as ShaderManager from \"../gl-utils/shader-manager\";\r\nimport { VBO } from \"../gl-utils/vbo\";\r\n\r\nimport \"../page-interface-generated\";\r\nimport { EPrimitive, Parameters } from \"../parameters\";\r\n\r\ntype AffectShaderFunction = (shader: Shader) => unknown;\r\ntype ExtraAttributeFunction = (item: PatternBase) => number;\r\n\r\nconst SQUARE_GEOMETRY = [-.5, .5, -.5, -.5, .5, .5, .5, -.5];\r\nconst TRIANGLE_GEOMETRY = [\r\n    PatternTriangle.baseP1.x, PatternTriangle.baseP1.y,\r\n    PatternTriangle.baseP2.x, PatternTriangle.baseP2.y,\r\n    PatternTriangle.baseP3.x, PatternTriangle.baseP3.y,\r\n];\r\n\r\nclass PlotterCanvasWebGL extends PlotterCanvasBase {\r\n    private instancingExt: ANGLE_instanced_arrays;\r\n    private needToResetInstancingDivision: boolean;\r\n\r\n    private linesShader: Shader | null;\r\n\r\n    private squaresShader: Shader | null;\r\n    private circlesShader: Shader | null;\r\n    private rectanglesShader: Shader | null;\r\n    private trianglesShader: Shader | null;\r\n\r\n    private squaresInstancedShader: Shader | null;\r\n    private circlesInstancedShader: Shader | null;\r\n    private rectanglesInstancedShader: Shader | null;\r\n    private trianglesInstancedShader: Shader | null;\r\n\r\n    private blending: boolean;\r\n\r\n    private linesBuffer: Float32Array;\r\n    private readonly linesVBO: VBO;\r\n\r\n    private statesBuffer: Float32Array;\r\n    private readonly statesVBO: VBO;\r\n\r\n    private colorsBuffer: Float32Array;\r\n    private readonly colorsVBO: VBO;\r\n\r\n    private readonly geometryVBO: VBO;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        if (!initGL()) {\r\n            throw new Error(\"Failed to initialize WebGL.\");\r\n        }\r\n        console.log(`Max point size supported by WebGL: \"${gl.ALIASED_POINT_SIZE_RANGE}\" pixels.`);\r\n\r\n        this.needToResetInstancingDivision = false;\r\n        const instancingExtensionName = \"ANGLE_instanced_arrays\";\r\n        this.instancingExt = gl.getExtension(instancingExtensionName);\r\n        if (this.instancingExt === null) {\r\n            const errorMessage = `Your device does not support the \"${instancingExtensionName}\" WebGL extension. Using the fallback mode with GL_POINTS, which might cause visual artifacts.`;\r\n            Page.Demopage.setErrorMessage(\"webgl-instanced\", errorMessage);\r\n            console.log(errorMessage);\r\n            Parameters.disallowInstancing();\r\n        } else {\r\n            console.log(`Using the \"${instancingExtensionName}\" WebGL extension.`);\r\n        }\r\n\r\n        this.blending = false;\r\n        this.enableBlending = true;\r\n\r\n        this.linesBuffer = new Float32Array([]);\r\n        this.linesVBO = new VBO(gl, new Float32Array(this.linesBuffer), 2, gl.FLOAT, false);\r\n\r\n        this.statesBuffer = new Float32Array([]);\r\n        this.statesVBO = new VBO(gl, this.statesBuffer, 4, gl.FLOAT, false);\r\n\r\n        this.colorsBuffer = new Float32Array([]);\r\n        this.colorsVBO = new VBO(gl, this.colorsBuffer, 4, gl.FLOAT, false);\r\n\r\n        const geometryBuffer = SQUARE_GEOMETRY.concat(TRIANGLE_GEOMETRY);\r\n        this.geometryVBO = new VBO(gl, new Float32Array(geometryBuffer), 2, gl.FLOAT, true);\r\n\r\n        this.linesShader = null;\r\n        this.squaresShader = null;\r\n        this.circlesShader = null;\r\n        this.rectanglesShader = null;\r\n        this.trianglesShader = null;\r\n        this.loadAndBuildShader(\"point/lines.vert\", \"point/lines.frag\", \"lines\", (shader: Shader) => this.linesShader = shader);\r\n        this.loadAndBuildShader(\"point/items.vert\", \"point/squares.frag\", \"squares\", (shader: Shader) => this.squaresShader = shader);\r\n        this.loadAndBuildShader(\"point/items.vert\", \"point/circles.frag\", \"circles\", (shader: Shader) => this.circlesShader = shader);\r\n        this.loadAndBuildShader(\"point/rectangles.vert\", \"point/rectangles.frag\", \"rectangles\", (shader: Shader) => this.rectanglesShader = shader);\r\n        this.loadAndBuildShader(\"point/triangles.vert\", \"point/triangles.frag\", \"triangles\", (shader: Shader) => this.trianglesShader = shader);\r\n\r\n        this.squaresInstancedShader = null;\r\n        this.circlesInstancedShader = null;\r\n        this.rectanglesInstancedShader = null;\r\n        this.trianglesInstancedShader = null;\r\n        if (this.supportsInstancing) {\r\n            this.loadAndBuildShader(\"instanced/simpleGeometry.vert\", \"instanced/fillColor.frag\", \"instanced squares\", (shader: Shader) => this.squaresInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/circles.vert\", \"instanced/circles.frag\", \"instanced squares\", (shader: Shader) => this.circlesInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/rectangles.vert\", \"instanced/fillColor.frag\", \"instanced circles\", (shader: Shader) => this.rectanglesInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/triangles.vert\", \"instanced/fillColor.frag\", \"instanced triangles\", (shader: Shader) => this.trianglesInstancedShader = shader);\r\n        }\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return this.linesShader !== null &&\r\n            this.squaresShader !== null && this.circlesShader !== null && this.rectanglesShader !== null && this.trianglesShader !== null &&\r\n            this.squaresInstancedShader !== null && this.circlesInstancedShader !== null && this.rectanglesInstancedShader !== null && this.trianglesInstancedShader !== null;\r\n    }\r\n\r\n    protected clearCanvas(color: Color): void {\r\n        gl.clearColor(color.r / 255, color.g / 255, color.b / 255, 1); // TODO avoid doing this if possible\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        super.initialize(backgroundColor);\r\n        gl.viewport(0, 0, this._size.width, this._size.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        this.drawPrimitives(this.squaresShader, this.squaresInstancedShader, squares, EPrimitive.SQUARE);\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        this.drawPrimitives(this.circlesShader, this.circlesInstancedShader, circles, EPrimitive.CIRCLE);\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const extraAttributeFunction = (item: PatternBase) => (item as PatternRectangle).aspectRatio;\r\n        this.drawPrimitives(this.rectanglesShader, this.rectanglesInstancedShader, rectangles, EPrimitive.RECTANGLE, extraAttributeFunction);\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const extraAttributeFunction = (item: PatternBase) => (item as PatternTriangle).angle;\r\n        this.drawPrimitives(this.trianglesShader, this.trianglesInstancedShader, triangles, EPrimitive.TRIANGLE, extraAttributeFunction);\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        const nbLines = lines.length;\r\n\r\n        if (this.linesShader !== null && nbLines >= 1) {\r\n            const wantedLinesBufferLength = 4 * nbLines;\r\n            if (this.linesBuffer.length !== wantedLinesBufferLength) {\r\n                this.linesBuffer = new Float32Array(wantedLinesBufferLength)\r\n            }\r\n\r\n            for (let i = 0; i < nbLines; i++) {\r\n                this.linesBuffer[4 * i + 0] = lines[i].from.x;\r\n                this.linesBuffer[4 * i + 1] = lines[i].from.y;\r\n                this.linesBuffer[4 * i + 2] = lines[i].to.x;\r\n                this.linesBuffer[4 * i + 3] = lines[i].to.y;\r\n            }\r\n\r\n            this.linesVBO.setData(new Float32Array(this.linesBuffer));\r\n\r\n            this.linesShader.a[\"aCoords\"].VBO = this.linesVBO;\r\n            this.linesShader.u[\"uScreenSize\"].value = [this._size.width, this._size.height];\r\n            this.linesShader.u[\"uColor\"].value = [color.r / 255, color.g / 255, color.b / 255, 1];\r\n\r\n            this.linesShader.use();\r\n            this.linesShader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.LINES, 0, 2 * nbLines);\r\n        }\r\n    }\r\n\r\n    private drawPrimitives(pointsShader: Shader, instancedShader: Shader, items: PatternBase[], primitive: EPrimitive, extraAttributeFunction?: ExtraAttributeFunction): void {\r\n        this.updateStateAndColorVBOs(items, extraAttributeFunction);\r\n\r\n        if (this.useInstancing && instancedShader !== null) {\r\n            this.drawInstanced(instancedShader, items, primitive);\r\n        } else {\r\n            this.drawAsPoints(pointsShader, items);\r\n        }\r\n    }\r\n\r\n    private drawInstanced(shader: Shader, items: PatternBase[], primitive: EPrimitive): void {\r\n        const nbItems = items.length;\r\n        if (this.supportsInstancing && shader !== null && nbItems > 0) {\r\n            shader.u[\"uScreenSize\"].value = [this._size.width, this._size.height];\r\n\r\n            shader.use();\r\n            shader.bindUniforms();\r\n\r\n            this.geometryVBO.bind(shader.a[\"aVertex\"].loc);\r\n            this.statesVBO.bindInstanced(shader.a[\"aState\"].loc, this.instancingExt, 1);\r\n            this.colorsVBO.bindInstanced(shader.a[\"aColor\"].loc, this.instancingExt, 1);\r\n            this.needToResetInstancingDivision = true;\r\n\r\n            if (primitive === EPrimitive.TRIANGLE) {\r\n                this.instancingExt.drawArraysInstancedANGLE(gl.TRIANGLES, 4, 3, nbItems);\r\n            } else {\r\n                this.instancingExt.drawArraysInstancedANGLE(gl.TRIANGLE_STRIP, 0, 4, nbItems);\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawAsPoints(shader: Shader, items: PatternBase[]): void {\r\n        const nbItems = items.length;\r\n        if (shader !== null && nbItems > 0) {\r\n            shader.a[\"aState\"].VBO = this.statesVBO;\r\n            shader.a[\"aColor\"].VBO = this.colorsVBO;\r\n            shader.u[\"uScreenSize\"].value = [this._size.width, this._size.height];\r\n\r\n            shader.use();\r\n\r\n            if (this.needToResetInstancingDivision) {\r\n                this.statesVBO.bindInstanced(shader.a[\"aState\"].loc, this.instancingExt, 0);\r\n                this.colorsVBO.bindInstanced(shader.a[\"aColor\"].loc, this.instancingExt, 0);\r\n                this.needToResetInstancingDivision = false;\r\n            }\r\n\r\n            shader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.POINTS, 0, nbItems);\r\n        }\r\n    }\r\n\r\n    private updateStateAndColorVBOs(items: PatternBase[], extraAttribute?: ExtraAttributeFunction): void {\r\n        const nbItems = items.length;\r\n\r\n        // try not to resize the buffers too often to avoid GC\r\n        const nbItemsRounded = 1024 * Math.ceil(nbItems / 1024);\r\n\r\n        const wantedStatesBufferLength = 4 * nbItemsRounded;\r\n        if (this.statesBuffer.length !== wantedStatesBufferLength) {\r\n            this.statesBuffer = new Float32Array(wantedStatesBufferLength);\r\n        }\r\n\r\n        const wantedColorsBufferLength = 4 * nbItemsRounded;\r\n        if (this.colorsBuffer.length !== wantedColorsBufferLength) {\r\n            this.colorsBuffer = new Float32Array(wantedColorsBufferLength);\r\n        }\r\n\r\n        this.enableBlending = Parameters.blending;\r\n        const time = performance.now();\r\n        const blendTime = PatternBase.maxBlendingTime;\r\n\r\n        if (typeof extraAttribute !== \"function\") {\r\n            extraAttribute = () => 0; // unused value\r\n        }\r\n\r\n        for (let i = 0; i < nbItems; i++) {\r\n            const color = items[i].color;\r\n\r\n            this.statesBuffer[4 * i + 0] = items[i].center.x;\r\n            this.statesBuffer[4 * i + 1] = items[i].center.y;\r\n            this.statesBuffer[4 * i + 2] = items[i].size;\r\n            this.statesBuffer[4 * i + 3] = extraAttribute(items[i]);\r\n            this.colorsBuffer[4 * i + 0] = color.r / 255;\r\n            this.colorsBuffer[4 * i + 1] = color.g / 255;\r\n            this.colorsBuffer[4 * i + 2] = color.b / 255;\r\n            this.colorsBuffer[4 * i + 3] = items[i].computeOpacity(time, blendTime);\r\n        }\r\n\r\n        this.statesVBO.setData(this.statesBuffer);\r\n        this.colorsVBO.setData(this.colorsBuffer);\r\n    }\r\n\r\n    private set enableBlending(value: boolean) {\r\n        if (value !== this.blending) {\r\n            this.blending = value;\r\n\r\n            if (value) {\r\n                gl.enable(gl.BLEND);\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n            } else {\r\n                gl.disable(gl.BLEND);\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadAndBuildShader(vertexFilename: string, fragmentFilename: string, shaderName: string, affectShader: AffectShaderFunction): void {\r\n        ShaderManager.buildShader({\r\n            vertexFilename,\r\n            fragmentFilename,\r\n            injected: {},\r\n        }, (builtShader: Shader | null) => {\r\n            if (builtShader === null) {\r\n                const errorMessage = `Failed to load or build the ${shaderName} shader.`;\r\n                Page.Demopage.setErrorMessage(`shader-${shaderName}`, errorMessage);\r\n                throw new Error(errorMessage);\r\n            }\r\n            affectShader(builtShader);\r\n        });\r\n    }\r\n\r\n    private get supportsInstancing(): boolean {\r\n        return this.instancingExt !== null;\r\n    }\r\n\r\n    private get useInstancing(): boolean {\r\n        return this.supportsInstancing && Parameters.useInstancing;\r\n    }\r\n}\r\n\r\nexport { PlotterCanvasWebGL };\r\n","import { Color } from \"../utils/color\";\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { PlotterBase } from \"./plotter-base\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private readonly _size: ISize;\r\n\r\n    public constructor(size: ISize) {\r\n        super();\r\n\r\n        this._size = {\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${this._size.width} ${this._size.height}\">\\n`);\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${this._size.width}\" height=\"${this._size.height}\"/>\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const square of squares) {\r\n            const centerX = square.center.x + halfWidth;\r\n            const centerY = square.center.y + halfHeight;\r\n            const halfSize = 0.5 * square.size;\r\n\r\n            this.stringParts.push(`\\t\\t<rect fill=\"${square.color}\" x=\"${centerX - halfSize}\" y=\"${centerY - halfSize}\" width=\"${square.size}\" height=\"${square.size}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const circle of circles) {\r\n            const centerX = circle.center.x + halfWidth;\r\n            const centerY = circle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<circle fill=\"${circle.color}\" cx=\"${centerX}\" cy=\"${centerY}\" r=\"${circle.radius}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const rectangle of rectangles) {\r\n            const centerX = rectangle.center.x + halfWidth;\r\n            const centerY = rectangle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<rect fill=\"${rectangle.color}\" x=\"${centerX - 0.5 * rectangle.width}\" y=\"${centerY - 0.5 * rectangle.height}\" width=\"${rectangle.width}\" height=\"${rectangle.height}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const triangle of triangles) {\r\n            const centerX = triangle.center.x + halfWidth;\r\n            const centerY = triangle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<polygon fill=\"${triangle.color}\" points=\"${centerX + triangle.P1.x * triangle.size},${centerY + triangle.P1.y * triangle.size} ${centerX + triangle.P2.x * triangle.size},${centerY + triangle.P2.y * triangle.size} ${centerX + triangle.P3.x * triangle.size},${centerY + triangle.P3.y * triangle.size}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        const path: string[] = [];\r\n\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        for (const line of lines) {\r\n            const x1 = line.from.x + halfWidth;\r\n            const y1 = line.from.y + halfHeight;\r\n            const x2 = line.to.x + halfWidth;\r\n            const y2 = line.to.y + halfHeight;\r\n\r\n            path.push(`M${x1},${y1}L${x2},${y2}`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t\\t\\t<path fill=\"none\" stroke-width=\"1\" stroke=\"${color}\" d=\"${path.join()}\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const result = this.stringParts.join(\"\");\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { PlotterSVG }\r\n","import { PatternBase } from \"../patterns/pattern-base\";\r\nimport { PlotterBase } from \"../plotter/plotter-base\";\r\nimport { Color } from \"../utils/color\";\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport * as Statistics from \"..//statistics/statistics\";\r\n\r\ntype GridCell = PatternBase[];\r\n\r\nconst MIN_CELL_SIZE = 10;\r\nconst MAX_CELL_SIZE = 500;\r\n\r\nclass Grid {\r\n    private readonly gridSize: ISize;\r\n    private readonly gridCells: GridCell[];\r\n    private readonly topLeftCorner: IPoint;\r\n    private _cellSize: number;\r\n\r\n    private registeredItemsCount: number; // including duplicates\r\n\r\n    constructor() {\r\n        this.gridSize = { width: 0, height: 0 };\r\n        this.gridCells = [];\r\n        this.topLeftCorner = { x: 0, y: 0 };\r\n\r\n        this.reset({ width: 1, height: 1 }, 100, []);\r\n    }\r\n\r\n    /** @returns true if the grid needs to be redrawn */\r\n    public reset(domainSize: ISize, cellSize: number, items: PatternBase[]): boolean {\r\n        this.registeredItemsCount = 0;\r\n        const gridHasChanged = this.resetDomain(domainSize, cellSize);\r\n\r\n        for (const item of items) {\r\n            this.registerItem(item);\r\n        }\r\n\r\n        return gridHasChanged;\r\n    }\r\n\r\n    public registerItem(item: PatternBase): void {\r\n        const topLeft: IPoint = {\r\n            x: item.center.x - 0.5 * item.size,\r\n            y: item.center.y - 0.5 * item.size,\r\n        };\r\n        const bottomRight: IPoint = {\r\n            x: item.center.x + 0.5 * item.size,\r\n            y: item.center.y + 0.5 * item.size,\r\n        };\r\n\r\n        const minCellId = this.getCellId(topLeft);\r\n        const maxCellId = this.getCellId(bottomRight);\r\n\r\n        for (let iCellY = minCellId.y; iCellY <= maxCellId.y; iCellY++) {\r\n            for (let iCellX = minCellId.x; iCellX <= maxCellId.x; iCellX++) {\r\n                const cellId = this.computeCellId(iCellX, iCellY);\r\n                this.gridCells[cellId].push(item);\r\n                this.registeredItemsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(plotter: PlotterBase): void {\r\n        const lines: ILine[] = [];\r\n\r\n        const minX = this.topLeftCorner.x;\r\n        const maxX = minX + this.gridSize.width * this._cellSize;\r\n\r\n        const minY = this.topLeftCorner.y;\r\n        const maxY = minY + this.gridSize.height * this._cellSize;\r\n\r\n        for (let iX = 0; iX < this.gridSize.width; iX++) {\r\n            const x = minX + iX * this._cellSize;\r\n            const line: ILine = {\r\n                from: { x, y: minY },\r\n                to: { x, y: maxY },\r\n            };\r\n            lines.push(line);\r\n        }\r\n\r\n        for (let iY = 0; iY < this.gridSize.height; iY++) {\r\n            const y = minY + iY * this._cellSize;\r\n            const line: ILine = {\r\n                from: { x: minX, y },\r\n                to: { x: maxX, y },\r\n            };\r\n            lines.push(line);\r\n        }\r\n\r\n        plotter.drawLines(lines, Color.GREEN);\r\n    }\r\n\r\n    public getCellId(position: IPoint): IPoint {\r\n        let cellX = Math.floor((position.x - this.topLeftCorner.x) / this._cellSize);\r\n        let cellY = Math.floor((position.y - this.topLeftCorner.y) / this._cellSize);\r\n\r\n        if (cellX < 0) {\r\n            cellX = 0;\r\n        } else if (cellX >= this.gridSize.width) {\r\n            cellX = this.gridSize.width - 1;\r\n        }\r\n\r\n        if (cellY < 0) {\r\n            cellY = 0;\r\n        } else if (cellY >= this.gridSize.height) {\r\n            cellY = this.gridSize.height - 1;\r\n        }\r\n\r\n        return { x: cellX, y: cellY };\r\n    }\r\n\r\n    public getDistanceToClosestBorder(position: IPoint): number {\r\n        // position relative to the containing cell\r\n        const localX = (position.x - this.topLeftCorner.x) % this._cellSize;\r\n        const localY = (position.y - this.topLeftCorner.y) % this._cellSize;\r\n\r\n        const minDistanceX = Math.min(localX, this._cellSize - localX);\r\n        const minDistanceY = Math.min(localY, this._cellSize - localY);\r\n        return Math.min(minDistanceX, minDistanceY);\r\n    }\r\n\r\n    /** Provides the registered items that overlap a given cell.\r\n     * @param cellX (integer) horizontal position of the wanted cell\r\n     * @param cellY (integer) vertical position of the wanted cell\r\n     * @returns array of cells that overlap the wanted cell. If the wanted cell doesn't exist, returns empty array\r\n     */\r\n    public getItemsFromCell(cellX: number, cellY: number): PatternBase[] {\r\n        if (cellX >= 0 && cellX < this.gridSize.width && cellY >= 0 && cellY < this.gridSize.height) {\r\n            const cellId = this.computeCellId(cellX, cellY);\r\n            return this.gridCells[cellId];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /** Provides the registered items that overlap a certain group of cells. Contains duplicates.\r\n     * @param minCellX (integer) horizontal position of the lowest wanted cell\r\n     * @param minCellY (integer) vertical position of the lowest wanted cell\r\n     * @param maxCellX (integer) horizontal position of the highest wanted cell\r\n     * @param maxCellY (integer) vertical position of the highest wanted cell\r\n     * @returns array of cells that overlap the wanted group of cell. If no cell matches, returns empty array\r\n     */\r\n    public getItemsFromCellsGroup(minCellX: number, minCellY: number, maxCellX: number, maxCellY: number): PatternBase[] {\r\n        const result: PatternBase[] = [];\r\n\r\n        for (let iCellY = minCellY; iCellY <= maxCellY; iCellY++) {\r\n            for (let iCellX = minCellX; iCellX <= maxCellX; iCellX++) {\r\n                const cellItems = this.getItemsFromCell(iCellX, iCellY);\r\n                result.push.apply(result, cellItems);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeStatistics(): void {\r\n        Statistics.registerGridStats(this.gridSize, this._cellSize, this.registeredItemsCount);\r\n    }\r\n\r\n    public get itemsPerCell(): number {\r\n        if (this.gridCells.length === 0) {\r\n            return 0;\r\n        }\r\n        return this.registeredItemsCount / this.gridCells.length;\r\n    }\r\n\r\n    public get cellSize(): number {\r\n        return this._cellSize;\r\n    }\r\n\r\n    /** @returns true if the cells disposition changed */\r\n    private resetDomain(domainSize: ISize, cellSize: number): boolean {\r\n        const wantedGridSizeX = Math.ceil(domainSize.width / cellSize);\r\n        const wantedGridSizeY = Math.ceil(domainSize.height / cellSize);\r\n\r\n        if (cellSize < MIN_CELL_SIZE) {\r\n            cellSize = MIN_CELL_SIZE;\r\n        } else if (cellSize > MAX_CELL_SIZE) {\r\n            cellSize = MAX_CELL_SIZE;\r\n        }\r\n\r\n        const hasChanged = (this._cellSize !== cellSize) ||\r\n            (this.gridSize.width !== wantedGridSizeX) || (this.gridSize.height !== wantedGridSizeY);\r\n\r\n        this._cellSize = cellSize;\r\n        this.gridSize.width = wantedGridSizeX;\r\n        this.gridSize.height = wantedGridSizeY;\r\n\r\n        this.topLeftCorner.x = -0.5 * domainSize.width;\r\n        this.topLeftCorner.y = -0.5 * domainSize.height;\r\n\r\n        const nbCells = this.gridSize.width * this.gridSize.height;\r\n        this.gridCells.length = nbCells; // reduce size if needed\r\n        for (let i = 0; i < nbCells; i++) {\r\n            this.gridCells[i] = []; // empty/initialize all cells\r\n        }\r\n\r\n        return hasChanged;\r\n    }\r\n\r\n    /** No check that the parameters are in bounds. */\r\n    private computeCellId(cellX: number, cellY: number): number {\r\n        return cellX + cellY * this.gridSize.width;\r\n    }\r\n}\r\n\r\nexport { Grid };","import { StopWatch } from \"./stop-watch\";\r\n\r\nimport \"../page-interface-generated\";\r\nimport { Parameters } from \"../parameters\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nconst VERBOSE_INTERVAL = 1000;\r\n\r\nconst timeSinceLastVerboseFrame = new StopWatch();\r\n\r\nlet frames = 0;\r\nconst timeSpentInMainLoop = new StopWatch();\r\nconst timeSpentInDraw = new StopWatch();\r\nconst timeSpentInUpdate = new StopWatch();\r\nconst timeSpentInReindex = new StopWatch();\r\nconst timeSpentInRecycle = new StopWatch();\r\nconst timeSpentInZoom = new StopWatch();\r\n\r\nlet itemsCount = 0;\r\nlet itemsRecycledCount = 0;\r\nlet itemsPendingRecyclingCount = 0;\r\nlet itemsRecyclingTries = 0;\r\n\r\nlet nbGridStats = 0;\r\nlet gridWidth = 0;\r\nlet gridHeight = 0;\r\nlet gridCellSize = 0;\r\nlet gridRegisteredItems = 0;\r\n\r\nfunction initialize(): void {\r\n    timeSinceLastVerboseFrame.reset();\r\n    timeSinceLastVerboseFrame.start();\r\n    frames = 0;\r\n}\r\n\r\nfunction registerFrame(): void {\r\n    frames++;\r\n\r\n    if (isVerboseFrame()) {\r\n        updateIndicators();\r\n        resetAll();\r\n    }\r\n}\r\n\r\nfunction isVerboseFrame(): boolean {\r\n    return timeSinceLastVerboseFrame.totalTime > VERBOSE_INTERVAL;\r\n}\r\n\r\nfunction updateIndicators(): void {\r\n    const fps = 1000 * frames / timeSinceLastVerboseFrame.totalTime;\r\n    const averageFrameTime = timeSinceLastVerboseFrame.totalTime / frames;\r\n\r\n    const averageMainLoopTime = timeSpentInMainLoop.totalTime / frames;\r\n    const mainLoopTimeRelative = averageMainLoopTime / averageFrameTime;\r\n\r\n    const averageDrawTime = timeSpentInDraw.totalTime / frames;\r\n    const drawTimeRelative = averageDrawTime / averageMainLoopTime;\r\n\r\n    const averageUpdateTime = timeSpentInUpdate.totalTime / frames;\r\n    const updateTimeRelative = averageUpdateTime / averageMainLoopTime;\r\n\r\n    const averageUpdateReindexTime = timeSpentInReindex.totalTime / frames;\r\n    const updateReindexTimeRelative = averageUpdateReindexTime / averageUpdateTime;\r\n\r\n    const averageUpdateRecycleTime = timeSpentInRecycle.totalTime / frames;\r\n    const updateRecycleTimeRelative = averageUpdateRecycleTime / averageUpdateTime;\r\n\r\n    const averageUpdateZoomTime = timeSpentInZoom.totalTime / frames;\r\n    const updateZoomTimeRelative = averageUpdateZoomTime / averageUpdateTime;\r\n\r\n    if (Parameters.isInDebug) {\r\n        Page.Canvas.setIndicatorText(\"fps\", `${fps.toFixed(0)} (${averageFrameTime.toFixed(2)} ms)`);\r\n        Page.Canvas.setIndicatorText(\"main-loop-time\", `${averageMainLoopTime.toFixed(2)} ms (${(100 * mainLoopTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-time\", `${averageDrawTime.toFixed(2)} ms (${(100 * drawTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-time\", `${averageUpdateTime.toFixed(2)} ms (${(100 * updateTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-reindex-time\", `${averageUpdateReindexTime.toFixed(2)} ms (${(100 * updateReindexTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-recycle-time\", `${averageUpdateRecycleTime.toFixed(2)} ms (${(100 * updateRecycleTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-zoom-time\", `${averageUpdateZoomTime.toFixed(2)} ms (${(100 * updateZoomTimeRelative).toFixed(1)} %)`);\r\n\r\n        Page.Canvas.setIndicatorText(\"items-reclycled-count\", `${(itemsRecycledCount / frames * fps).toFixed(1)}`);\r\n        Page.Canvas.setIndicatorText(\"items-pending-recycling-count\", `${(itemsPendingRecyclingCount / frames).toFixed(1)}`);\r\n        Page.Canvas.setIndicatorText(\"items-recycling-tries-count\", `${(itemsRecyclingTries / frames).toFixed(1)}`);\r\n\r\n        if (nbGridStats > 0) {\r\n            const averageGridWidth = Math.round(gridWidth / nbGridStats);\r\n            const averageGridHeight = Math.round(gridHeight / nbGridStats);\r\n            const averageGridCellCount = averageGridWidth * averageGridHeight;\r\n            Page.Canvas.setIndicatorText(\"grid-size\", `${averageGridWidth}x${averageGridHeight} (${averageGridCellCount})`);\r\n            Page.Canvas.setIndicatorText(\"grid-cell-size\", `${(gridCellSize / nbGridStats).toFixed(1)}`);\r\n            Page.Canvas.setIndicatorText(\"grid-items-per-cell\", `${(gridRegisteredItems / nbGridStats / averageGridCellCount).toFixed(1)}`);\r\n        }\r\n    } else {\r\n        Page.Canvas.setIndicatorText(\"fps\", fps.toFixed(0));\r\n    }\r\n\r\n    Page.Canvas.setIndicatorText(\"items-count\", `${itemsCount}`);\r\n    Page.Canvas.setIndicatorText(\"items-visible-count\", `${(itemsCount - itemsPendingRecyclingCount / frames).toFixed(0)}`);\r\n\r\n}\r\n\r\nfunction resetAll(): void {\r\n    timeSinceLastVerboseFrame.reset();\r\n\r\n    frames = 0;\r\n    timeSpentInMainLoop.reset();\r\n    timeSpentInDraw.reset();\r\n    timeSpentInUpdate.reset();\r\n    timeSpentInReindex.reset();\r\n    timeSpentInRecycle.reset();\r\n    timeSpentInZoom.reset();\r\n\r\n    itemsRecycledCount = 0;\r\n    itemsPendingRecyclingCount = 0;\r\n    itemsRecyclingTries = 0;\r\n\r\n    nbGridStats = 0;\r\n}\r\n\r\nfunction registerRecyclingStats(total: number, recycled: number, pendingRecycling: number, nbTriesCount: number): void {\r\n    itemsCount = total;\r\n    itemsRecycledCount += recycled;\r\n    itemsPendingRecyclingCount += pendingRecycling;\r\n    itemsRecyclingTries += nbTriesCount;\r\n}\r\n\r\nfunction registerGridStats(gridSize: ISize, cellSize: number, registeredItems: number): void {\r\n    if (nbGridStats === 0) {\r\n        gridWidth = 0;\r\n        gridHeight = 0;\r\n        gridCellSize = 0;\r\n        gridRegisteredItems = 0;\r\n    }\r\n\r\n    nbGridStats++;\r\n    gridWidth += gridSize.width;\r\n    gridHeight += gridSize.height;\r\n    gridCellSize += cellSize;\r\n    gridRegisteredItems += registeredItems;\r\n}\r\n\r\nexport {\r\n    initialize,\r\n    registerGridStats,\r\n    registerFrame,\r\n    registerRecyclingStats,\r\n    timeSpentInMainLoop,\r\n    timeSpentInDraw,\r\n    timeSpentInUpdate,\r\n    timeSpentInReindex,\r\n    timeSpentInRecycle,\r\n    timeSpentInZoom,\r\n}\r\n","class StopWatch {\r\n    private _totalTime: number;\r\n    private _lastCheckpoint: number;\r\n    private _isRunning: boolean;\r\n\r\n    constructor() {\r\n        this._totalTime = 0;\r\n        this._isRunning = false;\r\n    }\r\n\r\n    public start(): void {\r\n        if (!this._isRunning) {\r\n            this._lastCheckpoint = performance.now();\r\n            this._isRunning = true;\r\n        } else {\r\n            console.log(\"Error: stopwatch is already started\");\r\n        }\r\n    }\r\n\r\n    public stop(): void {\r\n        if (this._isRunning) {\r\n            const now = performance.now();\r\n            this._totalTime += now - this._lastCheckpoint;\r\n            this._lastCheckpoint = now;\r\n            this._isRunning = false;\r\n        } else {\r\n            console.log(\"Error: stopwatch is already stopped.\");\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this._totalTime = 0;\r\n        this._lastCheckpoint = performance.now();\r\n    }\r\n\r\n    public get totalTime(): number {\r\n        if (this._isRunning) {\r\n            return this._totalTime + (performance.now() - this._lastCheckpoint);\r\n        } else {\r\n            return this._totalTime;\r\n        }\r\n    }\r\n}\r\n\r\nexport { StopWatch }\r\n","function registerPadStartPolyfill(): void {\r\n    if (typeof String.prototype.padStart !== \"function\") {\r\n        String.prototype.padStart = function padStart(maxLength: number, fillString?: string): string {\r\n            if (this.length > maxLength) {\r\n                return String(this);\r\n            }\r\n\r\n            if (!fillString) {\r\n                fillString = \" \";\r\n            }\r\n\r\n            const nbRepeats = Math.ceil((maxLength - this.length) / fillString.length);\r\n            let result = \"\";\r\n            for (let i = 0; i < nbRepeats; i++) {\r\n                result += fillString;\r\n            }\r\n            return result + this;\r\n        }\r\n    }\r\n}\r\nregisterPadStartPolyfill(); // for IE11\r\n\r\nclass Color {\r\n    public static readonly BLACK: Color = new Color(0, 0, 0);\r\n    public static readonly WHITE: Color = new Color(255, 255, 255);\r\n    public static readonly GREEN: Color = new Color(0, 255, 0);\r\n\r\n    public static random(): Color {\r\n        return new Color(Color.randomChannel(), Color.randomChannel(), Color.randomChannel());\r\n    }\r\n\r\n    /** @param r in [0, 255]\r\n     *  @param g in [0, 255]\r\n     *  @param b in [0, 255]\r\n     */\r\n    public constructor(public readonly r: number, public readonly g: number, public readonly b: number) { }\r\n\r\n    public toString(): string {\r\n        if (!this.hexString) {\r\n            const rHex = this.r.toString(16).padStart(2, \"0\");\r\n            const gHex = this.g.toString(16).padStart(2, \"0\");\r\n            const bHex = this.b.toString(16).padStart(2, \"0\");\r\n            this.hexString = `#${rHex}${gHex}${bHex}`;\r\n        }\r\n\r\n        return this.hexString;\r\n    }\r\n\r\n    private hexString: string;\r\n\r\n    private static randomChannel(): number {\r\n        return Math.floor(256 * Math.random());\r\n    }\r\n}\r\n\r\nexport { Color }\r\n","function downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof window.navigator.msSaveBlob !== \"undefined\") { // for IE\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nfunction getQueryStringValue(name: string): string | null {\r\n    const url = window.location.href;\r\n    const queryStringStart = url.indexOf(\"?\");\r\n    if (queryStringStart >= 0) {\r\n        const queryString = url.substring(queryStringStart + 1);\r\n        if (queryString.length > 0) {\r\n            const parameters = queryString.split(\"&\");\r\n            for (const parameter of parameters) {\r\n                const keyValue = parameter.split(\"=\");\r\n                if (keyValue.length === 2) {\r\n                    const decodedKey = decodeURIComponent(keyValue[0]);\r\n                    if (decodedKey === name) {\r\n                        return decodeURIComponent(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport {\r\n    downloadTextFile,\r\n    getQueryStringValue,\r\n}\r\n","class NumberRange {\r\n    public constructor (public readonly from: number, public readonly to: number) {}\r\n\r\n    public isInRange(candidate: number): boolean {\r\n        return this.from <= candidate && candidate <= this.to;\r\n    }\r\n}\r\n\r\nexport { NumberRange }\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(633);\n"],"sourceRoot":""}