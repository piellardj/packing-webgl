{"version":3,"file":"main.min.js","mappings":"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","sources":["webpack://packing-webgl/./src/ts/color/color-picker.ts","webpack://packing-webgl/./src/ts/color/color.ts","webpack://packing-webgl/./src/ts/debug-collisions.ts","webpack://packing-webgl/./src/ts/engine.ts","webpack://packing-webgl/./src/ts/gl-utils/gl-canvas.ts","webpack://packing-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://packing-webgl/./src/ts/gl-utils/shader-manager.ts","webpack://packing-webgl/./src/ts/gl-utils/shader-sources.ts","webpack://packing-webgl/./src/ts/gl-utils/shader.ts","webpack://packing-webgl/./src/ts/gl-utils/vbo.ts","webpack://packing-webgl/./src/ts/main.ts","webpack://packing-webgl/./src/ts/parameters.ts","webpack://packing-webgl/./src/ts/patterns/pattern-base.ts","webpack://packing-webgl/./src/ts/patterns/pattern-circle.ts","webpack://packing-webgl/./src/ts/patterns/pattern-heart.ts","webpack://packing-webgl/./src/ts/patterns/pattern-rectangle.ts","webpack://packing-webgl/./src/ts/patterns/pattern-square.ts","webpack://packing-webgl/./src/ts/patterns/pattern-triangle.ts","webpack://packing-webgl/./src/ts/plotter/plotter-base.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-2d.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-base.ts","webpack://packing-webgl/./src/ts/plotter/plotter-canvas-webgl.ts","webpack://packing-webgl/./src/ts/plotter/plotter-svg.ts","webpack://packing-webgl/./src/ts/space-grid/grid.ts","webpack://packing-webgl/./src/ts/statistics/statistics.ts","webpack://packing-webgl/./src/ts/statistics/stop-watch.ts","webpack://packing-webgl/./src/ts/utils/helper.ts","webpack://packing-webgl/./src/ts/utils/number-range.ts","webpack://packing-webgl/webpack/bootstrap","webpack://packing-webgl/webpack/startup"],"sourcesContent":["import { Color } from \"./color\";\r\n\r\ntype Palette = Color[];\r\n\r\nconst SUMMER: Palette = [\r\n    new Color(29, 62, 94),\r\n    new Color(44, 98, 154),\r\n    new Color(68, 174, 163),\r\n    new Color(243, 214, 99),\r\n    new Color(233, 86, 64),\r\n];\r\n\r\nconst FOREST: Palette = [\r\n    new Color(14, 61, 4),\r\n    new Color(23, 122, 8),\r\n    new Color(183, 58, 69),\r\n    new Color(238, 213, 157),\r\n    new Color(209, 135, 52),\r\n];\r\n\r\nconst OCEAN: Palette = [\r\n    new Color(8, 29, 60),\r\n    new Color(31, 99, 159),\r\n    new Color(60, 157, 199),\r\n    new Color(175, 240, 255),\r\n    new Color(235, 184, 133),\r\n];\r\n\r\nconst RUST: Palette = [\r\n    new Color(141,28,11),\r\n    new Color(164,75,38),\r\n    new Color(229,171,84),\r\n    new Color(127,164,161),\r\n    new Color(91,125,123),\r\n    new Color(31,54,54),\r\n];\r\n\r\nconst GREYSCALE: Palette = [\r\n    new Color(38, 38, 38),\r\n    new Color(76, 76, 76),\r\n    new Color(114, 114, 114),\r\n    new Color(153, 153, 153),\r\n    new Color(191, 191, 191),\r\n    new Color(220, 220, 220),\r\n];\r\n\r\nconst NEON: Palette = [\r\n    new Color(252, 17, 147),\r\n    new Color(23, 0, 81),\r\n    new Color(106, 39, 197),\r\n    new Color(33, 168, 159),\r\n    new Color(133, 224, 191),\r\n];\r\n\r\nconst DESERT: Palette = [\r\n    new Color(167,206,160),\r\n    new Color(95,154,121),\r\n    new Color(55,82,83),\r\n    new Color(218,172,115),\r\n    new Color(244,219,142),\r\n    new Color(155,143,100),\r\n    new Color(170,109,75),\r\n];\r\n\r\nconst FLASHY: Palette = [\r\n    new Color(255,0,0),\r\n    new Color(135,0,255),\r\n    new Color(46,0,255),\r\n    new Color(0,161,255),\r\n    new Color(0,255,46),\r\n    new Color(238,255,0),\r\n    new Color(255,123,0),\r\n];\r\n\r\nconst VALENTINE: Palette = [\r\n    new Color(85,21,37),\r\n    new Color(220,37,82),\r\n    new Color(243,81,120),\r\n    new Color(250,153,185),\r\n    new Color(249,235,209),\r\n]\r\n\r\nconst palettes: Palette[] = [\r\n    SUMMER,\r\n    FOREST,\r\n    OCEAN,\r\n    RUST,\r\n    GREYSCALE,\r\n    NEON,\r\n    DESERT,\r\n    FLASHY,\r\n    VALENTINE,\r\n];\r\n\r\nabstract class ColorPicker {\r\n    public static highContrastMode: boolean = false;\r\n    public static darkMode: boolean = false;\r\n    public static usePalette: boolean = false;\r\n    private static palette: Palette = palettes[0];\r\n\r\n    public static setPalette(id: number): void {\r\n        if (id < 0 || id >= palettes.length) {\r\n            this.usePalette = false;\r\n        } else {\r\n            this.usePalette = true;\r\n            ColorPicker.palette = palettes[id];\r\n        }\r\n    }\r\n\r\n    public static getDisplayColor(itemColor: Color, itemNestingLevel: number): Color {\r\n        if (ColorPicker.highContrastMode) {\r\n            return (itemNestingLevel % 2 === +ColorPicker.darkMode) ? Color.WHITE : Color.BLACK;\r\n        } else {\r\n            return itemColor;\r\n        }\r\n    }\r\n\r\n    public static getDifferentColorFromPalette(colorToAvoid: Color): Color {\r\n        const paletteSize = ColorPicker.palette.length;\r\n        let result: Color;\r\n\r\n        do {\r\n            const colorId = Math.floor(paletteSize * Math.random());\r\n            result = ColorPicker.palette[colorId];\r\n        } while (result === colorToAvoid);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { ColorPicker };\r\n","function registerPadStartPolyfill(): void {\r\n    if (typeof String.prototype.padStart !== \"function\") {\r\n        String.prototype.padStart = function padStart(maxLength: number, fillString?: string): string {\r\n            if (this.length > maxLength) {\r\n                return String(this);\r\n            }\r\n\r\n            if (!fillString) {\r\n                fillString = \" \";\r\n            }\r\n\r\n            const nbRepeats = Math.ceil((maxLength - this.length) / fillString.length);\r\n            let result = \"\";\r\n            for (let i = 0; i < nbRepeats; i++) {\r\n                result += fillString;\r\n            }\r\n            return result + this;\r\n        }\r\n    }\r\n}\r\nregisterPadStartPolyfill(); // for IE11\r\n\r\nclass Color {\r\n    public static readonly BLACK: Color = new Color(0, 0, 0);\r\n    public static readonly WHITE: Color = new Color(255, 255, 255);\r\n    public static readonly GREEN: Color = new Color(0, 255, 0);\r\n\r\n    public static random(): Color {\r\n        return new Color(Color.randomChannel(), Color.randomChannel(), Color.randomChannel());\r\n    }\r\n\r\n    /** @param r in [0, 255]\r\n     *  @param g in [0, 255]\r\n     *  @param b in [0, 255]\r\n     */\r\n    public constructor(public readonly r: number, public readonly g: number, public readonly b: number) { }\r\n\r\n    public toString(): string {\r\n        if (!this.hexString) {\r\n            const rHex = this.r.toString(16).padStart(2, \"0\");\r\n            const gHex = this.g.toString(16).padStart(2, \"0\");\r\n            const bHex = this.b.toString(16).padStart(2, \"0\");\r\n            this.hexString = `#${rHex}${gHex}${bHex}`;\r\n        }\r\n\r\n        return this.hexString;\r\n    }\r\n\r\n    private hexString: string;\r\n\r\n    private static randomChannel(): number {\r\n        return Math.floor(256 * Math.random());\r\n    }\r\n}\r\n\r\nexport { Color };\r\n","import { Color } from \"./color/color\";\r\n\r\nimport { ECollisionTestType, EPrimitive, Parameters } from \"./parameters\";\r\n\r\nimport { EVisibility, PatternBase } from \"./patterns/pattern-base\";\r\nimport { PatternCircle } from \"./patterns/pattern-circle\";\r\nimport { PatternHeart } from \"./patterns/pattern-heart\";\r\nimport { PatternRectangle } from \"./patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"./patterns/pattern-square\";\r\nimport { PatternTriangle } from \"./patterns/pattern-triangle\";\r\n\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\n\r\nimport { ILine } from \"./utils/i-line\";\r\nimport { ISize } from \"./utils/i-size\";\r\n\r\ninterface ITest {\r\n    fixed: PatternBase;\r\n    mobile: PatternBase;\r\n}\r\ninterface ITestedPattern<T extends PatternBase> extends ITest {\r\n    fixed: T;\r\n    mobile: T;\r\n}\r\n\r\nconst testedSquares: ITestedPattern<PatternSquare> = {\r\n    fixed: new PatternSquare(),\r\n    mobile: new PatternSquare(),\r\n};\r\n\r\nconst testedCircles: ITestedPattern<PatternCircle> = {\r\n    fixed: new PatternCircle(),\r\n    mobile: new PatternCircle(),\r\n};\r\n\r\nconst testedRectangles: ITestedPattern<PatternRectangle> = {\r\n    fixed: new PatternRectangle(),\r\n    mobile: new PatternRectangle(),\r\n};\r\n\r\nconst testedTriangles: ITestedPattern<PatternTriangle> = {\r\n    fixed: new PatternTriangle(),\r\n    mobile: new PatternTriangle(),\r\n};\r\n\r\nconst testedHears: ITestedPattern<PatternHeart> = {\r\n    fixed: new PatternHeart(),\r\n    mobile: new PatternHeart(),\r\n};\r\n\r\nfunction getCurrentTestItems(): ITest {\r\n    const primitive = Parameters.primitive;\r\n    if (primitive === EPrimitive.SQUARE) {\r\n        return testedSquares;\r\n    } else if (primitive === EPrimitive.CIRCLE) {\r\n        return testedCircles;\r\n    } else if (primitive === EPrimitive.RECTANGLE) {\r\n        return testedRectangles;\r\n    } else if (primitive === EPrimitive.TRIANGLE) {\r\n        return testedTriangles\r\n    } else {\r\n        return testedHears;\r\n    }\r\n}\r\n\r\nfunction computeSquare(sideSize: number): ILine[] {\r\n    return computeRectangle({ width: sideSize, height: sideSize });\r\n}\r\n\r\nfunction computeRectangle(size: ISize): ILine[] {\r\n    return [\r\n        { from: { x: -0.5 * size.width, y: -0.5 * size.height }, to: { x: +0.5 * size.width, y: -0.5 * size.height } },\r\n        { from: { x: +0.5 * size.width, y: -0.5 * size.height }, to: { x: +0.5 * size.width, y: +0.5 * size.height } },\r\n        { from: { x: +0.5 * size.width, y: +0.5 * size.height }, to: { x: -0.5 * size.width, y: +0.5 * size.height } },\r\n        { from: { x: -0.5 * size.width, y: +0.5 * size.height }, to: { x: -0.5 * size.width, y: -0.5 * size.height } },\r\n    ];\r\n}\r\n\r\nfunction mainDebugCollisions(): void {\r\n    const plotter = new PlotterCanvas2D();\r\n\r\n    type DrawFunction = (items: PatternBase[]) => unknown;\r\n    function getDrawFunction(): DrawFunction {\r\n        const primitive = Parameters.primitive;\r\n        if (primitive === EPrimitive.SQUARE) {\r\n            return (items: PatternBase[]) => plotter.drawSquares(items as PatternSquare[]);\r\n        } else if (primitive === EPrimitive.CIRCLE) {\r\n            return (items: PatternBase[]) => plotter.drawCircles(items as PatternCircle[]);\r\n        } else if (primitive === EPrimitive.RECTANGLE) {\r\n            return (items: PatternBase[]) => plotter.drawRectangles(items as PatternRectangle[]);\r\n        } else if (primitive === EPrimitive.TRIANGLE) {\r\n            return (items: PatternBase[]) => plotter.drawTriangles(items as PatternTriangle[]);\r\n        } else {\r\n            return (items: PatternBase[]) => plotter.drawHearts(items as PatternHeart[]);\r\n        }\r\n    }\r\n\r\n    let zoomFactor = 1;\r\n    Page.Canvas.Observers.mouseWheel.push((delta: number) => {\r\n        zoomFactor += 0.1 * delta;\r\n        zoomFactor = Math.max(0.2, Math.min(10, zoomFactor));\r\n    });\r\n    function mainLoop(): void {\r\n        const currentTestType = Parameters.currentCollisionType;\r\n\r\n        const testitems = getCurrentTestItems();\r\n\r\n        const canvasSize = Page.Canvas.getSize();\r\n        const minCanvasSide = Math.min(canvasSize[0], canvasSize[1]);\r\n        const mousePosRelative = Page.Canvas.getMousePosition();\r\n        testitems.mobile.center.x = (mousePosRelative[0] - 0.5) * canvasSize[0];\r\n        testitems.mobile.center.y = (mousePosRelative[1] - 0.5) * canvasSize[1];\r\n        testitems.fixed.center.x = 0;\r\n        testitems.fixed.center.y = 0;\r\n        testitems.fixed.size = 0.5 * zoomFactor * minCanvasSide;\r\n\r\n        const drawFunction = getDrawFunction();\r\n        if (currentTestType === ECollisionTestType.PRIMITIVE) {\r\n            // bracket notations allows access to private fields/method while still keeping a bit of type checking\r\n            testitems.mobile.size = testitems.mobile[\"computeBiggestSizePossibleToAvoidItem\"](testitems.fixed, true).size;\r\n\r\n            const lines = computeSquare(testitems.fixed.size);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.fixed, testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        } else if (currentTestType === ECollisionTestType.POINT) {\r\n            // bracket notations allows access to private fields/method while still keeping a bit of type checking\r\n            testitems.mobile.size = testitems.mobile[\"computeBiggestSizePossibleToAvoidPoint\"]({ x: 0, y: 0 });\r\n\r\n            const lines = computeSquare(0.5);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        } else {\r\n            testitems.mobile.size = 0.2 * zoomFactor * minCanvasSide;\r\n\r\n            const domainSize: ISize = { width: 0.5 * canvasSize[0], height: 0.5 * canvasSize[1] };\r\n            const visibility = testitems.mobile.computeVisibility(domainSize);\r\n            if (visibility === EVisibility.COVERS_VIEW) {\r\n                console.log(\"covers view\");\r\n            } else if (visibility === EVisibility.OUT_OF_VIEW) {\r\n                console.log(\"out of view\");\r\n            } else {\r\n                console.log(\"visible\");\r\n            }\r\n\r\n            const lines = computeRectangle(domainSize);\r\n            plotter.initialize(Color.BLACK);\r\n            drawFunction([testitems.mobile]);\r\n            plotter.drawLines(lines, Color.GREEN);\r\n            plotter.finalize();\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nexport { mainDebugCollisions };\r\n","import { Color } from \"./color/color\";\r\nimport { ColorPicker } from \"./color/color-picker\";\r\n\r\nimport { EPrimitive, Parameters } from \"./parameters\";\r\n\r\nimport { IPattern } from \"./patterns/i-pattern\";\r\nimport { EVisibility, PatternBase } from \"./patterns/pattern-base\";\r\nimport { PatternCircle } from \"./patterns/pattern-circle\";\r\nimport { PatternHeart } from \"./patterns/pattern-heart\";\r\nimport { PatternRectangle } from \"./patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"./patterns/pattern-square\";\r\nimport { PatternTriangle } from \"./patterns/pattern-triangle\";\r\n\r\nimport { PlotterBase } from \"./plotter/plotter-base\";\r\n\r\nimport { Grid } from \"./space-grid/grid\";\r\n\r\nimport * as Statistics from \"./statistics/statistics\";\r\n\r\nimport { IPoint } from \"./utils/i-point\";\r\nimport { ISize } from \"./utils/i-size\";\r\nimport { NumberRange } from \"./utils/number-range\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nclass Engine {\r\n    private initializedItemsList: PatternBase[]; // stored in the order they must be drawn.\r\n    private uninitializedItemsList: PatternBase[]; // stored in no particular order\r\n    private lastRecyclingTime: number;\r\n\r\n    private currentPrimitive: EPrimitive;\r\n    private createItem: () => PatternBase;\r\n\r\n    private readonly grid: Grid; // used to index the items' positions for faster recycling\r\n\r\n    private readonly zoomCenter: IPoint;\r\n\r\n    private static readonly DEFAULT_BACKGROUND_ITEM: IPattern = { nestingLevel: 0, color: Color.BLACK };\r\n    private currentBackgroundItem: IPattern | null;\r\n\r\n    public constructor() {\r\n        this.initializedItemsList = [];\r\n        this.uninitializedItemsList = [];\r\n        this.lastRecyclingTime = 0;\r\n\r\n        this.grid = new Grid();\r\n        this.zoomCenter = { x: 0, y: 0 }; // canvas center\r\n        this.currentBackgroundItem = null;\r\n    }\r\n\r\n    public reset(): void {\r\n        const primitive = Parameters.primitive;\r\n\r\n        if (primitive === EPrimitive.SQUARE) {\r\n            this.createItem = () => new PatternSquare();\r\n        } else if (primitive === EPrimitive.CIRCLE) {\r\n            this.createItem = () => new PatternCircle();\r\n        } else if (primitive === EPrimitive.RECTANGLE) {\r\n            this.createItem = () => new PatternRectangle();\r\n        } else if (primitive === EPrimitive.TRIANGLE) {\r\n            this.createItem = () => new PatternTriangle();\r\n        } else if (primitive === EPrimitive.HEART) {\r\n            this.createItem = () => new PatternHeart();\r\n        } else {\r\n            throw new Error(`Invalid primitive \"${primitive}.`);\r\n        }\r\n\r\n        this.initializedItemsList = [];\r\n        this.uninitializedItemsList = [];\r\n        this.currentPrimitive = primitive;\r\n        this.currentBackgroundItem = null;\r\n        this.zoomCenter.x = 0;\r\n        this.zoomCenter.y = 0;\r\n    }\r\n\r\n    public setItemsCount(wantedCount: number): void {\r\n        const initializedCount = this.initializedItemsList.length;\r\n        const uninitializedCount = this.uninitializedItemsList.length;\r\n\r\n        const totalItemsCount = initializedCount + uninitializedCount;\r\n        if (wantedCount > totalItemsCount) { // items to add\r\n            const itemsToAdd = wantedCount - totalItemsCount;\r\n            for (let i = 0; i < itemsToAdd; i++) {\r\n                const newItem = this.createItem();\r\n                this.uninitializedItemsList.push(newItem);\r\n            }\r\n        } else if (wantedCount < totalItemsCount) { // items to remove\r\n            if (wantedCount > initializedCount) {\r\n                this.uninitializedItemsList.length = wantedCount - initializedCount;\r\n            } else {\r\n                this.uninitializedItemsList = [];\r\n                this.initializedItemsList.length = wantedCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(plotter: PlotterBase): boolean {\r\n        Engine.DEFAULT_BACKGROUND_ITEM.color = (Parameters.blackBackground) ? Color.BLACK : Color.WHITE;\r\n        ColorPicker.darkMode = Parameters.blackBackground;\r\n        ColorPicker.highContrastMode = Parameters.highContrast;\r\n\r\n        let everythingDrawn = plotter.isReady;\r\n        if (!Parameters.isZooming) {\r\n            const timeSinceLastRecycling = performance.now() - this.lastRecyclingTime;\r\n            const blendingOver = timeSinceLastRecycling > PatternBase.maxBlendingTime;\r\n            if (!blendingOver) {\r\n                everythingDrawn = false;\r\n            }\r\n        }\r\n\r\n        const backgroundColor = this.computeBackgroundColor();\r\n        plotter.initialize(backgroundColor);\r\n\r\n        let itemsToDraw: PatternBase[];\r\n        if (Parameters.oneCellOnly) {\r\n            itemsToDraw = this.grid.getItemsFromCell(Parameters.cellX, Parameters.cellY);\r\n        } else {\r\n            itemsToDraw = this.initializedItemsList;\r\n        }\r\n\r\n        if (this.currentPrimitive === EPrimitive.SQUARE) {\r\n            plotter.drawSquares(itemsToDraw as PatternSquare[]);\r\n        } else if (this.currentPrimitive === EPrimitive.CIRCLE) {\r\n            plotter.drawCircles(itemsToDraw as PatternCircle[]);\r\n        } else if (this.currentPrimitive === EPrimitive.RECTANGLE) {\r\n            plotter.drawRectangles(itemsToDraw as PatternRectangle[]);\r\n        } else if (this.currentPrimitive === EPrimitive.TRIANGLE) {\r\n            plotter.drawTriangles(itemsToDraw as PatternTriangle[]);\r\n        } else if (this.currentPrimitive === EPrimitive.HEART) {\r\n            plotter.drawHearts(itemsToDraw as PatternHeart[]);\r\n        } else {\r\n            throw new Error(`Unsupported primitive ${this.currentPrimitive} for drawing.`);\r\n        }\r\n\r\n        if (Parameters.showGrid) {\r\n            this.grid.draw(plotter);\r\n        }\r\n\r\n        plotter.finalize();\r\n\r\n        return everythingDrawn;\r\n    }\r\n\r\n    /** @returns true if the update changed something that requires a redraw */\r\n    public udpate(deltaTimeInSeconds: number, domainSize: ISize): boolean {\r\n        const mayRecycle = this.uninitializedItemsList.length > 0;\r\n        const willZoom = this.initializedItemsList.length > 0 && Parameters.isZooming;\r\n        const needToInitializeGrid = typeof this.grid === \"undefined\";\r\n        const needUpdate = mayRecycle || willZoom || needToInitializeGrid;\r\n        if (!needUpdate) {\r\n            return false;\r\n        }\r\n\r\n        let requiresRedraw = false;\r\n\r\n        Statistics.timeSpentInReindex.start();\r\n        const gridChanged = this.reindexItems(domainSize);\r\n        requiresRedraw = requiresRedraw || gridChanged;\r\n        Statistics.timeSpentInReindex.stop();\r\n\r\n        Statistics.timeSpentInRecycle.start();\r\n        const itemsRecycled = this.performRecycling(domainSize);\r\n        requiresRedraw = requiresRedraw || itemsRecycled;\r\n        if (itemsRecycled) {\r\n            this.lastRecyclingTime = performance.now();\r\n        }\r\n        Statistics.timeSpentInRecycle.stop();\r\n\r\n        Statistics.timeSpentInZoom.start();\r\n        if (Parameters.isZooming) {\r\n            const itemsMoved = (this.initializedItemsList.length > 0);\r\n            this.performZoom(deltaTimeInSeconds, domainSize);\r\n            requiresRedraw = requiresRedraw || itemsMoved;\r\n        }\r\n        Statistics.timeSpentInZoom.stop();\r\n\r\n        return requiresRedraw;\r\n    }\r\n\r\n    /**\r\n     * @param domainSize in pixels\r\n     * @param cellSize in pixels\r\n     * @returns true if a redraw is required\r\n     */\r\n    private reindexItems(domainSize: ISize): boolean {\r\n        let gridCellSize = Parameters.cellSize;\r\n        if (Parameters.adaptativeGrid) {\r\n            const targetItemsPerCell = Parameters.targetItemsPerGridCell;\r\n            const lastItemsPerCell = this.grid.itemsPerCell;\r\n            gridCellSize = this.grid.cellSize;\r\n            if (lastItemsPerCell < targetItemsPerCell) {\r\n                gridCellSize++;\r\n            } else {\r\n                gridCellSize--;\r\n            }\r\n        }\r\n\r\n        return this.grid.reset(domainSize, gridCellSize, this.initializedItemsList);\r\n    }\r\n\r\n    private performRecycling(domainSize: ISize): boolean {\r\n        let nbItemsRecycled = 0;\r\n\r\n        const allowOverlapping = Parameters.allowOverlapping;\r\n        const sizeFactor = 1 - Parameters.spacing;\r\n        const acceptedSizesForNewItems = new NumberRange(Parameters.minSize, 1000000);\r\n        const maxTries = Parameters.maxTriesPerFrame;\r\n        const backgroundItem = this.backgroundItem;\r\n\r\n        let triesLeft = maxTries;\r\n        while (this.uninitializedItemsList.length > 0 && triesLeft > 0) {\r\n            const currentItem = this.uninitializedItemsList.pop();\r\n\r\n            const resetResult = currentItem.reset(domainSize, this.grid, sizeFactor, acceptedSizesForNewItems, allowOverlapping, backgroundItem, triesLeft);\r\n            triesLeft -= resetResult.nbTries;\r\n            if (resetResult.success) {\r\n                this.initializedItemsList.push(currentItem);\r\n                this.grid.registerItem(currentItem);\r\n                nbItemsRecycled++;\r\n            } else {\r\n                this.uninitializedItemsList.push(currentItem);\r\n            }\r\n        }\r\n\r\n        const totalItemsCount = this.initializedItemsList.length + this.uninitializedItemsList.length;\r\n        const nbPendingRecycling = this.uninitializedItemsList.length;\r\n        const nbTriesUsed = maxTries - triesLeft;\r\n        Statistics.registerRecyclingStats(totalItemsCount, nbItemsRecycled, nbPendingRecycling, nbTriesUsed);\r\n        this.grid.computeStatistics();\r\n\r\n        return nbItemsRecycled > 0;\r\n    }\r\n\r\n    /**\r\n     * Performs zoom on initialized items.\r\n     * During zooming, items might go out of view. In that case:\r\n     *   - these items are added to the uninitializedItemsList\r\n     *   - these items are removed from the initializedItemsList\r\n     * Does not modify the order of the initializedItemsList.\r\n     * @returns true if something changed and requires a redraw\r\n     */\r\n    private performZoom(deltaTimeInSeconds: number, domainSize: ISize): void {\r\n        this.updateZoomCenter(domainSize);\r\n\r\n        const newInitializedArray: PatternBase[] = [];\r\n\r\n        const zoomSpeed = 1 + deltaTimeInSeconds * Parameters.zoomSpeed;\r\n        for (const item of this.initializedItemsList) {\r\n            item.zoomIn(this.zoomCenter, zoomSpeed);\r\n\r\n            let visibility: EVisibility;\r\n            if (item.size > PatternBase.MAX_SIZE) {\r\n                visibility = EVisibility.OUT_OF_VIEW;\r\n            } else {\r\n                visibility = item.computeVisibility(domainSize);\r\n            }\r\n\r\n            if (visibility === EVisibility.VISIBLE) {\r\n                newInitializedArray.push(item);\r\n            } else {\r\n                this.uninitializedItemsList.push(item); // recycle item\r\n\r\n                if (visibility === EVisibility.COVERS_VIEW) {\r\n                    this.currentBackgroundItem = {\r\n                        nestingLevel: item.nestingLevel % 100000, // make ensting levels loop\r\n                        color: item.rawColor,\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.initializedItemsList = newInitializedArray;\r\n    }\r\n\r\n    private computeBackgroundColor(): Color {\r\n        const backgroundItem = this.backgroundItem;\r\n        return ColorPicker.getDisplayColor(backgroundItem.color, backgroundItem.nestingLevel);\r\n    }\r\n\r\n    private updateZoomCenter(domainSize: ISize): void {\r\n        if (Page.Canvas.isMouseDown()) {\r\n            const mousePosition = Page.Canvas.getMousePosition(); // in [0,1]^2\r\n            this.zoomCenter.x = domainSize.width * (mousePosition[0] - 0.5);\r\n            this.zoomCenter.y = domainSize.height * (mousePosition[1] - 0.5);\r\n        }\r\n\r\n        const halfWidth = 0.5 * domainSize.width;\r\n        const halfHeight = 0.5 * domainSize.height;\r\n\r\n        if (this.zoomCenter.x < -halfWidth) {\r\n            this.zoomCenter.x = -halfWidth\r\n        } else if (this.zoomCenter.x > halfWidth) {\r\n            this.zoomCenter.x = halfWidth;\r\n        }\r\n\r\n        if (this.zoomCenter.y < -halfHeight) {\r\n            this.zoomCenter.y = -halfHeight\r\n        } else if (this.zoomCenter.y > halfHeight) {\r\n            this.zoomCenter.y = halfHeight;\r\n        }\r\n    }\r\n\r\n    private get backgroundItem(): IPattern {\r\n        return (this.currentBackgroundItem !== null) ? this.currentBackgroundItem : Engine.DEFAULT_BACKGROUND_ITEM;\r\n    }\r\n}\r\n\r\nexport { Engine };\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\((.*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean)  => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", \"./shaders/\" + filename, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","import { GLResource } from \"./gl-resource\";\r\n\r\nenum Usage {\r\n    DYNAMIC,\r\n    STATIC,\r\n}\r\n\r\nclass VBO extends GLResource {\r\n    public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n        const vert = [\r\n            minX, minY,\r\n            maxX, minY,\r\n            minX, maxY,\r\n            maxX, maxY,\r\n        ];\r\n\r\n        return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT, true);\r\n    }\r\n\r\n    private id: WebGLBuffer;\r\n    private size: number;\r\n    private type: GLenum;\r\n    private normalize: GLboolean;\r\n    private stride: GLsizei;\r\n    private offset: GLintptr;\r\n    private usage: Usage;\r\n\r\n    constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum, staticUsage: boolean = true) {\r\n        super(gl);\r\n\r\n        this.id = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (staticUsage) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.size = size;\r\n        this.type = type;\r\n        this.normalize = false;\r\n        this.stride = 0;\r\n        this.offset = 0;\r\n        this.usage = (staticUsage) ? Usage.STATIC : Usage.DYNAMIC;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this.gl().deleteBuffer(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public bind(location: GLuint): void {\r\n        const gl = super.gl();\r\n        gl.enableVertexAttribArray(location);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n    }\r\n\r\n    public setData(array: any): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (this.usage === Usage.STATIC) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n}\r\n\r\nexport { VBO };\r\n","import { ColorPicker } from \"./color/color-picker\";\r\n\r\nimport { mainDebugCollisions } from \"./debug-collisions\";\r\n\r\nimport { Engine } from \"./engine\";\r\n\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { PlotterCanvas2D } from \"./plotter/plotter-canvas-2d\";\r\nimport { PlotterCanvasWebGL } from \"./plotter/plotter-canvas-webgl\";\r\nimport { PlotterSVG } from \"./plotter/plotter-svg\";\r\n\r\nimport * as Statistics from \"./statistics/statistics\";\r\n\r\nimport * as Helper from \"./utils/helper\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction main(): void {\r\n    const canvasPlotter = Parameters.isWebGLVersion ? new PlotterCanvasWebGL() : new PlotterCanvas2D();\r\n\r\n    const engine = new Engine();\r\n\r\n    let needToRedraw = true;\r\n\r\n    Parameters.addRedrawObserver(() => needToRedraw = true);\r\n    Parameters.addClearObserver(() => {\r\n        engine.reset();\r\n        needToRedraw = true;\r\n    });\r\n\r\n    Parameters.addDownloadObserver(() => {\r\n        const svgPlotter = new PlotterSVG(canvasPlotter.size);\r\n        engine.draw(svgPlotter);\r\n\r\n        const fileName = \"packing.svg\";\r\n        const svgString = svgPlotter.export();\r\n        Helper.downloadTextFile(fileName, svgString);\r\n    });\r\n\r\n    let lastRunTime = 0;\r\n    Statistics.initialize();\r\n    engine.reset();\r\n    function mainLoop(time: number): void {\r\n        Statistics.timeSpentInMainLoop.start();\r\n\r\n        const deltaTimeInSeconds = 0.001 * (time - lastRunTime);\r\n        lastRunTime = time;\r\n\r\n        const wantedItemsCount = 1000 * Parameters.quantity;\r\n        engine.setItemsCount(wantedItemsCount);\r\n\r\n        ColorPicker.setPalette(Parameters.paletteId);\r\n\r\n        Statistics.timeSpentInUpdate.start();\r\n        const updateChangedSomething = engine.udpate(deltaTimeInSeconds, canvasPlotter.size);\r\n        needToRedraw = needToRedraw || updateChangedSomething;\r\n        Statistics.timeSpentInUpdate.stop();\r\n\r\n        if (needToRedraw) {\r\n            Statistics.timeSpentInDraw.start();\r\n            const successfulDraw = engine.draw(canvasPlotter);\r\n            Statistics.timeSpentInDraw.stop();\r\n\r\n            needToRedraw = !successfulDraw;\r\n        }\r\n\r\n        Statistics.timeSpentInMainLoop.stop();\r\n        Statistics.registerFrame();\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nif (Parameters.isInCollisionsDebug) {\r\n    mainDebugCollisions();\r\n} else {\r\n    main();\r\n}\r\n","import \"./page-interface-generated\";\r\nimport * as Helpers from \"./utils/helper\";\r\n\r\n\r\nconst controlId = {\r\n    PRIMITIVE: \"primitive-tab-id\",\r\n    RESET: \"reset-button-id\",\r\n    SPACING: \"spacing-range-id\",\r\n    MIN_SIZE: \"min-size-range-id\",\r\n    ALLOW_OVERLAPPING: \"allow-overlapping-checkbox-id\",\r\n    QUANTITY: \"quantity-range-id\",\r\n    ZOOM_SPEED: \"zoom-speed-range-id\",\r\n    BACKGROUND: \"background-tab-id\",\r\n    PALETTE: \"palette-picker-id\",\r\n    BLENDING: \"blending-checkbox-id\",\r\n    HIGH_CONTRAST: \"high-contrast-checkbox-id\",\r\n    INDICATORS: \"indicators-checkbox-id\",\r\n\r\n    // DEBUG\r\n    MAX_TRIES_PER_FRAME: \"max-tries-per-frame-range-id\",\r\n    INSTANCING: \"instancing-checkbox-id\",\r\n    ADAPTATIVE_GRID: \"adaptative-grid-checkbox-id\",\r\n    TARGET_ITEMS_PER_GRIDCELL: \"target-items-per-gridcell-checkbox-id\",\r\n    CELL_SIZE: \"cell-size-range-id\",\r\n    ONE_CELL_ONLY: \"one-cell-only-checkbox-id\",\r\n    SHOW_GRID: \"show-grid-checkbox-id\",\r\n    CELL_X: \"cell-x-range-id\",\r\n    CELL_Y: \"cell-y-range-id\",\r\n    COLLISION_TEST_TYPE: \"collision-test-type-tab-id\",\r\n\r\n    DOWNLOAD: \"result-download-id\",\r\n};\r\n\r\ntype RedrawObserver = () => unknown;\r\nconst redrawObservers: RedrawObserver[] = [];\r\nfunction triggerRedraw(): void {\r\n    for (const observer of redrawObservers) {\r\n        observer();\r\n    }\r\n}\r\nPage.Canvas.Observers.canvasResize.push(triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ALLOW_OVERLAPPING, triggerRedraw);\r\nPage.Tabs.addObserver(controlId.BACKGROUND, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.HIGH_CONTRAST, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.ONE_CELL_ONLY, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.SHOW_GRID, triggerRedraw);\r\nPage.Checkbox.addObserver(controlId.INSTANCING, triggerRedraw);\r\nPage.Range.addObserver(controlId.QUANTITY, triggerRedraw);\r\nPage.Range.addObserver(controlId.CELL_X, triggerRedraw);\r\nPage.Range.addObserver(controlId.CELL_Y, triggerRedraw);\r\n\r\ntype ClearObserver = () => unknown;\r\nconst clearObservers: ClearObserver[] = [];\r\nfunction triggerClear(): void {\r\n    for (const observer of clearObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nfunction triggerClearIfNotZooming(): void {\r\n    if (!Parameters.isZooming) {\r\n        triggerClear();\r\n    }\r\n}\r\n\r\nPage.Button.addObserver(controlId.RESET, triggerClear);\r\nPage.Tabs.addObserver(controlId.PRIMITIVE, triggerClear);\r\nPage.Range.addObserver(controlId.SPACING, triggerClearIfNotZooming);\r\nPage.Range.addObserver(controlId.MIN_SIZE, triggerClearIfNotZooming);\r\nPage.Picker.addObserver(controlId.PALETTE, triggerClearIfNotZooming);\r\nPage.Checkbox.addObserver(controlId.ALLOW_OVERLAPPING, triggerClearIfNotZooming);\r\n\r\nenum EPrimitive {\r\n    SQUARE = \"square\",\r\n    CIRCLE = \"circle\",\r\n    RECTANGLE = \"rectangle\",\r\n    TRIANGLE = \"triangle\",\r\n    HEART = \"heart\",\r\n}\r\n\r\nenum ECollisionTestType {\r\n    PRIMITIVE = \"primitive\",\r\n    POINT = \"point\",\r\n    VISIBILITY = \"visbility\",\r\n}\r\n\r\nconst isInDebug = Helpers.getQueryStringValue(\"debug\") === \"1\";\r\nconst isInCollisionsDebug = Helpers.getQueryStringValue(\"debug-collisions\") === \"1\";\r\nPage.Sections.setVisibility(\"display-section\", !isInCollisionsDebug);\r\nPage.Sections.setVisibility(\"debug-section\", isInDebug && !isInCollisionsDebug);\r\nPage.Sections.setVisibility(\"debug-collisions-section\", isInDebug && isInCollisionsDebug);\r\nPage.Canvas.setIndicatorVisibility(\"main-loop-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"draw-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"draw-allocatebuffer-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"draw-fillbuffer-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"draw-uploadvbo-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"draw-drawX-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-reindex-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-reindex-resetdomain-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-reindex-reindexitems-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-recycle-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"update-zoom-time\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-reclycled-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-pending-recycling-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"items-recycling-tries-count\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-size\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-cell-size\", isInDebug);\r\nPage.Canvas.setIndicatorVisibility(\"grid-items-per-cell\", isInDebug);\r\n\r\nif (isInDebug) {\r\n    Page.Checkbox.setChecked(controlId.INDICATORS, true);\r\n} else {\r\n    Page.Checkbox.setChecked(controlId.ONE_CELL_ONLY, false);\r\n    Page.Checkbox.setChecked(controlId.SHOW_GRID, false);\r\n}\r\n\r\nconst isWebGLVersion = Helpers.getQueryStringValue(\"webgl\") !== \"0\";\r\nif (!isWebGLVersion) {\r\n    Page.Checkbox.setChecked(controlId.BLENDING, false);\r\n    Page.Controls.setVisibility(controlId.BLENDING, false);\r\n    Page.Controls.setVisibility(controlId.INSTANCING, false);\r\n}\r\n\r\nfunction updateIndicatorsVisibility(): void {\r\n    const visible = !isInCollisionsDebug && Page.Checkbox.isChecked(controlId.INDICATORS);\r\n    Page.Canvas.setIndicatorsVisibility(visible);\r\n}\r\nPage.Checkbox.addObserver(controlId.INDICATORS, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nfunction updateGridControlsVisibility(): void {\r\n    const adaptative = Page.Checkbox.isChecked(controlId.ADAPTATIVE_GRID);\r\n    Page.Controls.setVisibility(controlId.TARGET_ITEMS_PER_GRIDCELL, adaptative);\r\n    Page.Controls.setVisibility(controlId.CELL_SIZE, !adaptative);\r\n}\r\nPage.Checkbox.addObserver(controlId.ADAPTATIVE_GRID, updateGridControlsVisibility);\r\nupdateGridControlsVisibility();\r\n\r\nPage.Button.addObserver(\"debug-collisions-button-id\", () => {\r\n    window.location.href = window.location.href + \"&debug-collisions=1\";\r\n});\r\n\r\nabstract class Parameters {\r\n    public static get quantity(): number {\r\n        return Page.Range.getValue(controlId.QUANTITY);\r\n    }\r\n\r\n    public static get spacing(): number {\r\n        return Page.Range.getValue(controlId.SPACING);\r\n    }\r\n\r\n    public static get minSize(): number {\r\n        return Page.Range.getValue(controlId.MIN_SIZE);\r\n    }\r\n\r\n    public static get allowOverlapping(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ALLOW_OVERLAPPING);\r\n    }\r\n\r\n    public static get primitive(): EPrimitive {\r\n        return Page.Tabs.getValues(controlId.PRIMITIVE)[0] as EPrimitive;\r\n    }\r\n\r\n    public static get zoomSpeed(): number {\r\n        return Page.Range.getValue(controlId.ZOOM_SPEED);\r\n    }\r\n    public static get isZooming(): boolean {\r\n        return Math.abs(Parameters.zoomSpeed) > .001; // avoid float precision issues\r\n    }\r\n\r\n    public static get blackBackground(): boolean {\r\n        return Page.Tabs.getValues(controlId.BACKGROUND)[0] === \"dark\";\r\n    }\r\n\r\n    public static get blending(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.BLENDING);\r\n    }\r\n\r\n    public static get paletteId(): number {\r\n        return +Page.Picker.getValue(controlId.PALETTE);\r\n    }\r\n\r\n    public static get highContrast(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.HIGH_CONTRAST);\r\n    }\r\n\r\n    public static get isInDebug(): boolean {\r\n        return isInDebug;\r\n    }\r\n    public static get isInCollisionsDebug(): boolean {\r\n        return isInCollisionsDebug;\r\n    }\r\n    public static get isWebGLVersion(): boolean {\r\n        return isWebGLVersion;\r\n    }\r\n\r\n    /* === DEBUG SECTION === */\r\n\r\n    public static get maxTriesPerFrame(): number {\r\n        return 100 * Page.Range.getValue(controlId.MAX_TRIES_PER_FRAME);\r\n    }\r\n    public static get adaptativeGrid(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ADAPTATIVE_GRID);\r\n    }\r\n    public static get targetItemsPerGridCell(): number {\r\n        return Page.Range.getValue(controlId.TARGET_ITEMS_PER_GRIDCELL);\r\n    }\r\n    public static get cellSize(): number {\r\n        return Page.Range.getValue(controlId.CELL_SIZE);\r\n    }\r\n    public static get oneCellOnly(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ONE_CELL_ONLY);\r\n    }\r\n    public static get showGrid(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.SHOW_GRID);\r\n    }\r\n    public static get cellX(): number {\r\n        return Page.Range.getValue(controlId.CELL_X);\r\n    }\r\n    public static get cellY(): number {\r\n        return Page.Range.getValue(controlId.CELL_Y);\r\n    }\r\n\r\n    public static get useInstancing(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.INSTANCING);\r\n    }\r\n    public static disallowInstancing(): void {\r\n        Page.Checkbox.setChecked(controlId.INSTANCING, false);\r\n        Page.Controls.setVisibility(controlId.INSTANCING, false);\r\n    }\r\n\r\n    public static get currentCollisionType(): ECollisionTestType {\r\n        return Page.Tabs.getValues(controlId.COLLISION_TEST_TYPE)[0] as ECollisionTestType;\r\n    }\r\n\r\n    public static addRedrawObserver(callback: RedrawObserver): void {\r\n        redrawObservers.push(callback);\r\n    }\r\n\r\n    public static addClearObserver(callback: ClearObserver): void {\r\n        clearObservers.push(callback);\r\n    }\r\n\r\n    public static addDownloadObserver(callback: () => unknown): void {\r\n        Page.FileControl.addDownloadObserver(controlId.DOWNLOAD, callback);\r\n    }\r\n}\r\n\r\nexport { Parameters, EPrimitive, ECollisionTestType };\r\n","import { Color } from \"../color/color\";\r\nimport { ColorPicker } from \"../color/color-picker\";\r\n\r\nimport { Parameters } from \"../parameters\";\r\n\r\nimport { Grid } from \"../space-grid/grid\";\r\n\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\nimport { NumberRange } from \"../utils/number-range\";\r\n\r\nimport { IPattern } from \"./i-pattern\";\r\n\r\nconst CANVAS_CENTER: IPoint = { x: 0, y: 0 };\r\n\r\nconst MAX_TEST_ID = 999999999999; // lower (for extra safety) than Number.MAX_SAFE_INTEGER (which is not supported by IE11)\r\nlet globalLastTestId = 1;\r\n\r\nfunction generateTestId(): number {\r\n    globalLastTestId = (globalLastTestId + 1) % MAX_TEST_ID;\r\n    return globalLastTestId;\r\n}\r\n\r\ninterface IPatternResetResult {\r\n    success: boolean;\r\n    nbTries: number;\r\n}\r\n\r\ninterface ISizeComputationResult {\r\n    size: number;\r\n    isInside: boolean;\r\n}\r\n\r\nenum EVisibility {\r\n    VISIBLE = 0,\r\n    OUT_OF_VIEW = 1,\r\n    COVERS_VIEW = 2,\r\n}\r\n\r\nabstract class PatternBase {\r\n    /* When an item is too big, it can lead to visual glitches due to float precision issue on GPU.\r\n     *  To avoid this, remove items that are too big. */\r\n    public static readonly MAX_SIZE: number = 1000000;\r\n\r\n    private static readonly MAX_SIZE_LOWER: number = 0.75 * PatternBase.MAX_SIZE;\r\n    private static readonly MAX_SIZE_GAP: number = PatternBase.MAX_SIZE - PatternBase.MAX_SIZE_LOWER;\r\n\r\n    public static get maxBlendingTime(): number {\r\n        if (Parameters.blending) {\r\n            return 500 / (1 + Parameters.zoomSpeed);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public readonly center: IPoint;\r\n    public size: number;\r\n    public nestingLevel: number;\r\n    public rawColor: Color;\r\n\r\n    private parentItem: PatternBase | null; // used only momentarily during resetting\r\n    private lastTestId: number;\r\n    private initializationTime: number;\r\n\r\n    protected constructor() {\r\n        this.center = { x: 0, y: 0 };\r\n        this.size = 0;\r\n        this.nestingLevel = 0;\r\n        this.rawColor = Color.random();\r\n        this.lastTestId = 0;\r\n    }\r\n\r\n    public get color(): Color {\r\n        return ColorPicker.getDisplayColor(this.rawColor, this.nestingLevel);\r\n    }\r\n\r\n    public zoomIn(zoomCenter: IPoint, zoomFactor: number): void {\r\n        this.center.x = (this.center.x - zoomCenter.x) * zoomFactor + zoomCenter.x;\r\n        this.center.y = (this.center.y - zoomCenter.y) * zoomFactor + zoomCenter.y;\r\n        this.size *= zoomFactor;\r\n    }\r\n\r\n    /** @returns the number of tries (regardless of the success of the reset) */\r\n    public reset(domainSize: ISize, grid: Grid, sizeFactor: number, acceptedSizes: NumberRange, allowOverlapping: boolean, backgroundPattern: IPattern, maxTries: number): IPatternResetResult {\r\n        const result: IPatternResetResult = {\r\n            nbTries: 0,\r\n            success: false,\r\n        };\r\n\r\n        while (result.nbTries < maxTries && !result.success) {\r\n            this.randomizePosition(domainSize);\r\n            this.parentItem = null;\r\n\r\n            const maxSize = sizeFactor * this.computeBiggestSizePossible(grid, acceptedSizes.from, allowOverlapping);\r\n            if (acceptedSizes.isInRange(maxSize)) {\r\n                this.size = 2 * Math.floor(0.5 * maxSize); // need to be even to avoid aliasing\r\n                this.initializationTime = performance.now();\r\n                result.success = true;\r\n\r\n                const parentNestingLevel: number = (this.parentItem !== null) ? this.parentItem.nestingLevel : backgroundPattern.nestingLevel;\r\n                this.nestingLevel = parentNestingLevel + 1;\r\n\r\n                if (ColorPicker.usePalette) {\r\n                    const parentColor: Color = (this.parentItem !== null) ? this.parentItem.rawColor : backgroundPattern.color;\r\n                    this.rawColor = ColorPicker.getDifferentColorFromPalette(parentColor);\r\n                }\r\n            }\r\n\r\n            result.nbTries++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeOpacity(time: number, blendTime: number): number {\r\n        if (this.size > PatternBase.MAX_SIZE_LOWER) {\r\n            const r = (this.size - PatternBase.MAX_SIZE_LOWER) / PatternBase.MAX_SIZE_GAP;\r\n            return (r > 1) ? 0 : 1 - r;\r\n        }\r\n\r\n        const lifetime = time - this.initializationTime;\r\n        if (lifetime > blendTime) {\r\n            return 1;\r\n        }\r\n        return lifetime / blendTime;\r\n    }\r\n\r\n    protected abstract computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number;\r\n\r\n    protected abstract computeBiggestSizePossibleToAvoidItem(itemsToAvoid: PatternBase, allowOverlapping: boolean): ISizeComputationResult;\r\n\r\n    public abstract computeVisibility(domainSize: ISize): EVisibility;\r\n\r\n    private computeBiggestSizePossible(grid: Grid, minSizeAllowed: number, allowOverlapping: boolean): number {\r\n        const currentTestId = generateTestId();\r\n\r\n        const biggestSizeToAvoidCenter = this.computeBiggestSizePossibleToAvoidPoint(CANVAS_CENTER);\r\n        let rawMaxSize = biggestSizeToAvoidCenter;\r\n\r\n        // first, test only existing items that are in the exact same grid cell as us\r\n        const maxDistanceDetectableByExactCell = grid.getDistanceToClosestBorder(this.center);\r\n\r\n        const exactCellId = grid.getCellId(this.center);\r\n        const existingItemsFromExactCell = grid.getItemsFromCell(exactCellId.x, exactCellId.y);\r\n        const biggestSizeToAvoidClosestItems = this.computeBiggestSizePossibleToAvoidItems(existingItemsFromExactCell, minSizeAllowed, allowOverlapping, currentTestId);\r\n        rawMaxSize = Math.min(rawMaxSize, biggestSizeToAvoidClosestItems);\r\n\r\n        // the closest items were maybe not enough, test items that are a bit further\r\n        if (rawMaxSize >= maxDistanceDetectableByExactCell) {\r\n            const topLeftPoint: IPoint = { x: this.center.x - 0.5 * rawMaxSize, y: this.center.y - 0.5 * rawMaxSize };\r\n            const bottomRightPoint: IPoint = { x: this.center.x + 0.5 * rawMaxSize, y: this.center.y + 0.5 * rawMaxSize };\r\n            const minCellId = grid.getCellId(topLeftPoint);\r\n            const maxCellId = grid.getCellId(bottomRightPoint);\r\n\r\n            const additionalItemsToTest = grid.getItemsFromCellsGroup(minCellId.x, minCellId.y, maxCellId.x, maxCellId.y);\r\n            const biggestSizeToAvoidFurtherItems = this.computeBiggestSizePossibleToAvoidItems(additionalItemsToTest, minSizeAllowed, allowOverlapping, currentTestId);\r\n            rawMaxSize = Math.min(rawMaxSize, biggestSizeToAvoidFurtherItems);\r\n        }\r\n\r\n        return rawMaxSize;\r\n    }\r\n\r\n    private computeBiggestSizePossibleToAvoidItems(itemsToAvoid: PatternBase[], minSizeAllowed: number, allowOverlapping: boolean, currentTestId: number): number {\r\n        let maxSize = 100000;\r\n\r\n        for (const item of itemsToAvoid) {\r\n            if (item !== this) {\r\n                const testedAlready = (item.lastTestId === currentTestId);\r\n                if (!testedAlready) {\r\n                    if (maxSize > minSizeAllowed) {\r\n                        const result = this.computeBiggestSizePossibleToAvoidItem(item, allowOverlapping);\r\n                        if (result.size < minSizeAllowed || (!allowOverlapping && result.isInside)) {\r\n                            maxSize = 0;\r\n                        } else if (result.size < maxSize) {\r\n                            maxSize = result.size;\r\n\r\n                            if (result.isInside) {\r\n                                this.parentItem = item;\r\n                            }\r\n                        }\r\n                    }\r\n                    item.lastTestId = currentTestId;\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxSize;\r\n    }\r\n\r\n    private randomizePosition(domainSize: ISize): void {\r\n        this.center.x = Math.round(domainSize.width * (Math.random() - 0.5));\r\n        this.center.y = Math.round(domainSize.height * (Math.random() - 0.5));\r\n    }\r\n}\r\n\r\nexport { PatternBase, EVisibility, ISizeComputationResult };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nclass PatternCircle extends PatternBase {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n        return 2 * Math.sqrt(toPointX * toPointX + toPointY * toPointY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternCircle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const toCenterX = this.center.x - itemToAvoid.center.x;\r\n        const toCenterY = this.center.y - itemToAvoid.center.y;\r\n\r\n        const distance = Math.sqrt(toCenterX * toCenterX + toCenterY * toCenterY);\r\n\r\n        if (distance <= itemToAvoid.radius) {\r\n            result.isInside = true;\r\n            if (allowOverlapping) {\r\n                result.size = 2 * (itemToAvoid.radius - distance);\r\n            }\r\n        } else {\r\n            result.size = 2 * (distance - itemToAvoid.radius);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const dX = absX + halfDomainWidth;\r\n        const dY = absY + halfDomainHeight;\r\n\r\n        const radius = this.radius;\r\n        if (radius * radius > dX * dX + dY * dY) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - radius < halfDomainWidth && absY - radius < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    public get radius(): number {\r\n        return 0.5 * this.size;\r\n    }\r\n}\r\n\r\nexport { PatternCircle };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\nimport { NumberRange } from \"../utils/number-range\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nconst INVERT_SQRT_2 = 1 / Math.sqrt(2);\r\n\r\nclass PatternHeart extends PatternBase {\r\n    public static readonly a: number = 0.5 * 0.82842712474; // 2 / (1 + sqrt(2))\r\n    public static readonly b: number = 0.5 * 1.17157287525; // sqrt(2) * a\r\n    public static readonly c: number = 0.5 * 0.58578643762; // 2 + (2 + sqrt(2))\r\n\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = Math.abs(pointToAvoid.x - this.center.x); // symmetry\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n\r\n        const distance = Math.sqrt(toPointX * toPointX + toPointY * toPointY);\r\n        const EPSILON = 0.00000001; // to avoid dividing by zero\r\n\r\n        // polar coordinates\r\n        let r: number;\r\n        if (toPointY >= 0) {\r\n            r = distance * PatternHeart.a / (toPointX + toPointY + EPSILON);\r\n        } else {\r\n            r = PatternHeart.a * (toPointX - toPointY) / (distance + EPSILON);\r\n        }\r\n        return distance / r;\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternHeart, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = {\r\n            size: 0,\r\n            isInside: itemToAvoid.isPointInside(this.center),\r\n        };\r\n        if (result.isInside && !allowOverlapping) {\r\n            return result;\r\n        }\r\n\r\n        const deltaX = Math.abs(this.center.x - itemToAvoid.center.x); // symmetry\r\n        const deltaY = this.center.y - itemToAvoid.center.y;\r\n        const rotatedDeltaX = INVERT_SQRT_2 * (deltaX - deltaY);\r\n        const rotatedDeltaY = INVERT_SQRT_2 * (deltaY + deltaX);\r\n\r\n        const otherHalfB = 0.5 * itemToAvoid.size * PatternHeart.b;\r\n        if (rotatedDeltaX >= -otherHalfB && rotatedDeltaX <= otherHalfB) {\r\n            if (rotatedDeltaY >= otherHalfB) {\r\n                // console.log(\"zone A\");\r\n                result.size = (rotatedDeltaY - otherHalfB) / PatternHeart.b;\r\n            } else if (rotatedDeltaY >= 0) {\r\n                if (Math.abs(rotatedDeltaX) <= rotatedDeltaY) {\r\n                    // console.log(\"zone B\");\r\n                    result.size = 2 * (otherHalfB - rotatedDeltaY) / PatternHeart.b;\r\n                }\r\n            } else if (rotatedDeltaY <= 0) {\r\n                if (rotatedDeltaX <= otherHalfB) {\r\n                    const otherTopPoint: IPoint = {\r\n                        x: itemToAvoid.center.x,\r\n                        y: itemToAvoid.center.y - itemToAvoid.size * PatternHeart.a,\r\n                    };\r\n                    // console.log(\"zone E\");\r\n                    result.size = this.computeBiggestSizePossibleToAvoidPoint(otherTopPoint);\r\n                }\r\n            }\r\n        } else if (rotatedDeltaX <= -otherHalfB) {\r\n            const otherBottomPoint: IPoint = {\r\n                x: itemToAvoid.center.x,\r\n                y: itemToAvoid.center.y + itemToAvoid.size * PatternHeart.a,\r\n            };\r\n            // console.log(\"zone C\");\r\n            result.size = this.computeBiggestSizePossibleToAvoidPoint(otherBottomPoint);\r\n        }\r\n\r\n        if (result.size > 0) { // we found the exact perfect size\r\n            return result;\r\n        }\r\n\r\n        // In these areas, I didn't find any easy way to compute the exact max size.\r\n        // I approximate it by sampling the border of the item to avoid\r\n        // I make several passes with increasing precision\r\n\r\n        const otherHalfA = 0.5 * itemToAvoid.size * PatternHeart.a;\r\n        const otherCircleCenter: IPoint = {\r\n            x: (this.center.x >= itemToAvoid.center.x) ? itemToAvoid.center.x + otherHalfA : itemToAvoid.center.x - otherHalfA,\r\n            y: itemToAvoid.center.y - otherHalfA,\r\n        };\r\n        const otherCircleRadius = itemToAvoid.size * PatternHeart.c;\r\n\r\n        result.size = 900000000000; // absurd initial value\r\n        const testCircleSamples = (nbPoints: number, angleRange: NumberRange): void => {\r\n            nbPoints = Math.max(4, Math.round(nbPoints));\r\n            const angleRangeSpan = angleRange.span;\r\n            const angleStep = angleRangeSpan / (nbPoints - 1);\r\n            let bestAngle = (angleRange.from + angleRange.to) / 2;\r\n            for (let i = 0; i < nbPoints; i++) {\r\n                const angle = angleRange.from + angleStep * i;\r\n                const pointToAvoid: IPoint = {\r\n                    x: otherCircleCenter.x + otherCircleRadius * Math.cos(angle),\r\n                    y: otherCircleCenter.y - otherCircleRadius * Math.sin(angle),\r\n                };\r\n\r\n                const maxSizeToAvoidThisPoint = this.computeBiggestSizePossibleToAvoidPoint(pointToAvoid);\r\n                if (result.size > maxSizeToAvoidThisPoint) {\r\n                    result.size = maxSizeToAvoidThisPoint;\r\n                    bestAngle = angle;\r\n                }\r\n            }\r\n\r\n            if (angleRangeSpan < 0) {\r\n                console.log(angleRangeSpan);\r\n            }\r\n            angleRange.from = angleRange.clamp(bestAngle - angleStep);\r\n            angleRange.to = angleRange.clamp(bestAngle + angleStep);\r\n        }\r\n\r\n        const maxAnglesRange = (this.center.x >= itemToAvoid.center.x) ?\r\n            new NumberRange(-Math.PI / 4, 3 * Math.PI / 4) :\r\n            new NumberRange(Math.PI / 4, 5 * Math.PI / 4);\r\n        const narrowedRange = new NumberRange(maxAnglesRange.from, maxAnglesRange.to);\r\n        for (let i = 0; i < 11; i++) {\r\n            testCircleSamples(6, narrowedRange);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const topLeftInside = this.isPointInside({ x: -halfDomainWidth, y: -halfDomainHeight });\r\n        const topRightInside = this.isPointInside({ x: +halfDomainWidth, y: -halfDomainHeight });\r\n        const bottomLeftInside = this.isPointInside({ x: +halfDomainWidth, y: +halfDomainHeight });\r\n        const bottomRightInside = this.isPointInside({ x: -halfDomainWidth, y: +halfDomainHeight });\r\n        if (topLeftInside && topRightInside && bottomLeftInside && bottomRightInside &&\r\n            this.isPointInside({ x: this.center.x, y: -halfDomainHeight })) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n\r\n        if (topLeftInside || topRightInside || bottomLeftInside || bottomRightInside) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        if (Math.abs(this.center.x) - 0.5 * this.size < halfDomainWidth && Math.abs(this.center.y) - 0.5 * this.size < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    private isPointInside(point: IPoint): boolean {\r\n        return this.computeBiggestSizePossibleToAvoidPoint(point) <= this.size;\r\n    }\r\n}\r\n\r\nexport { PatternHeart };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nconst ASPECT_RATIO_VARIATION = 0.5; // must be in [0,1]\r\n\r\nclass PatternRectangle extends PatternBase {\r\n    private readonly baseWidth: number; // in [0,1]\r\n    private readonly baseHeight: number; // in [0,1]\r\n    public readonly aspectRatio: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.aspectRatio = 1 + ASPECT_RATIO_VARIATION * (2 * Math.random() - 1);\r\n        if (this.aspectRatio >= 1) {\r\n            this.baseWidth = 1;\r\n            this.baseHeight = 1 / this.aspectRatio;\r\n        } else {\r\n            this.baseWidth = this.aspectRatio;\r\n            this.baseHeight = 1;\r\n        }\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n\r\n        const maxSizeX = Math.abs(toPointX) / this.baseWidth;\r\n        const maxSizeY = Math.abs(toPointY) / this.baseHeight;\r\n        return 2 * Math.max(maxSizeX, maxSizeY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternRectangle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const deltaX = Math.abs(this.center.x - itemToAvoid.center.x);\r\n        const deltaY = Math.abs(this.center.y - itemToAvoid.center.y);\r\n\r\n        const halfObstacleWidth = 0.5 * itemToAvoid.width;\r\n        const halfObstacleHeight = 0.5 * itemToAvoid.height;\r\n\r\n        if (deltaX < halfObstacleWidth) {\r\n            if (deltaY < halfObstacleHeight) {\r\n                result.isInside = true;\r\n                if (allowOverlapping) {\r\n                    result.size = 2 * Math.min((halfObstacleWidth - deltaX) / this.baseWidth, (halfObstacleHeight - deltaY) / this.baseHeight);\r\n                }\r\n            } else {\r\n                result.size = 2 * (deltaY - halfObstacleHeight) / this.baseHeight;\r\n            }\r\n        } else {\r\n            if (deltaY < halfObstacleHeight) {\r\n                result.size = 2 * (deltaX - halfObstacleWidth) / this.baseWidth;\r\n            } else {\r\n                result.size = 2 * Math.max((deltaX - halfObstacleWidth) / this.baseWidth, (deltaY - halfObstacleHeight) / this.baseHeight);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfWidth = 0.5 * this.size * this.baseWidth;\r\n        const halfHeight = 0.5 * this.size * this.baseHeight;\r\n\r\n        if (absX + halfDomainWidth < halfWidth && absY + halfDomainHeight < halfHeight) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfWidth < halfDomainWidth && absY - halfHeight < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.size * this.baseWidth;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.size * this.baseHeight;\r\n    }\r\n}\r\n\r\nexport { PatternRectangle };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nclass PatternSquare extends PatternBase {\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        const toPointX = pointToAvoid.x - this.center.x;\r\n        const toPointY = pointToAvoid.y - this.center.y;\r\n\r\n        const maxSizeX = Math.abs(toPointX);\r\n        const maxSizeY = Math.abs(toPointY);\r\n        return 2 * Math.max(maxSizeX, maxSizeY);\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternSquare, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = { size: 0, isInside: false };\r\n\r\n        const deltaX = Math.abs(this.center.x - itemToAvoid.center.x);\r\n        const deltaY = Math.abs(this.center.y - itemToAvoid.center.y);\r\n        const halfSideLength = 0.5 * itemToAvoid.sideLength;\r\n\r\n        if (deltaX < halfSideLength) {\r\n            if (deltaY < halfSideLength) {\r\n                result.isInside = true;\r\n                if (allowOverlapping) {\r\n                    result.size = 2 * Math.min(halfSideLength - deltaX, halfSideLength - deltaY);\r\n                }\r\n            } else {\r\n                result.size = 2 * (deltaY - halfSideLength);\r\n            }\r\n        } else {\r\n            if (deltaY < halfSideLength) {\r\n                result.size = 2 * (deltaX - halfSideLength);\r\n            } else {\r\n                result.size = 2 * Math.max(deltaX - halfSideLength, deltaY - halfSideLength);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfSize = 0.5 * this.size;\r\n\r\n        if (absX + halfDomainWidth < halfSize && absY + halfDomainHeight < halfSize) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfSize < halfDomainWidth && absY - halfSize < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    private get sideLength(): number {\r\n        return this.size;\r\n    }\r\n}\r\n\r\nexport { PatternSquare };\r\n","import { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { EVisibility, ISizeComputationResult, PatternBase } from \"./pattern-base\";\r\n\r\nfunction rotatePoint(point: IPoint, cosAngle: number, sinAngle: number): IPoint {\r\n    return {\r\n        x: point.x * cosAngle - point.y * sinAngle,\r\n        y: point.x * sinAngle + point.y * cosAngle,\r\n    };\r\n}\r\n\r\n/** Computes intersection between a segment and a semiline, both defined with parametric equations.\r\n * The first segment is defined with \"from1 + t1 * delta1\" for 0 <= t1 <= 2\r\n * The semi line is defined with \"0 + t2 * delta2\" for 0 <= t2\r\n * @returns if there is an intersection, t2 >= 0\r\n *          if there is no intersection, returns a negative value\r\n */\r\nfunction computeSegmentsIntersection(from1: IPoint, delta1: IPoint, delta2: IPoint): number {\r\n    const denom = delta2.y * delta1.x - delta1.y * delta2.x;\r\n    if (denom !== 0) {\r\n        const invDenom = 1 / denom;\r\n\r\n        const t1 = (delta2.x * from1.y - delta2.y * from1.x) * invDenom;\r\n        if (0 <= t1 && t1 <= 1) {\r\n            const t2 = (delta1.x * from1.y - delta1.y * from1.x) * invDenom;\r\n            return t2;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nconst MAX_NUMBER = 100000000;\r\nfunction minPositive(...args: number[]): number {\r\n    let min = MAX_NUMBER;\r\n    for (const arg of args) {\r\n        if (arg >= 0 && arg < min) {\r\n            min = arg;\r\n        }\r\n    }\r\n    return (min === MAX_NUMBER) ? -1 : min;\r\n}\r\n\r\nclass PatternTriangle extends PatternBase {\r\n    public readonly angle: number;\r\n\r\n    public static readonly baseP1: IPoint = { x: 0, y: -0.5 };\r\n    public static readonly baseP2: IPoint = { x: 0.5 * Math.cos(Math.PI * 7 / 6), y: -0.5 * Math.sin(Math.PI * 7 / 6) };\r\n    public static readonly baseP3: IPoint = { x: -0.5 * Math.cos(Math.PI * 7 / 6), y: -0.5 * Math.sin(Math.PI * 7 / 6) };\r\n\r\n    // rotated, with a size=1\r\n    public readonly P1: IPoint;\r\n    public readonly P2: IPoint;\r\n    public readonly P3: IPoint;\r\n\r\n    // with a size=1\r\n    public readonly P1_TO_P2: IPoint;\r\n    public readonly P2_TO_P3: IPoint;\r\n    public readonly P3_TO_P1: IPoint;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.angle = 2 * Math.PI * Math.random();\r\n\r\n        const cosAngle = Math.cos(this.angle);\r\n        const sinAngle = Math.sin(this.angle);\r\n        this.P1 = rotatePoint(PatternTriangle.baseP1, cosAngle, sinAngle);\r\n        this.P2 = rotatePoint(PatternTriangle.baseP2, cosAngle, sinAngle);\r\n        this.P3 = rotatePoint(PatternTriangle.baseP3, cosAngle, sinAngle);\r\n\r\n        this.P1_TO_P2 = { x: this.P2.x - this.P1.x, y: this.P2.y - this.P1.y };\r\n        this.P2_TO_P3 = { x: this.P3.x - this.P2.x, y: this.P3.y - this.P2.y };\r\n        this.P3_TO_P1 = { x: this.P1.x - this.P3.x, y: this.P1.y - this.P3.y };\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidPoint(pointToAvoid: IPoint): number {\r\n        if (pointToAvoid.x === this.center.x && pointToAvoid.y === this.center.y) {\r\n            return 0;\r\n        }\r\n\r\n        const pointToAvoidLocal = { x: pointToAvoid.x - this.center.x, y: pointToAvoid.y - this.center.y };\r\n\r\n        let intersection = computeSegmentsIntersection(this.P1, this.P1_TO_P2, pointToAvoidLocal);\r\n        if (intersection < 0) {\r\n            intersection = computeSegmentsIntersection(this.P2, this.P2_TO_P3, pointToAvoidLocal);\r\n            if (intersection < 0) {\r\n                intersection = computeSegmentsIntersection(this.P3, this.P3_TO_P1, pointToAvoidLocal);\r\n            }\r\n        }\r\n\r\n        if (intersection > 0) {\r\n            return 1 / intersection;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    protected computeBiggestSizePossibleToAvoidItem(itemToAvoid: PatternTriangle, allowOverlapping: boolean): ISizeComputationResult {\r\n        const result = {\r\n            size: 0,\r\n            isInside: itemToAvoid.isPointInside(this.center.x, this.center.y),\r\n        };\r\n\r\n        if (result.isInside && !allowOverlapping) {\r\n            return result;\r\n        }\r\n\r\n        const localOtherP1: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P1.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P1.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const localOtherP2: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P2.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P2.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const localOtherP3: IPoint = {\r\n            x: itemToAvoid.center.x + itemToAvoid.P3.x * itemToAvoid.size - this.center.x,\r\n            y: itemToAvoid.center.y + itemToAvoid.P3.y * itemToAvoid.size - this.center.y,\r\n        };\r\n\r\n        const scaledOtherP1toP2: IPoint = {\r\n            x: itemToAvoid.P1_TO_P2.x * itemToAvoid.size,\r\n            y: itemToAvoid.P1_TO_P2.y * itemToAvoid.size,\r\n        };\r\n\r\n        const scaledOtherP2toP3: IPoint = {\r\n            x: itemToAvoid.P2_TO_P3.x * itemToAvoid.size,\r\n            y: itemToAvoid.P2_TO_P3.y * itemToAvoid.size,\r\n        };\r\n\r\n        const scaledOtherP3toP1: IPoint = {\r\n            x: itemToAvoid.P3_TO_P1.x * itemToAvoid.size,\r\n            y: itemToAvoid.P3_TO_P1.y * itemToAvoid.size,\r\n        };\r\n\r\n        // Check if a vertice of this may intersect a side of the other\r\n        let smallerTforMyVertices: number;\r\n        {\r\n            const T1_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P1);\r\n            const T1_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P1);\r\n            const T1_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P1);\r\n\r\n            const T2_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P2);\r\n            const T2_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P2);\r\n            const T2_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P2);\r\n\r\n            const T3_1 = computeSegmentsIntersection(localOtherP1, scaledOtherP1toP2, this.P3);\r\n            const T3_2 = computeSegmentsIntersection(localOtherP2, scaledOtherP2toP3, this.P3);\r\n            const T3_3 = computeSegmentsIntersection(localOtherP3, scaledOtherP3toP1, this.P3);\r\n\r\n            smallerTforMyVertices = minPositive(T1_1, T1_2, T1_3, T2_1, T2_2, T2_3, T3_1, T3_2, T3_3);\r\n        }\r\n\r\n        let smallerTforMySides: number;\r\n        {\r\n            const T1_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP1);\r\n            const T1_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP1);\r\n            const T1_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP1);\r\n\r\n            const T2_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP2);\r\n            const T2_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP2);\r\n            const T2_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP2);\r\n\r\n            const T3_1 = computeSegmentsIntersection(this.P1, this.P1_TO_P2, localOtherP3);\r\n            const T3_2 = computeSegmentsIntersection(this.P2, this.P2_TO_P3, localOtherP3);\r\n            const T3_3 = computeSegmentsIntersection(this.P3, this.P3_TO_P1, localOtherP3);\r\n\r\n            const max = Math.max(T1_1, T1_2, T1_3, T2_1, T2_2, T2_3, T3_1, T3_2, T3_3);\r\n            if (max !== 0) {\r\n                smallerTforMySides = 1 / max;\r\n            } else {\r\n                smallerTforMySides = -1;\r\n            }\r\n        }\r\n\r\n        result.size = minPositive(smallerTforMyVertices, smallerTforMySides);\r\n        return result;\r\n    }\r\n\r\n    public computeVisibility(domainSize: ISize): EVisibility {\r\n        const halfDomainWidth = 0.5 * domainSize.width;\r\n        const halfDomainHeight = 0.5 * domainSize.height;\r\n\r\n        const absX = Math.abs(this.center.x);\r\n        const absY = Math.abs(this.center.y);\r\n\r\n        const halfSize = 0.5 * this.size;\r\n\r\n        if (this.isPointInside(-halfDomainWidth, -halfDomainHeight) && this.isPointInside(halfDomainWidth, -halfDomainHeight) && this.isPointInside(-halfDomainWidth, halfDomainHeight) && this.isPointInside(halfDomainWidth, halfDomainHeight)) {\r\n            return EVisibility.COVERS_VIEW;\r\n        }\r\n        if (absX - halfSize < halfDomainWidth && absY - halfSize < halfDomainHeight) {\r\n            return EVisibility.VISIBLE;\r\n        }\r\n        return EVisibility.OUT_OF_VIEW;\r\n    }\r\n\r\n    private isPointInside(x: number, y: number): boolean {\r\n        x = (x - this.center.x) / this.size;\r\n        y = (y - this.center.y) / this.size;\r\n\r\n        const d1 = this.P1_TO_P2.x * (y - this.P2.y) - (x - this.P2.x) * this.P1_TO_P2.y;\r\n        const d2 = this.P2_TO_P3.x * (y - this.P3.y) - (x - this.P3.x) * this.P2_TO_P3.y;\r\n        const d3 = this.P3_TO_P1.x * (y - this.P1.y) - (x - this.P1.x) * this.P3_TO_P1.y;\r\n\r\n        return (d1 <= 0 && d2 <= 0 && d3 <= 0) || (d1 > 0 && d2 > 0 && d3 > 0);\r\n    }\r\n}\r\n\r\nexport { PatternTriangle };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternHeart } from \"../patterns/pattern-heart\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nabstract class PlotterBase {\r\n    public abstract get size(): ISize;\r\n\r\n    public abstract get isReady(): boolean;\r\n\r\n    public abstract initialize(backgroundColor: Color): void;\r\n    public abstract finalize(): void;\r\n\r\n    public abstract drawSquares(squares: PatternSquare[]): void;\r\n    public abstract drawCircles(circles: PatternCircle[]): void;\r\n    public abstract drawRectangles(rectangles: PatternRectangle[]): void;\r\n    public abstract drawTriangles(triangles: PatternTriangle[]): void;\r\n    public abstract drawHearts(hearts: PatternHeart[]): void;\r\n\r\n    /* Lines have  a 1 pixel thickness */\r\n    public abstract drawLines(lines: ILine[], color: Color): void;\r\n}\r\n\r\nexport { PlotterBase };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternHeart } from \"../patterns/pattern-heart\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\n\r\nimport { PlotterCanvasBase } from \"./plotter-canvas-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\nclass PlotterCanvas2D extends PlotterCanvasBase {\r\n    private readonly context: CanvasRenderingContext2D;\r\n    public constructor() {\r\n        super();\r\n        this.context = this.canvas.getContext(\"2d\", { alpha: false });\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected clearCanvas(color: Color): void {\r\n        this.context.fillStyle = color.toString();\r\n        this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const square of squares) {\r\n            const centerX = square.center.x + halfWidth;\r\n            const centerY = square.center.y + halfHeight;\r\n            const halfSize = 0.5 * square.size;\r\n\r\n            this.context.fillStyle = square.color.toString();\r\n            this.context.fillRect(centerX - halfSize, centerY - halfSize, square.size, square.size);\r\n        }\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const circle of circles) {\r\n            const centerX = circle.center.x + halfWidth;\r\n            const centerY = circle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = circle.color.toString();\r\n            this.context.beginPath();\r\n            this.context.arc(centerX, centerY, circle.radius, 0, TWO_PI);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const rectangle of rectangles) {\r\n            const centerX = rectangle.center.x + halfWidth;\r\n            const centerY = rectangle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = rectangle.color.toString();\r\n            this.context.fillRect(centerX - 0.5 * rectangle.width, centerY - 0.5 * rectangle.height, rectangle.width, rectangle.height);\r\n        }\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const triangle of triangles) {\r\n            const centerX = triangle.center.x + halfWidth;\r\n            const centerY = triangle.center.y + halfHeight;\r\n\r\n            this.context.fillStyle = triangle.color.toString();\r\n            this.context.beginPath();\r\n            this.context.moveTo(centerX + triangle.P1.x * triangle.size, centerY + triangle.P1.y * triangle.size);\r\n            this.context.lineTo(centerX + triangle.P2.x * triangle.size, centerY + triangle.P2.y * triangle.size);\r\n            this.context.lineTo(centerX + triangle.P3.x * triangle.size, centerY + triangle.P3.y * triangle.size);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawHearts(hearts: PatternHeart[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        for (const heart of hearts) {\r\n            const centerX = heart.center.x + halfWidth;\r\n            const centerY = heart.center.y + halfHeight;\r\n\r\n            const scaledA = heart.size * PatternHeart.a;\r\n            const scaledC = heart.size * PatternHeart.c;\r\n\r\n            this.context.fillStyle = heart.color.toString();\r\n            this.context.beginPath();\r\n            this.context.moveTo(centerX + scaledA, centerY);\r\n            this.context.lineTo(centerX, centerY + scaledA);\r\n            this.context.lineTo(centerX - scaledA, centerY);\r\n            this.context.arc(centerX - 0.5 * scaledA, centerY - 0.5 * scaledA, scaledC, 3 / 4 * Math.PI, -1 / 4 * Math.PI);\r\n            this.context.arc(centerX + 0.5 * scaledA, centerY - 0.5 * scaledA, scaledC, 5 / 4 * Math.PI, 1 / 4 * Math.PI);\r\n            this.context.fill();\r\n            this.context.closePath();\r\n        }\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        this.context.fillStyle = \"none\";\r\n        this.context.strokeStyle = color.toString();\r\n        this.context.lineWidth = 1;\r\n        this.context.beginPath();\r\n\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        for (const line of lines) {\r\n            this.context.moveTo(line.from.x + halfWidth, line.from.y + halfHeight);\r\n            this.context.lineTo(line.to.x + halfWidth, line.to.y + halfHeight);\r\n        }\r\n\r\n        this.context.stroke();\r\n        this.context.closePath();\r\n        this.context.strokeStyle = \"none\";\r\n    }\r\n}\r\n\r\nexport { PlotterCanvas2D };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { PlotterBase } from \"./plotter-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nabstract class PlotterCanvasBase extends PlotterBase {\r\n    protected readonly canvas: HTMLCanvasElement;\r\n    protected _size: ISize;\r\n    private readonly cssPixel: number;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n        this.resizeCanvas();\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        this.resizeCanvas();\r\n        this.clearCanvas(backgroundColor);\r\n    }\r\n\r\n    protected abstract clearCanvas(color: Color): void;\r\n\r\n    private resizeCanvas(): void {\r\n        const actualWidth = Math.floor(this.cssPixel * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.cssPixel * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n        }\r\n\r\n        this._size = {\r\n            width: this.canvas.width,\r\n            height: this.canvas.height,\r\n        }\r\n    }\r\n}\r\n\r\nexport { PlotterCanvasBase };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { gl, initGL } from \"../gl-utils/gl-canvas\";\r\nimport { Shader } from \"../gl-utils/shader\";\r\nimport * as ShaderManager from \"../gl-utils/shader-manager\";\r\nimport { VBO } from \"../gl-utils/vbo\";\r\n\r\nimport { EPrimitive, Parameters } from \"../parameters\";\r\n\r\nimport { PatternBase } from \"../patterns/pattern-base\";\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternHeart } from \"../patterns/pattern-heart\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport * as Statistics from \"../statistics/statistics\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\n\r\nimport { PlotterCanvasBase } from \"./plotter-canvas-base\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\ntype AffectShaderFunction = (shader: Shader) => unknown;\r\ntype ExtraAttributeFunction = (item: PatternBase) => number;\r\n\r\nconst SQUARE_GEOMETRY = [-.5, .5, -.5, -.5, .5, .5, .5, -.5];\r\nconst TRIANGLE_GEOMETRY = [\r\n    PatternTriangle.baseP1.x, PatternTriangle.baseP1.y,\r\n    PatternTriangle.baseP2.x, PatternTriangle.baseP2.y,\r\n    PatternTriangle.baseP3.x, PatternTriangle.baseP3.y,\r\n];\r\n\r\nclass PlotterCanvasWebGL extends PlotterCanvasBase {\r\n    private instancingExt: ANGLE_instanced_arrays;\r\n    private needToResetInstancingDivision: boolean;\r\n\r\n    private linesShader: Shader | null;\r\n\r\n    private squaresShader: Shader | null;\r\n    private circlesShader: Shader | null;\r\n    private rectanglesShader: Shader | null;\r\n    private trianglesShader: Shader | null;\r\n    private heartsShader: Shader | null;\r\n\r\n    private squaresInstancedShader: Shader | null;\r\n    private circlesInstancedShader: Shader | null;\r\n    private rectanglesInstancedShader: Shader | null;\r\n    private trianglesInstancedShader: Shader | null;\r\n    private heartsInstancedShader: Shader | null;\r\n\r\n    private blending: boolean;\r\n\r\n    private linesBuffer: Float32Array;\r\n    private readonly linesVBO: VBO;\r\n\r\n    private primitivesBuffer: Float32Array;\r\n    private readonly primitivesVBOId: WebGLBuffer;\r\n\r\n    private readonly geometryVBO: VBO;\r\n\r\n    public constructor() {\r\n        super();\r\n\r\n        if (!initGL()) {\r\n            throw new Error(\"Failed to initialize WebGL.\");\r\n        }\r\n        console.log(`Max point size supported by WebGL: \"${gl.ALIASED_POINT_SIZE_RANGE}\" pixels.`);\r\n\r\n        this.needToResetInstancingDivision = false;\r\n        const instancingExtensionName = \"ANGLE_instanced_arrays\";\r\n        this.instancingExt = gl.getExtension(instancingExtensionName);\r\n        if (this.instancingExt === null) {\r\n            const errorMessage = `Your device does not support the \"${instancingExtensionName}\" WebGL extension. Using the fallback mode with GL_POINTS, which might cause visual artifacts.`;\r\n            Page.Demopage.setErrorMessage(\"webgl-instanced\", errorMessage);\r\n            console.log(errorMessage);\r\n            Parameters.disallowInstancing();\r\n        } else {\r\n            console.log(`Using the \"${instancingExtensionName}\" WebGL extension.`);\r\n        }\r\n\r\n        this.blending = false;\r\n        this.enableBlending = true;\r\n\r\n        this.linesBuffer = new Float32Array([]);\r\n        this.linesVBO = new VBO(gl, new Float32Array(this.linesBuffer), 2, gl.FLOAT, false);\r\n\r\n        this.primitivesBuffer = new Float32Array([]);\r\n        this.primitivesVBOId = gl.createBuffer();\r\n\r\n        const geometryBuffer = SQUARE_GEOMETRY.concat(TRIANGLE_GEOMETRY);\r\n        this.geometryVBO = new VBO(gl, new Float32Array(geometryBuffer), 2, gl.FLOAT, true);\r\n\r\n        this.linesShader = null;\r\n        this.squaresShader = null;\r\n        this.circlesShader = null;\r\n        this.rectanglesShader = null;\r\n        this.trianglesShader = null;\r\n        this.heartsShader = null;\r\n        this.loadAndBuildShader(\"point/lines.vert\", \"point/lines.frag\", \"lines\", (shader: Shader) => this.linesShader = shader);\r\n        this.loadAndBuildShader(\"point/items.vert\", \"point/squares.frag\", \"squares\", (shader: Shader) => this.squaresShader = shader);\r\n        this.loadAndBuildShader(\"point/items.vert\", \"point/circles.frag\", \"circles\", (shader: Shader) => this.circlesShader = shader);\r\n        this.loadAndBuildShader(\"point/rectangles.vert\", \"point/rectangles.frag\", \"rectangles\", (shader: Shader) => this.rectanglesShader = shader);\r\n        this.loadAndBuildShader(\"point/triangles.vert\", \"point/triangles.frag\", \"triangles\", (shader: Shader) => this.trianglesShader = shader);\r\n        this.loadAndBuildShader(\"point/items.vert\", \"point/hearts.frag\", \"hearts\", (shader: Shader) => this.heartsShader = shader);\r\n\r\n        this.squaresInstancedShader = null;\r\n        this.circlesInstancedShader = null;\r\n        this.rectanglesInstancedShader = null;\r\n        this.trianglesInstancedShader = null;\r\n        this.heartsInstancedShader = null;\r\n        if (this.supportsInstancing) {\r\n            this.loadAndBuildShader(\"instanced/simpleGeometry.vert\", \"instanced/fillColor.frag\", \"instanced squares\", (shader: Shader) => this.squaresInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/squareToDiscard.vert\", \"instanced/circles.frag\", \"instanced squares\", (shader: Shader) => this.circlesInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/rectangles.vert\", \"instanced/fillColor.frag\", \"instanced circles\", (shader: Shader) => this.rectanglesInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/triangles.vert\", \"instanced/fillColor.frag\", \"instanced triangles\", (shader: Shader) => this.trianglesInstancedShader = shader);\r\n            this.loadAndBuildShader(\"instanced/squareToDiscard.vert\", \"instanced/hearts.frag\", \"instanced hearts\", (shader: Shader) => this.heartsInstancedShader = shader);\r\n        }\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return this.linesShader !== null &&\r\n            this.squaresShader !== null && this.circlesShader !== null && this.rectanglesShader !== null && this.trianglesShader !== null &&\r\n            this.squaresInstancedShader !== null && this.circlesInstancedShader !== null && this.rectanglesInstancedShader !== null && this.trianglesInstancedShader !== null;\r\n    }\r\n\r\n    protected clearCanvas(color: Color): void {\r\n        gl.clearColor(color.r / 255, color.g / 255, color.b / 255, 1); // TODO avoid doing this if possible\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        super.initialize(backgroundColor);\r\n        gl.viewport(0, 0, this._size.width, this._size.height);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void { }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        this.drawPrimitives(this.squaresShader, this.squaresInstancedShader, squares, EPrimitive.SQUARE);\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        this.drawPrimitives(this.circlesShader, this.circlesInstancedShader, circles, EPrimitive.CIRCLE);\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const extraAttributeFunction = (item: PatternBase) => (item as PatternRectangle).aspectRatio;\r\n        this.drawPrimitives(this.rectanglesShader, this.rectanglesInstancedShader, rectangles, EPrimitive.RECTANGLE, extraAttributeFunction);\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const extraAttributeFunction = (item: PatternBase) => (item as PatternTriangle).angle;\r\n        this.drawPrimitives(this.trianglesShader, this.trianglesInstancedShader, triangles, EPrimitive.TRIANGLE, extraAttributeFunction);\r\n    }\r\n\r\n    public drawHearts(hearts: PatternHeart[]): void {\r\n        this.drawPrimitives(this.heartsShader, this.heartsInstancedShader, hearts, EPrimitive.HEART);\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        const nbLines = lines.length;\r\n\r\n        if (this.linesShader !== null && nbLines >= 1) {\r\n            const wantedLinesBufferLength = 4 * nbLines;\r\n            if (this.linesBuffer.length !== wantedLinesBufferLength) {\r\n                this.linesBuffer = new Float32Array(wantedLinesBufferLength)\r\n            }\r\n\r\n            for (let i = 0; i < nbLines; i++) {\r\n                this.linesBuffer[4 * i + 0] = lines[i].from.x;\r\n                this.linesBuffer[4 * i + 1] = lines[i].from.y;\r\n                this.linesBuffer[4 * i + 2] = lines[i].to.x;\r\n                this.linesBuffer[4 * i + 3] = lines[i].to.y;\r\n            }\r\n\r\n            this.linesVBO.setData(new Float32Array(this.linesBuffer));\r\n\r\n            this.linesShader.a[\"aCoords\"].VBO = this.linesVBO;\r\n            this.linesShader.u[\"uScreenSize\"].value = [this._size.width, this._size.height];\r\n            this.linesShader.u[\"uColor\"].value = [color.r / 255, color.g / 255, color.b / 255, 1];\r\n\r\n            this.linesShader.use();\r\n            this.linesShader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.LINES, 0, 2 * nbLines);\r\n        }\r\n    }\r\n\r\n    private drawPrimitives(pointsShader: Shader, instancedShader: Shader, items: PatternBase[], primitive: EPrimitive, extraAttributeFunction?: ExtraAttributeFunction): void {\r\n        this.updatePrimitivesVBO(items, extraAttributeFunction);\r\n\r\n        Statistics.timeSpentInDrawDrawX.start();\r\n        if (this.useInstancing && instancedShader !== null) {\r\n            this.drawInstanced(instancedShader, items, primitive);\r\n        } else {\r\n            this.drawAsPoints(pointsShader, items);\r\n        }\r\n        Statistics.timeSpentInDrawDrawX.stop();\r\n    }\r\n\r\n    private drawInstanced(shader: Shader, items: PatternBase[], primitive: EPrimitive): void {\r\n        const nbItems = items.length;\r\n        if (this.supportsInstancing && shader !== null && nbItems > 0) {\r\n            shader.use();\r\n            this.bindCommonUniformsAndAttributes(shader, true);\r\n            this.geometryVBO.bind(shader.a[\"aVertex\"].loc);\r\n\r\n            if (primitive === EPrimitive.TRIANGLE) {\r\n                this.instancingExt.drawArraysInstancedANGLE(gl.TRIANGLES, 4, 3, nbItems);\r\n            } else {\r\n                this.instancingExt.drawArraysInstancedANGLE(gl.TRIANGLE_STRIP, 0, 4, nbItems);\r\n            }\r\n        }\r\n    }\r\n\r\n    private drawAsPoints(shader: Shader, items: PatternBase[]): void {\r\n        const nbItems = items.length;\r\n        if (shader !== null && nbItems > 0) {\r\n            shader.use();\r\n            this.bindCommonUniformsAndAttributes(shader, false);\r\n\r\n            gl.drawArrays(gl.POINTS, 0, nbItems);\r\n        }\r\n    }\r\n\r\n    private updatePrimitivesVBO(items: PatternBase[], extraAttribute?: ExtraAttributeFunction): void {\r\n        const nbItems = items.length;\r\n\r\n        Statistics.timeSpentInDrawAllocateBuffer.start();\r\n        // try not to resize the buffers too often to avoid GC\r\n        const nbItemsRounded = 1024 * Math.ceil(nbItems / 1024);\r\n\r\n        const wantedPrimitivesBufferLength = 8 * nbItemsRounded;\r\n        if (this.primitivesBuffer.length !== wantedPrimitivesBufferLength) {\r\n            this.primitivesBuffer = new Float32Array(wantedPrimitivesBufferLength);\r\n        }\r\n        Statistics.timeSpentInDrawAllocateBuffer.stop();\r\n\r\n        this.enableBlending = Parameters.blending;\r\n        const time = performance.now();\r\n        const blendTime = PatternBase.maxBlendingTime;\r\n\r\n        if (typeof extraAttribute !== \"function\") {\r\n            extraAttribute = () => 0; // unused value\r\n        }\r\n\r\n        Statistics.timeSpentInDrawFillBuffer.start();\r\n        for (let i = 0; i < nbItems; i++) {\r\n            const color = items[i].color;\r\n\r\n            this.primitivesBuffer[8 * i + 0] = items[i].center.x;\r\n            this.primitivesBuffer[8 * i + 1] = items[i].center.y;\r\n            this.primitivesBuffer[8 * i + 2] = items[i].size;\r\n            this.primitivesBuffer[8 * i + 3] = extraAttribute(items[i]);\r\n            this.primitivesBuffer[8 * i + 4] = color.r / 255;\r\n            this.primitivesBuffer[8 * i + 5] = color.g / 255;\r\n            this.primitivesBuffer[8 * i + 6] = color.b / 255;\r\n            this.primitivesBuffer[8 * i + 7] = items[i].computeOpacity(time, blendTime);\r\n        }\r\n        Statistics.timeSpentInDrawFillBuffer.stop();\r\n\r\n        Statistics.timeSpentInDrawUploadVBO.start();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.primitivesVBOId);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.primitivesBuffer, gl.DYNAMIC_DRAW);\r\n        Statistics.timeSpentInDrawUploadVBO.stop();\r\n    }\r\n\r\n    private bindCommonUniformsAndAttributes(shader: Shader, instanced: boolean): void {\r\n        shader.u[\"uScreenSize\"].value = [this._size.width, this._size.height];\r\n        shader.bindUniforms();\r\n\r\n        const BYTES_PER_FLOAT = 4;\r\n        const stateAttribLoc = shader.a[\"aState\"].loc;\r\n        const colorAttribLoc = shader.a[\"aColor\"].loc;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.primitivesVBOId);\r\n        gl.enableVertexAttribArray(stateAttribLoc);\r\n        gl.vertexAttribPointer(stateAttribLoc, 4, gl.FLOAT, false, 8 * BYTES_PER_FLOAT, 0);\r\n        if (instanced) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(stateAttribLoc, 1);\r\n        } else if (this.needToResetInstancingDivision) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(stateAttribLoc, 0);\r\n        }\r\n\r\n        gl.enableVertexAttribArray(colorAttribLoc);\r\n        gl.vertexAttribPointer(colorAttribLoc, 4, gl.FLOAT, false, 8 * BYTES_PER_FLOAT, 4 * BYTES_PER_FLOAT);\r\n        if (instanced) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(colorAttribLoc, 1);\r\n        } else if (this.needToResetInstancingDivision) {\r\n            this.instancingExt.vertexAttribDivisorANGLE(colorAttribLoc, 0);\r\n        }\r\n\r\n        this.needToResetInstancingDivision = instanced;\r\n    }\r\n\r\n    private set enableBlending(value: boolean) {\r\n        if (value !== this.blending) {\r\n            this.blending = value;\r\n\r\n            if (value) {\r\n                gl.enable(gl.BLEND);\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n            } else {\r\n                gl.disable(gl.BLEND);\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadAndBuildShader(vertexFilename: string, fragmentFilename: string, shaderName: string, affectShader: AffectShaderFunction): void {\r\n        ShaderManager.buildShader({\r\n            vertexFilename,\r\n            fragmentFilename,\r\n            injected: {},\r\n        }, (builtShader: Shader | null) => {\r\n            if (builtShader === null) {\r\n                const errorMessage = `Failed to load or build the ${shaderName} shader.`;\r\n                Page.Demopage.setErrorMessage(`shader-${shaderName}`, errorMessage);\r\n                throw new Error(errorMessage);\r\n            }\r\n            affectShader(builtShader);\r\n        });\r\n    }\r\n\r\n    private get supportsInstancing(): boolean {\r\n        return this.instancingExt !== null;\r\n    }\r\n\r\n    private get useInstancing(): boolean {\r\n        return this.supportsInstancing && Parameters.useInstancing;\r\n    }\r\n}\r\n\r\nexport { PlotterCanvasWebGL };\r\n","import { Color } from \"../color/color\";\r\n\r\nimport { PatternCircle } from \"../patterns/pattern-circle\";\r\nimport { PatternHeart } from \"../patterns/pattern-heart\";\r\nimport { PatternRectangle } from \"../patterns/pattern-rectangle\";\r\nimport { PatternSquare } from \"../patterns/pattern-square\";\r\nimport { PatternTriangle } from \"../patterns/pattern-triangle\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { PlotterBase } from \"./plotter-base\";\r\n\r\nclass PlotterSVG extends PlotterBase {\r\n    private stringParts: string[];\r\n    private readonly _size: ISize;\r\n\r\n    public constructor(size: ISize) {\r\n        super();\r\n\r\n        this._size = {\r\n            width: size.width,\r\n            height: size.height,\r\n        };\r\n    }\r\n\r\n    public get size(): ISize {\r\n        return this._size;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public initialize(backgroundColor: Color): void {\r\n        this.stringParts = [];\r\n\r\n        this.stringParts.push(`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\\n`);\r\n        this.stringParts.push(`<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ${this._size.width} ${this._size.height}\">\\n`);\r\n\r\n        this.stringParts.push(`\\t<rect fill=\"${backgroundColor}\" stroke=\"none\" x=\"0\" y=\"0\" width=\"${this._size.width}\" height=\"${this._size.height}\"/>\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public finalize(): void {\r\n        this.stringParts.push(`</svg>\\n`);\r\n    }\r\n\r\n    public drawSquares(squares: PatternSquare[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const square of squares) {\r\n            const centerX = square.center.x + halfWidth;\r\n            const centerY = square.center.y + halfHeight;\r\n            const halfSize = 0.5 * square.size;\r\n\r\n            this.stringParts.push(`\\t\\t<rect fill=\"${square.color}\" x=\"${centerX - halfSize}\" y=\"${centerY - halfSize}\" width=\"${square.size}\" height=\"${square.size}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawCircles(circles: PatternCircle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const circle of circles) {\r\n            const centerX = circle.center.x + halfWidth;\r\n            const centerY = circle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<circle fill=\"${circle.color}\" cx=\"${centerX}\" cy=\"${centerY}\" r=\"${circle.radius}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawRectangles(rectangles: PatternRectangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const rectangle of rectangles) {\r\n            const centerX = rectangle.center.x + halfWidth;\r\n            const centerY = rectangle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<rect fill=\"${rectangle.color}\" x=\"${centerX - 0.5 * rectangle.width}\" y=\"${centerY - 0.5 * rectangle.height}\" width=\"${rectangle.width}\" height=\"${rectangle.height}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawTriangles(triangles: PatternTriangle[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const triangle of triangles) {\r\n            const centerX = triangle.center.x + halfWidth;\r\n            const centerY = triangle.center.y + halfHeight;\r\n\r\n            this.stringParts.push(`\\t\\t<polygon fill=\"${triangle.color}\" points=\"${centerX + triangle.P1.x * triangle.size},${centerY + triangle.P1.y * triangle.size} ${centerX + triangle.P2.x * triangle.size},${centerY + triangle.P2.y * triangle.size} ${centerX + triangle.P3.x * triangle.size},${centerY + triangle.P3.y * triangle.size}\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    // tslint:disable-next-line\r\n    public drawHearts(hearts: PatternHeart[]): void {\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        const id = `heart_${Math.round(100000 * Math.random())}`;\r\n\r\n        this.stringParts.push(`\\t<defs>\\n`);\r\n        this.stringParts.push(`\\t\\t<path id=\"${id}\" d=\"M${PatternHeart.a},0L0,${PatternHeart.a} ${-PatternHeart.a},0 A ${PatternHeart.c} ${PatternHeart.c} 0 0 1 0,${-PatternHeart.a} A ${PatternHeart.c} ${PatternHeart.c} 0 0 1 ${PatternHeart.a},0Z\"/>\\n`);\r\n        this.stringParts.push(`\\t</defs>\\n`);\r\n\r\n        this.stringParts.push(`\\t<g stroke=\"none\">\\n`);\r\n        for (const heart of hearts) {\r\n            this.stringParts.push(`\\t\\t<use href=\"#${id}\" fill=\"${heart.color}\" transform=\"translate(${heart.center.x + halfWidth}, ${heart.center.y + halfHeight}) scale(${heart.size})\"/>\\n`);\r\n        }\r\n        this.stringParts.push(`\\t</g>\\n`);\r\n    }\r\n\r\n    public drawLines(lines: ILine[], color: Color): void {\r\n        const path: string[] = [];\r\n\r\n        const halfWidth = 0.5 * this._size.width;\r\n        const halfHeight = 0.5 * this._size.height;\r\n        for (const line of lines) {\r\n            const x1 = line.from.x + halfWidth;\r\n            const y1 = line.from.y + halfHeight;\r\n            const x2 = line.to.x + halfWidth;\r\n            const y2 = line.to.y + halfHeight;\r\n\r\n            path.push(`M${x1},${y1}L${x2},${y2}`);\r\n        }\r\n\r\n        this.stringParts.push(`\\t\\t\\t<path fill=\"none\" stroke-width=\"1\" stroke=\"${color}\" d=\"${path.join()}\"/>\\n`);\r\n    }\r\n\r\n    public export(): string {\r\n        const result = this.stringParts.join(\"\");\r\n        return result;\r\n    }\r\n}\r\n\r\nexport { PlotterSVG };\r\n","import * as Statistics from \"..//statistics/statistics\";\r\n\r\nimport { Color } from \"../color/color\";\r\n\r\nimport { PatternBase } from \"../patterns/pattern-base\";\r\n\r\nimport { PlotterBase } from \"../plotter/plotter-base\";\r\n\r\nimport { ILine } from \"../utils/i-line\";\r\nimport { IPoint } from \"../utils/i-point\";\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\ntype GridCell = PatternBase[];\r\n\r\nconst MIN_CELL_SIZE = 10;\r\nconst MAX_CELL_SIZE = 500;\r\n\r\nclass Grid {\r\n    private readonly gridSize: ISize;\r\n    private readonly gridCells: GridCell[];\r\n    private readonly topLeftCorner: IPoint;\r\n    private _cellSize: number;\r\n\r\n    private registeredItemsCount: number; // including duplicates\r\n\r\n    constructor() {\r\n        this.gridSize = { width: 0, height: 0 };\r\n        this.gridCells = [];\r\n        this.topLeftCorner = { x: 0, y: 0 };\r\n\r\n        this.reset({ width: 1, height: 1 }, 100, []);\r\n    }\r\n\r\n    /** @returns true if the grid needs to be redrawn */\r\n    public reset(domainSize: ISize, cellSize: number, items: PatternBase[]): boolean {\r\n        this.registeredItemsCount = 0;\r\n        Statistics.timeSpentInReindexResetDomain.start();\r\n        const gridHasChanged = this.resetDomain(domainSize, cellSize);\r\n        Statistics.timeSpentInReindexResetDomain.stop();\r\n\r\n        Statistics.timeSpentInReindexReindexItems.start();\r\n        for (const item of items) {\r\n            this.registerItem(item);\r\n        }\r\n        Statistics.timeSpentInReindexReindexItems.stop();\r\n\r\n        return gridHasChanged;\r\n    }\r\n\r\n    public registerItem(item: PatternBase): void {\r\n        const topLeft: IPoint = {\r\n            x: item.center.x - 0.5 * item.size,\r\n            y: item.center.y - 0.5 * item.size,\r\n        };\r\n        const bottomRight: IPoint = {\r\n            x: item.center.x + 0.5 * item.size,\r\n            y: item.center.y + 0.5 * item.size,\r\n        };\r\n\r\n        const minCellId = this.getCellId(topLeft);\r\n        const maxCellId = this.getCellId(bottomRight);\r\n\r\n        for (let iCellY = minCellId.y; iCellY <= maxCellId.y; iCellY++) {\r\n            for (let iCellX = minCellId.x; iCellX <= maxCellId.x; iCellX++) {\r\n                const cellId = this.computeCellId(iCellX, iCellY);\r\n                this.gridCells[cellId].push(item);\r\n                this.registeredItemsCount++;\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(plotter: PlotterBase): void {\r\n        const lines: ILine[] = [];\r\n\r\n        const minX = this.topLeftCorner.x;\r\n        const maxX = minX + this.gridSize.width * this._cellSize;\r\n\r\n        const minY = this.topLeftCorner.y;\r\n        const maxY = minY + this.gridSize.height * this._cellSize;\r\n\r\n        for (let iX = 0; iX < this.gridSize.width; iX++) {\r\n            const x = minX + iX * this._cellSize;\r\n            const line: ILine = {\r\n                from: { x, y: minY },\r\n                to: { x, y: maxY },\r\n            };\r\n            lines.push(line);\r\n        }\r\n\r\n        for (let iY = 0; iY < this.gridSize.height; iY++) {\r\n            const y = minY + iY * this._cellSize;\r\n            const line: ILine = {\r\n                from: { x: minX, y },\r\n                to: { x: maxX, y },\r\n            };\r\n            lines.push(line);\r\n        }\r\n\r\n        plotter.drawLines(lines, Color.GREEN);\r\n    }\r\n\r\n    public getCellId(position: IPoint): IPoint {\r\n        let cellX = Math.floor((position.x - this.topLeftCorner.x) / this._cellSize);\r\n        let cellY = Math.floor((position.y - this.topLeftCorner.y) / this._cellSize);\r\n\r\n        if (cellX < 0) {\r\n            cellX = 0;\r\n        } else if (cellX >= this.gridSize.width) {\r\n            cellX = this.gridSize.width - 1;\r\n        }\r\n\r\n        if (cellY < 0) {\r\n            cellY = 0;\r\n        } else if (cellY >= this.gridSize.height) {\r\n            cellY = this.gridSize.height - 1;\r\n        }\r\n\r\n        return { x: cellX, y: cellY };\r\n    }\r\n\r\n    public getDistanceToClosestBorder(position: IPoint): number {\r\n        // position relative to the containing cell\r\n        const localX = (position.x - this.topLeftCorner.x) % this._cellSize;\r\n        const localY = (position.y - this.topLeftCorner.y) % this._cellSize;\r\n\r\n        const minDistanceX = Math.min(localX, this._cellSize - localX);\r\n        const minDistanceY = Math.min(localY, this._cellSize - localY);\r\n        return Math.min(minDistanceX, minDistanceY);\r\n    }\r\n\r\n    /** Provides the registered items that overlap a given cell.\r\n     * @param cellX (integer) horizontal position of the wanted cell\r\n     * @param cellY (integer) vertical position of the wanted cell\r\n     * @returns array of cells that overlap the wanted cell. If the wanted cell doesn't exist, returns empty array\r\n     */\r\n    public getItemsFromCell(cellX: number, cellY: number): PatternBase[] {\r\n        if (cellX >= 0 && cellX < this.gridSize.width && cellY >= 0 && cellY < this.gridSize.height) {\r\n            const cellId = this.computeCellId(cellX, cellY);\r\n            return this.gridCells[cellId];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /** Provides the registered items that overlap a certain group of cells. Contains duplicates.\r\n     * @param minCellX (integer) horizontal position of the lowest wanted cell\r\n     * @param minCellY (integer) vertical position of the lowest wanted cell\r\n     * @param maxCellX (integer) horizontal position of the highest wanted cell\r\n     * @param maxCellY (integer) vertical position of the highest wanted cell\r\n     * @returns array of cells that overlap the wanted group of cell. If no cell matches, returns empty array\r\n     */\r\n    public getItemsFromCellsGroup(minCellX: number, minCellY: number, maxCellX: number, maxCellY: number): PatternBase[] {\r\n        const result: PatternBase[] = [];\r\n\r\n        for (let iCellY = minCellY; iCellY <= maxCellY; iCellY++) {\r\n            for (let iCellX = minCellX; iCellX <= maxCellX; iCellX++) {\r\n                const cellItems = this.getItemsFromCell(iCellX, iCellY);\r\n                result.push.apply(result, cellItems);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public computeStatistics(): void {\r\n        Statistics.registerGridStats(this.gridSize, this._cellSize, this.registeredItemsCount);\r\n    }\r\n\r\n    public get itemsPerCell(): number {\r\n        if (this.gridCells.length === 0) {\r\n            return 0;\r\n        }\r\n        return this.registeredItemsCount / this.gridCells.length;\r\n    }\r\n\r\n    public get cellSize(): number {\r\n        return this._cellSize;\r\n    }\r\n\r\n    /** @returns true if the cells disposition changed */\r\n    private resetDomain(domainSize: ISize, cellSize: number): boolean {\r\n        const wantedGridSizeX = Math.ceil(domainSize.width / cellSize);\r\n        const wantedGridSizeY = Math.ceil(domainSize.height / cellSize);\r\n\r\n        if (cellSize < MIN_CELL_SIZE) {\r\n            cellSize = MIN_CELL_SIZE;\r\n        } else if (cellSize > MAX_CELL_SIZE) {\r\n            cellSize = MAX_CELL_SIZE;\r\n        }\r\n\r\n        const hasChanged = (this._cellSize !== cellSize) ||\r\n            (this.gridSize.width !== wantedGridSizeX) || (this.gridSize.height !== wantedGridSizeY);\r\n\r\n        this._cellSize = cellSize;\r\n        this.gridSize.width = wantedGridSizeX;\r\n        this.gridSize.height = wantedGridSizeY;\r\n\r\n        this.topLeftCorner.x = -0.5 * domainSize.width;\r\n        this.topLeftCorner.y = -0.5 * domainSize.height;\r\n\r\n        const nbCells = this.gridSize.width * this.gridSize.height;\r\n        this.gridCells.length = nbCells; // reduce size if needed\r\n        for (let i = 0; i < nbCells; i++) {\r\n            this.gridCells[i] = []; // empty/initialize all cells\r\n        }\r\n\r\n        return hasChanged;\r\n    }\r\n\r\n    /** No check that the parameters are in bounds. */\r\n    private computeCellId(cellX: number, cellY: number): number {\r\n        return cellX + cellY * this.gridSize.width;\r\n    }\r\n}\r\n\r\nexport { Grid };\r\n","import { Parameters } from \"../parameters\";\r\n\r\nimport { ISize } from \"../utils/i-size\";\r\n\r\nimport { StopWatch } from \"./stop-watch\";\r\n\r\nimport \"../page-interface-generated\";\r\n\r\nconst VERBOSE_INTERVAL = 1000;\r\n\r\nconst timeSinceLastVerboseFrame = new StopWatch();\r\n\r\nlet frames = 0;\r\nconst timeSpentInMainLoop = new StopWatch();\r\nconst timeSpentInDraw = new StopWatch();\r\nconst timeSpentInDrawAllocateBuffer = new StopWatch();\r\nconst timeSpentInDrawFillBuffer = new StopWatch();\r\nconst timeSpentInDrawUploadVBO = new StopWatch();\r\nconst timeSpentInDrawDrawX = new StopWatch();\r\nconst timeSpentInUpdate = new StopWatch();\r\nconst timeSpentInReindex = new StopWatch();\r\nconst timeSpentInReindexResetDomain = new StopWatch();\r\nconst timeSpentInReindexReindexItems = new StopWatch();\r\nconst timeSpentInRecycle = new StopWatch();\r\nconst timeSpentInZoom = new StopWatch();\r\n\r\nlet itemsCount = 0;\r\nlet itemsRecycledCount = 0;\r\nlet itemsPendingRecyclingCount = 0;\r\nlet itemsRecyclingTries = 0;\r\n\r\nlet nbGridStats = 0;\r\nlet gridWidth = 0;\r\nlet gridHeight = 0;\r\nlet gridCellSize = 0;\r\nlet gridRegisteredItems = 0;\r\n\r\nfunction initialize(): void {\r\n    timeSinceLastVerboseFrame.reset();\r\n    timeSinceLastVerboseFrame.start();\r\n    frames = 0;\r\n}\r\n\r\nfunction registerFrame(): void {\r\n    frames++;\r\n\r\n    if (isVerboseFrame()) {\r\n        updateIndicators();\r\n        resetAll();\r\n    }\r\n}\r\n\r\nfunction isVerboseFrame(): boolean {\r\n    return timeSinceLastVerboseFrame.totalTime > VERBOSE_INTERVAL;\r\n}\r\n\r\nfunction updateIndicators(): void {\r\n    const fps = 1000 * frames / timeSinceLastVerboseFrame.totalTime;\r\n\r\n    if (Parameters.isInDebug) {\r\n        const averageFrameTime = timeSinceLastVerboseFrame.totalTime / frames;\r\n\r\n        const averageMainLoopTime = timeSpentInMainLoop.totalTime / frames;\r\n        const mainLoopTimeRelative = averageMainLoopTime / averageFrameTime;\r\n\r\n        const averageDrawTime = timeSpentInDraw.totalTime / frames;\r\n        const drawTimeRelative = averageDrawTime / averageMainLoopTime;\r\n\r\n        const averageDrawAllocateBufferTime = timeSpentInDrawAllocateBuffer.totalTime / frames;\r\n        const drawAllocateBufferTimeRelative = averageDrawAllocateBufferTime / averageDrawTime;\r\n\r\n        const averageDrawFillBufferTime = timeSpentInDrawFillBuffer.totalTime / frames;\r\n        const drawFillBufferTimeRelative = averageDrawFillBufferTime / averageDrawTime;\r\n\r\n        const averageDrawUploadVBOTime = timeSpentInDrawUploadVBO.totalTime / frames;\r\n        const drawDrawUploadVBOTimeRelative = averageDrawUploadVBOTime / averageDrawTime;\r\n\r\n        const averageDrawDrawXTime = timeSpentInDrawDrawX.totalTime / frames;\r\n        const drawDrawXTimeRelative = averageDrawDrawXTime / averageDrawTime;\r\n\r\n        const averageUpdateTime = timeSpentInUpdate.totalTime / frames;\r\n        const updateTimeRelative = averageUpdateTime / averageMainLoopTime;\r\n\r\n        const averageUpdateReindexTime = timeSpentInReindex.totalTime / frames;\r\n        const updateReindexTimeRelative = averageUpdateReindexTime / averageUpdateTime;\r\n\r\n        const averageUpdateReindexResetDomainTime = timeSpentInReindexResetDomain.totalTime / frames;\r\n        const updateReindexResetDomainTimeRelative = averageUpdateReindexResetDomainTime / averageUpdateReindexTime;\r\n\r\n        const averageUpdateReindexReindexItemsTime = timeSpentInReindexReindexItems.totalTime / frames;\r\n        const updateReindexReindexItemsTimeRelative = averageUpdateReindexReindexItemsTime / averageUpdateReindexTime;\r\n\r\n        const averageUpdateRecycleTime = timeSpentInRecycle.totalTime / frames;\r\n        const updateRecycleTimeRelative = averageUpdateRecycleTime / averageUpdateTime;\r\n\r\n        const averageUpdateZoomTime = timeSpentInZoom.totalTime / frames;\r\n        const updateZoomTimeRelative = averageUpdateZoomTime / averageUpdateTime;\r\n\r\n        Page.Canvas.setIndicatorText(\"fps\", `${fps.toFixed(0)} (${averageFrameTime.toFixed(2)} ms)`);\r\n        Page.Canvas.setIndicatorText(\"main-loop-time\", `${averageMainLoopTime.toFixed(2)} ms (${(100 * mainLoopTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-time\", `${averageDrawTime.toFixed(2)} ms (${(100 * drawTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-allocatebuffer-time\", `${averageDrawAllocateBufferTime.toFixed(2)} ms (${(100 * drawAllocateBufferTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-fillbuffer-time\", `${averageDrawFillBufferTime.toFixed(2)} ms (${(100 * drawFillBufferTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-uploadvbo-time\", `${averageDrawUploadVBOTime.toFixed(2)} ms (${(100 * drawDrawUploadVBOTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"draw-drawX-time\", `${averageDrawDrawXTime.toFixed(2)} ms (${(100 * drawDrawXTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-time\", `${averageUpdateTime.toFixed(2)} ms (${(100 * updateTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-reindex-time\", `${averageUpdateReindexTime.toFixed(2)} ms (${(100 * updateReindexTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-reindex-resetdomain-time\", `${averageUpdateReindexResetDomainTime.toFixed(2)} ms (${(100 * updateReindexResetDomainTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-reindex-reindexitems-time\", `${averageUpdateReindexReindexItemsTime.toFixed(2)} ms (${(100 * updateReindexReindexItemsTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-recycle-time\", `${averageUpdateRecycleTime.toFixed(2)} ms (${(100 * updateRecycleTimeRelative).toFixed(1)} %)`);\r\n        Page.Canvas.setIndicatorText(\"update-zoom-time\", `${averageUpdateZoomTime.toFixed(2)} ms (${(100 * updateZoomTimeRelative).toFixed(1)} %)`);\r\n\r\n        Page.Canvas.setIndicatorText(\"items-reclycled-count\", `${(itemsRecycledCount / frames * fps).toFixed(1)}`);\r\n        Page.Canvas.setIndicatorText(\"items-pending-recycling-count\", `${(itemsPendingRecyclingCount / frames).toFixed(1)}`);\r\n        Page.Canvas.setIndicatorText(\"items-recycling-tries-count\", `${(itemsRecyclingTries / frames).toFixed(1)}`);\r\n\r\n        if (nbGridStats > 0) {\r\n            const averageGridWidth = Math.round(gridWidth / nbGridStats);\r\n            const averageGridHeight = Math.round(gridHeight / nbGridStats);\r\n            const averageGridCellCount = averageGridWidth * averageGridHeight;\r\n            Page.Canvas.setIndicatorText(\"grid-size\", `${averageGridWidth}x${averageGridHeight} (${averageGridCellCount})`);\r\n            Page.Canvas.setIndicatorText(\"grid-cell-size\", `${(gridCellSize / nbGridStats).toFixed(1)}`);\r\n            Page.Canvas.setIndicatorText(\"grid-items-per-cell\", `${(gridRegisteredItems / nbGridStats / averageGridCellCount).toFixed(1)}`);\r\n        }\r\n    } else {\r\n        Page.Canvas.setIndicatorText(\"fps\", fps.toFixed(0));\r\n    }\r\n\r\n    Page.Canvas.setIndicatorText(\"items-count\", `${itemsCount}`);\r\n    Page.Canvas.setIndicatorText(\"items-visible-count\", `${(itemsCount - itemsPendingRecyclingCount / frames).toFixed(0)}`);\r\n\r\n}\r\n\r\nfunction resetAll(): void {\r\n    timeSinceLastVerboseFrame.reset();\r\n\r\n    frames = 0;\r\n    timeSpentInMainLoop.reset();\r\n    timeSpentInDraw.reset();\r\n    timeSpentInDrawAllocateBuffer.reset();\r\n    timeSpentInDrawFillBuffer.reset();\r\n    timeSpentInDrawUploadVBO.reset();\r\n    timeSpentInDrawDrawX.reset();\r\n    timeSpentInUpdate.reset();\r\n    timeSpentInReindex.reset();\r\n    timeSpentInReindexResetDomain.reset();\r\n    timeSpentInReindexReindexItems.reset();\r\n    timeSpentInRecycle.reset();\r\n    timeSpentInZoom.reset();\r\n\r\n    itemsRecycledCount = 0;\r\n    itemsPendingRecyclingCount = 0;\r\n    itemsRecyclingTries = 0;\r\n\r\n    nbGridStats = 0;\r\n}\r\n\r\nfunction registerRecyclingStats(total: number, recycled: number, pendingRecycling: number, nbTriesCount: number): void {\r\n    itemsCount = total;\r\n    itemsRecycledCount += recycled;\r\n    itemsPendingRecyclingCount += pendingRecycling;\r\n    itemsRecyclingTries += nbTriesCount;\r\n}\r\n\r\nfunction registerGridStats(gridSize: ISize, cellSize: number, registeredItems: number): void {\r\n    if (nbGridStats === 0) {\r\n        gridWidth = 0;\r\n        gridHeight = 0;\r\n        gridCellSize = 0;\r\n        gridRegisteredItems = 0;\r\n    }\r\n\r\n    nbGridStats++;\r\n    gridWidth += gridSize.width;\r\n    gridHeight += gridSize.height;\r\n    gridCellSize += cellSize;\r\n    gridRegisteredItems += registeredItems;\r\n}\r\n\r\nexport {\r\n    initialize,\r\n    registerGridStats,\r\n    registerFrame,\r\n    registerRecyclingStats,\r\n    timeSpentInMainLoop,\r\n    timeSpentInDraw,\r\n    timeSpentInDrawAllocateBuffer,\r\n    timeSpentInDrawFillBuffer,\r\n    timeSpentInDrawUploadVBO,\r\n    timeSpentInDrawDrawX,\r\n    timeSpentInUpdate,\r\n    timeSpentInReindex,\r\n    timeSpentInReindexResetDomain,\r\n    timeSpentInReindexReindexItems,\r\n    timeSpentInRecycle,\r\n    timeSpentInZoom,\r\n};\r\n","class StopWatch {\r\n    private _totalTime: number;\r\n    private _lastCheckpoint: number;\r\n    private _isRunning: boolean;\r\n\r\n    constructor() {\r\n        this._totalTime = 0;\r\n        this._isRunning = false;\r\n    }\r\n\r\n    public start(): void {\r\n        if (!this._isRunning) {\r\n            this._lastCheckpoint = performance.now();\r\n            this._isRunning = true;\r\n        } else {\r\n            console.log(\"Error: stopwatch is already started\");\r\n        }\r\n    }\r\n\r\n    public stop(): void {\r\n        if (this._isRunning) {\r\n            const now = performance.now();\r\n            this._totalTime += now - this._lastCheckpoint;\r\n            this._lastCheckpoint = now;\r\n            this._isRunning = false;\r\n        } else {\r\n            console.log(\"Error: stopwatch is already stopped.\");\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this._totalTime = 0;\r\n        this._lastCheckpoint = performance.now();\r\n    }\r\n\r\n    public get totalTime(): number {\r\n        if (this._isRunning) {\r\n            return this._totalTime + (performance.now() - this._lastCheckpoint);\r\n        } else {\r\n            return this._totalTime;\r\n        }\r\n    }\r\n}\r\n\r\nexport { StopWatch };\r\n","function downloadTextFile(fileName: string, content: string): void {\r\n    const fileType = \"text/plain\";\r\n\r\n    const blob = new Blob([content], { type: fileType });\r\n\r\n    if (typeof window.navigator !== \"undefined\" && typeof (window.navigator as any).msSaveBlob !== \"undefined\") { // for IE\r\n        (window.navigator as any).msSaveBlob(blob, fileName);\r\n    } else {\r\n        const objectUrl = URL.createObjectURL(blob);\r\n\r\n        const linkElement = document.createElement('a');\r\n        linkElement.download = fileName;\r\n        linkElement.href = objectUrl;\r\n        linkElement.dataset.downloadurl = `${fileType}:${linkElement.download}:${linkElement.href}`;\r\n        linkElement.style.display = \"none\";\r\n        document.body.appendChild(linkElement);\r\n        linkElement.click();\r\n        document.body.removeChild(linkElement);\r\n\r\n        // don't forget to free the objectURL after a few seconds\r\n        setTimeout(() => {\r\n            URL.revokeObjectURL(objectUrl);\r\n        }, 5000);\r\n    }\r\n}\r\n\r\nfunction getQueryStringValue(name: string): string | null {\r\n    const url = window.location.href;\r\n    const queryStringStart = url.indexOf(\"?\");\r\n    if (queryStringStart >= 0) {\r\n        const queryString = url.substring(queryStringStart + 1);\r\n        if (queryString.length > 0) {\r\n            const parameters = queryString.split(\"&\");\r\n            for (const parameter of parameters) {\r\n                const keyValue = parameter.split(\"=\");\r\n                if (keyValue.length === 2) {\r\n                    const decodedKey = decodeURIComponent(keyValue[0]);\r\n                    if (decodedKey === name) {\r\n                        return decodeURIComponent(keyValue[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport {\r\n    downloadTextFile,\r\n    getQueryStringValue,\r\n};\r\n","class NumberRange {\r\n    public constructor (public from: number, public to: number) {}\r\n\r\n    public isInRange(candidate: number): boolean {\r\n        return this.from <= candidate && candidate <= this.to;\r\n    }\r\n\r\n    public clamp(value: number): number {\r\n        if (value < this.from) {\r\n            return this.from;\r\n        } else if (value > this.to) {\r\n            return this.to;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public get span(): number {\r\n        return this.to - this.from;\r\n    }\r\n}\r\n\r\nexport { NumberRange };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(633);\n"],"names":["palettes","Color","setPalette","id","length","this","usePalette","ColorPicker","palette","getDisplayColor","itemColor","itemNestingLevel","highContrastMode","darkMode","WHITE","BLACK","getDifferentColorFromPalette","colorToAvoid","result","paletteSize","colorId","Math","floor","random","String","prototype","padStart","maxLength","fillString","nbRepeats","ceil","i","r","g","b","randomChannel","toString","hexString","rHex","gHex","bHex","GREEN","testedSquares","fixed","PatternSquare","mobile","testedCircles","PatternCircle","testedRectangles","PatternRectangle","testedTriangles","PatternTriangle","testedHears","PatternHeart","computeSquare","sideSize","computeRectangle","width","height","size","from","x","y","to","mainDebugCollisions","plotter","PlotterCanvas2D","zoomFactor","Page","Canvas","Observers","mouseWheel","push","delta","max","min","requestAnimationFrame","mainLoop","primitive","currentTestType","Parameters","currentCollisionType","testitems","EPrimitive","SQUARE","CIRCLE","RECTANGLE","TRIANGLE","canvasSize","getSize","minCanvasSide","mousePosRelative","getMousePosition","center","drawFunction","items","drawSquares","drawCircles","drawRectangles","drawTriangles","drawHearts","getDrawFunction","ECollisionTestType","PRIMITIVE","lines","initialize","drawLines","finalize","POINT","domainSize","visibility","computeVisibility","EVisibility","COVERS_VIEW","console","log","OUT_OF_VIEW","initializedItemsList","uninitializedItemsList","lastRecyclingTime","grid","Grid","zoomCenter","currentBackgroundItem","reset","createItem","HEART","Error","currentPrimitive","setItemsCount","wantedCount","initializedCount","totalItemsCount","itemsToAdd","newItem","draw","Engine","DEFAULT_BACKGROUND_ITEM","color","blackBackground","highContrast","everythingDrawn","isReady","isZooming","performance","now","PatternBase","maxBlendingTime","itemsToDraw","backgroundColor","computeBackgroundColor","oneCellOnly","getItemsFromCell","cellX","cellY","showGrid","udpate","deltaTimeInSeconds","mayRecycle","willZoom","needToInitializeGrid","requiresRedraw","Statistics","timeSpentInReindex","start","gridChanged","reindexItems","stop","timeSpentInRecycle","itemsRecycled","performRecycling","timeSpentInZoom","itemsMoved","performZoom","gridCellSize","cellSize","adaptativeGrid","targetItemsPerCell","targetItemsPerGridCell","lastItemsPerCell","itemsPerCell","nbItemsRecycled","allowOverlapping","sizeFactor","spacing","acceptedSizesForNewItems","NumberRange","minSize","maxTries","maxTriesPerFrame","backgroundItem","triesLeft","currentItem","pop","resetResult","nbTries","success","registerItem","nbPendingRecycling","nbTriesUsed","registerRecyclingStats","computeStatistics","updateZoomCenter","newInitializedArray","zoomSpeed","item","zoomIn","MAX_SIZE","VISIBLE","nestingLevel","rawColor","isMouseDown","mousePosition","halfWidth","halfHeight","gl","initGL","flags","setError","message","Demopage","setErrorMessage","canvas","getCanvas","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","adjustSize","hidpi","cssPixel","window","devicePixelRatio","clientWidth","clientHeight","_gl","GLResource","cachedShaders","buildShader","infos","callback","sourcesPending","sourcesFailed","loadedSource","processSource","source","replace","match","name","injected","shader","vert","ShaderSources","getSource","vertexFilename","frag","fragmentFilename","processedVert","processedFrag","Shader","loadSource","getShader","registerShader","callAndClearCallbacks","cached","callbacks","cachedCallback","failed","pending","builtShader","deleteShader","freeGLResources","cachedSources","filename","text","XMLHttpRequest","open","onload","readyState","status","responseText","error","statusText","onerror","send","notImplemented","alert","types","str","binder","location","value","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","use","useProgram","bindUniforms","currTextureUnitNb","Object","keys","u","forEach","uName","uniform","loc","bindAttributes","a","aName","attribute","VBO","bind","bindUniformsAndAttributes","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","Usage","array","staticUsage","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","DYNAMIC_DRAW","normalize","stride","offset","usage","STATIC","DYNAMIC","createQuad","minX","minY","maxX","maxY","Float32Array","FLOAT","deleteBuffer","enableVertexAttribArray","vertexAttribPointer","setData","isInCollisionsDebug","canvasPlotter","isWebGLVersion","PlotterCanvasWebGL","engine","needToRedraw","addRedrawObserver","addClearObserver","addDownloadObserver","svgPlotter","PlotterSVG","svgString","export","Helper","downloadTextFile","lastRunTime","time","timeSpentInMainLoop","wantedItemsCount","quantity","paletteId","timeSpentInUpdate","updateChangedSomething","timeSpentInDraw","successfulDraw","registerFrame","main","controlId","RESET","SPACING","MIN_SIZE","ALLOW_OVERLAPPING","QUANTITY","ZOOM_SPEED","BACKGROUND","PALETTE","BLENDING","HIGH_CONTRAST","INDICATORS","MAX_TRIES_PER_FRAME","INSTANCING","ADAPTATIVE_GRID","TARGET_ITEMS_PER_GRIDCELL","CELL_SIZE","ONE_CELL_ONLY","SHOW_GRID","CELL_X","CELL_Y","COLLISION_TEST_TYPE","DOWNLOAD","redrawObservers","triggerRedraw","observer","canvasResize","Checkbox","addObserver","Tabs","Range","clearObservers","triggerClear","triggerClearIfNotZooming","Button","Picker","isInDebug","Helpers","getQueryStringValue","Sections","setVisibility","setIndicatorVisibility","setChecked","updateIndicatorsVisibility","visible","isChecked","setIndicatorsVisibility","updateGridControlsVisibility","adaptative","Controls","href","getValue","getValues","abs","disallowInstancing","FileControl","CANVAS_CENTER","globalLastTestId","lastTestId","blending","acceptedSizes","backgroundPattern","randomizePosition","parentItem","maxSize","computeBiggestSizePossible","isInRange","initializationTime","parentNestingLevel","parentColor","computeOpacity","blendTime","MAX_SIZE_LOWER","MAX_SIZE_GAP","lifetime","minSizeAllowed","currentTestId","rawMaxSize","computeBiggestSizePossibleToAvoidPoint","maxDistanceDetectableByExactCell","getDistanceToClosestBorder","exactCellId","getCellId","existingItemsFromExactCell","biggestSizeToAvoidClosestItems","computeBiggestSizePossibleToAvoidItems","topLeftPoint","bottomRightPoint","minCellId","maxCellId","additionalItemsToTest","getItemsFromCellsGroup","biggestSizeToAvoidFurtherItems","itemsToAvoid","computeBiggestSizePossibleToAvoidItem","isInside","round","pointToAvoid","toPointX","toPointY","sqrt","itemToAvoid","toCenterX","toCenterY","distance","radius","halfDomainWidth","halfDomainHeight","absX","absY","dX","dY","INVERT_SQRT_2","isPointInside","deltaX","deltaY","rotatedDeltaX","rotatedDeltaY","otherHalfB","otherTopPoint","otherBottomPoint","otherHalfA","otherCircleCenter","otherCircleRadius","c","testCircleSamples","nbPoints","angleRange","angleRangeSpan","span","angleStep","bestAngle","angle","cos","sin","maxSizeToAvoidThisPoint","clamp","maxAnglesRange","PI","narrowedRange","topLeftInside","topRightInside","bottomLeftInside","bottomRightInside","point","aspectRatio","baseWidth","baseHeight","maxSizeX","maxSizeY","halfObstacleWidth","halfObstacleHeight","halfSideLength","sideLength","halfSize","rotatePoint","cosAngle","sinAngle","computeSegmentsIntersection","from1","delta1","delta2","denom","invDenom","t1","MAX_NUMBER","minPositive","args","arg","P1","baseP1","P2","baseP2","P3","baseP3","P1_TO_P2","P2_TO_P3","P3_TO_P1","pointToAvoidLocal","intersection","smallerTforMyVertices","smallerTforMySides","localOtherP1","localOtherP2","localOtherP3","scaledOtherP1toP2","scaledOtherP2toP3","scaledOtherP3toP1","T1_1","T1_2","T1_3","T2_1","T2_2","T2_3","T3_1","T3_2","T3_3","d1","d2","d3","PlotterBase","TWO_PI","context","alpha","clearCanvas","fillStyle","fillRect","squares","_size","square","centerX","centerY","circles","circle","beginPath","arc","fill","closePath","rectangles","rectangle","triangles","triangle","moveTo","lineTo","hearts","heart","scaledA","scaledC","strokeStyle","lineWidth","line","stroke","PlotterCanvasBase","resizeCanvas","actualWidth","actualHeight","SQUARE_GEOMETRY","TRIANGLE_GEOMETRY","ALIASED_POINT_SIZE_RANGE","needToResetInstancingDivision","instancingExtensionName","instancingExt","getExtension","errorMessage","enableBlending","linesBuffer","linesVBO","primitivesBuffer","primitivesVBOId","geometryBuffer","concat","geometryVBO","linesShader","squaresShader","circlesShader","rectanglesShader","trianglesShader","heartsShader","loadAndBuildShader","squaresInstancedShader","circlesInstancedShader","rectanglesInstancedShader","trianglesInstancedShader","heartsInstancedShader","supportsInstancing","clear","COLOR_BUFFER_BIT","viewport","drawPrimitives","nbLines","wantedLinesBufferLength","drawArrays","LINES","pointsShader","instancedShader","extraAttributeFunction","updatePrimitivesVBO","timeSpentInDrawDrawX","useInstancing","drawInstanced","drawAsPoints","nbItems","bindCommonUniformsAndAttributes","drawArraysInstancedANGLE","TRIANGLES","TRIANGLE_STRIP","POINTS","extraAttribute","timeSpentInDrawAllocateBuffer","wantedPrimitivesBufferLength","timeSpentInDrawFillBuffer","timeSpentInDrawUploadVBO","instanced","stateAttribLoc","colorAttribLoc","vertexAttribDivisorANGLE","enable","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","shaderName","affectShader","ShaderManager","stringParts","path","x1","y1","x2","y2","join","gridSize","gridCells","topLeftCorner","registeredItemsCount","timeSpentInReindexResetDomain","gridHasChanged","resetDomain","timeSpentInReindexReindexItems","topLeft","bottomRight","iCellY","iCellX","cellId","computeCellId","_cellSize","iX","iY","position","localX","localY","minDistanceX","minDistanceY","minCellX","minCellY","maxCellX","maxCellY","cellItems","apply","registerGridStats","wantedGridSizeX","wantedGridSizeY","hasChanged","nbCells","timeSinceLastVerboseFrame","StopWatch","frames","itemsCount","itemsRecycledCount","itemsPendingRecyclingCount","itemsRecyclingTries","nbGridStats","gridWidth","gridHeight","gridRegisteredItems","totalTime","fps","averageFrameTime","averageMainLoopTime","mainLoopTimeRelative","averageDrawTime","drawTimeRelative","averageDrawAllocateBufferTime","drawAllocateBufferTimeRelative","averageDrawFillBufferTime","drawFillBufferTimeRelative","averageDrawUploadVBOTime","drawDrawUploadVBOTimeRelative","averageDrawDrawXTime","drawDrawXTimeRelative","averageUpdateTime","updateTimeRelative","averageUpdateReindexTime","updateReindexTimeRelative","averageUpdateReindexResetDomainTime","updateReindexResetDomainTimeRelative","averageUpdateReindexReindexItemsTime","updateReindexReindexItemsTimeRelative","averageUpdateRecycleTime","updateRecycleTimeRelative","averageUpdateZoomTime","updateZoomTimeRelative","setIndicatorText","toFixed","averageGridWidth","averageGridHeight","averageGridCellCount","updateIndicators","total","recycled","pendingRecycling","nbTriesCount","registeredItems","_totalTime","_isRunning","_lastCheckpoint","fileName","content","fileType","blob","Blob","navigator","msSaveBlob","URL","createObjectURL","linkElement","document","createElement","download","dataset","downloadurl","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","url","queryStringStart","indexOf","queryString","substring","split","keyValue","decodeURIComponent","candidate","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"sourceRoot":""}